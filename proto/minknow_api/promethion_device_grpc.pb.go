// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minknow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromethionDeviceServiceClient is the client API for PromethionDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromethionDeviceServiceClient interface {
	// Change the settings which apply to the whole device.
	ChangeDeviceSettings(ctx context.Context, in *ChangeDeviceSettingsRequest, opts ...grpc.CallOption) (*ChangeDeviceSettingsResponse, error)
	// Get the current settings which apply to the whole device.
	GetDeviceSettings(ctx context.Context, in *GetDeviceSettingsRequest, opts ...grpc.CallOption) (*GetDeviceSettingsResponse, error)
	// Change the settings which apply specific pixel blocks.
	ChangePixelBlockSettings(ctx context.Context, in *ChangePixelBlockSettingsRequest, opts ...grpc.CallOption) (*ChangePixelBlockSettingsResponse, error)
	// Get the settings which apply to specific pixel blocks.
	GetPixelBlockSettings(ctx context.Context, in *GetPixelBlockSettingsRequest, opts ...grpc.CallOption) (*GetPixelBlockSettingsResponse, error)
	// Change the settings which apply to the referenced pixels.
	ChangePixelSettings(ctx context.Context, in *ChangePixelSettingsRequest, opts ...grpc.CallOption) (*ChangePixelSettingsResponse, error)
	// Get the pixel settings for the requested pixel's
	GetPixelSettings(ctx context.Context, in *GetPixelSettingsRequest, opts ...grpc.CallOption) (*GetPixelSettingsResponse, error)
	// Stream the current temperature of the device
	//
	// Since 4.3
	StreamTemperature(ctx context.Context, in *StreamTemperatureRequest, opts ...grpc.CallOption) (PromethionDeviceService_StreamTemperatureClient, error)
}

type promethionDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromethionDeviceServiceClient(cc grpc.ClientConnInterface) PromethionDeviceServiceClient {
	return &promethionDeviceServiceClient{cc}
}

func (c *promethionDeviceServiceClient) ChangeDeviceSettings(ctx context.Context, in *ChangeDeviceSettingsRequest, opts ...grpc.CallOption) (*ChangeDeviceSettingsResponse, error) {
	out := new(ChangeDeviceSettingsResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.promethion_device.PromethionDeviceService/change_device_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promethionDeviceServiceClient) GetDeviceSettings(ctx context.Context, in *GetDeviceSettingsRequest, opts ...grpc.CallOption) (*GetDeviceSettingsResponse, error) {
	out := new(GetDeviceSettingsResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.promethion_device.PromethionDeviceService/get_device_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promethionDeviceServiceClient) ChangePixelBlockSettings(ctx context.Context, in *ChangePixelBlockSettingsRequest, opts ...grpc.CallOption) (*ChangePixelBlockSettingsResponse, error) {
	out := new(ChangePixelBlockSettingsResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.promethion_device.PromethionDeviceService/change_pixel_block_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promethionDeviceServiceClient) GetPixelBlockSettings(ctx context.Context, in *GetPixelBlockSettingsRequest, opts ...grpc.CallOption) (*GetPixelBlockSettingsResponse, error) {
	out := new(GetPixelBlockSettingsResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.promethion_device.PromethionDeviceService/get_pixel_block_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promethionDeviceServiceClient) ChangePixelSettings(ctx context.Context, in *ChangePixelSettingsRequest, opts ...grpc.CallOption) (*ChangePixelSettingsResponse, error) {
	out := new(ChangePixelSettingsResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.promethion_device.PromethionDeviceService/change_pixel_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promethionDeviceServiceClient) GetPixelSettings(ctx context.Context, in *GetPixelSettingsRequest, opts ...grpc.CallOption) (*GetPixelSettingsResponse, error) {
	out := new(GetPixelSettingsResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.promethion_device.PromethionDeviceService/get_pixel_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promethionDeviceServiceClient) StreamTemperature(ctx context.Context, in *StreamTemperatureRequest, opts ...grpc.CallOption) (PromethionDeviceService_StreamTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &PromethionDeviceService_ServiceDesc.Streams[0], "/minknow_api.promethion_device.PromethionDeviceService/stream_temperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &promethionDeviceServiceStreamTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PromethionDeviceService_StreamTemperatureClient interface {
	Recv() (*GetTemperatureResponse, error)
	grpc.ClientStream
}

type promethionDeviceServiceStreamTemperatureClient struct {
	grpc.ClientStream
}

func (x *promethionDeviceServiceStreamTemperatureClient) Recv() (*GetTemperatureResponse, error) {
	m := new(GetTemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PromethionDeviceServiceServer is the server API for PromethionDeviceService service.
// All implementations must embed UnimplementedPromethionDeviceServiceServer
// for forward compatibility
type PromethionDeviceServiceServer interface {
	// Change the settings which apply to the whole device.
	ChangeDeviceSettings(context.Context, *ChangeDeviceSettingsRequest) (*ChangeDeviceSettingsResponse, error)
	// Get the current settings which apply to the whole device.
	GetDeviceSettings(context.Context, *GetDeviceSettingsRequest) (*GetDeviceSettingsResponse, error)
	// Change the settings which apply specific pixel blocks.
	ChangePixelBlockSettings(context.Context, *ChangePixelBlockSettingsRequest) (*ChangePixelBlockSettingsResponse, error)
	// Get the settings which apply to specific pixel blocks.
	GetPixelBlockSettings(context.Context, *GetPixelBlockSettingsRequest) (*GetPixelBlockSettingsResponse, error)
	// Change the settings which apply to the referenced pixels.
	ChangePixelSettings(context.Context, *ChangePixelSettingsRequest) (*ChangePixelSettingsResponse, error)
	// Get the pixel settings for the requested pixel's
	GetPixelSettings(context.Context, *GetPixelSettingsRequest) (*GetPixelSettingsResponse, error)
	// Stream the current temperature of the device
	//
	// Since 4.3
	StreamTemperature(*StreamTemperatureRequest, PromethionDeviceService_StreamTemperatureServer) error
	mustEmbedUnimplementedPromethionDeviceServiceServer()
}

// UnimplementedPromethionDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPromethionDeviceServiceServer struct {
}

func (UnimplementedPromethionDeviceServiceServer) ChangeDeviceSettings(context.Context, *ChangeDeviceSettingsRequest) (*ChangeDeviceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDeviceSettings not implemented")
}
func (UnimplementedPromethionDeviceServiceServer) GetDeviceSettings(context.Context, *GetDeviceSettingsRequest) (*GetDeviceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSettings not implemented")
}
func (UnimplementedPromethionDeviceServiceServer) ChangePixelBlockSettings(context.Context, *ChangePixelBlockSettingsRequest) (*ChangePixelBlockSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePixelBlockSettings not implemented")
}
func (UnimplementedPromethionDeviceServiceServer) GetPixelBlockSettings(context.Context, *GetPixelBlockSettingsRequest) (*GetPixelBlockSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixelBlockSettings not implemented")
}
func (UnimplementedPromethionDeviceServiceServer) ChangePixelSettings(context.Context, *ChangePixelSettingsRequest) (*ChangePixelSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePixelSettings not implemented")
}
func (UnimplementedPromethionDeviceServiceServer) GetPixelSettings(context.Context, *GetPixelSettingsRequest) (*GetPixelSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixelSettings not implemented")
}
func (UnimplementedPromethionDeviceServiceServer) StreamTemperature(*StreamTemperatureRequest, PromethionDeviceService_StreamTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTemperature not implemented")
}
func (UnimplementedPromethionDeviceServiceServer) mustEmbedUnimplementedPromethionDeviceServiceServer() {
}

// UnsafePromethionDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromethionDeviceServiceServer will
// result in compilation errors.
type UnsafePromethionDeviceServiceServer interface {
	mustEmbedUnimplementedPromethionDeviceServiceServer()
}

func RegisterPromethionDeviceServiceServer(s grpc.ServiceRegistrar, srv PromethionDeviceServiceServer) {
	s.RegisterService(&PromethionDeviceService_ServiceDesc, srv)
}

func _PromethionDeviceService_ChangeDeviceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDeviceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromethionDeviceServiceServer).ChangeDeviceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.promethion_device.PromethionDeviceService/change_device_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromethionDeviceServiceServer).ChangeDeviceSettings(ctx, req.(*ChangeDeviceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromethionDeviceService_GetDeviceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromethionDeviceServiceServer).GetDeviceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.promethion_device.PromethionDeviceService/get_device_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromethionDeviceServiceServer).GetDeviceSettings(ctx, req.(*GetDeviceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromethionDeviceService_ChangePixelBlockSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePixelBlockSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromethionDeviceServiceServer).ChangePixelBlockSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.promethion_device.PromethionDeviceService/change_pixel_block_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromethionDeviceServiceServer).ChangePixelBlockSettings(ctx, req.(*ChangePixelBlockSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromethionDeviceService_GetPixelBlockSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPixelBlockSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromethionDeviceServiceServer).GetPixelBlockSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.promethion_device.PromethionDeviceService/get_pixel_block_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromethionDeviceServiceServer).GetPixelBlockSettings(ctx, req.(*GetPixelBlockSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromethionDeviceService_ChangePixelSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePixelSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromethionDeviceServiceServer).ChangePixelSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.promethion_device.PromethionDeviceService/change_pixel_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromethionDeviceServiceServer).ChangePixelSettings(ctx, req.(*ChangePixelSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromethionDeviceService_GetPixelSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPixelSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromethionDeviceServiceServer).GetPixelSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.promethion_device.PromethionDeviceService/get_pixel_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromethionDeviceServiceServer).GetPixelSettings(ctx, req.(*GetPixelSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromethionDeviceService_StreamTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTemperatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PromethionDeviceServiceServer).StreamTemperature(m, &promethionDeviceServiceStreamTemperatureServer{stream})
}

type PromethionDeviceService_StreamTemperatureServer interface {
	Send(*GetTemperatureResponse) error
	grpc.ServerStream
}

type promethionDeviceServiceStreamTemperatureServer struct {
	grpc.ServerStream
}

func (x *promethionDeviceServiceStreamTemperatureServer) Send(m *GetTemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PromethionDeviceService_ServiceDesc is the grpc.ServiceDesc for PromethionDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromethionDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minknow_api.promethion_device.PromethionDeviceService",
	HandlerType: (*PromethionDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "change_device_settings",
			Handler:    _PromethionDeviceService_ChangeDeviceSettings_Handler,
		},
		{
			MethodName: "get_device_settings",
			Handler:    _PromethionDeviceService_GetDeviceSettings_Handler,
		},
		{
			MethodName: "change_pixel_block_settings",
			Handler:    _PromethionDeviceService_ChangePixelBlockSettings_Handler,
		},
		{
			MethodName: "get_pixel_block_settings",
			Handler:    _PromethionDeviceService_GetPixelBlockSettings_Handler,
		},
		{
			MethodName: "change_pixel_settings",
			Handler:    _PromethionDeviceService_ChangePixelSettings_Handler,
		},
		{
			MethodName: "get_pixel_settings",
			Handler:    _PromethionDeviceService_GetPixelSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream_temperature",
			Handler:       _PromethionDeviceService_StreamTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow_api/promethion_device.proto",
}
