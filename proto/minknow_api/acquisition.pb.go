// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/acquisition.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MinknowStatus int32

const (
	// ERROR_STATUS occurs when there is an error during a transition from one state to another.
	// Minknow will try to revert into the READY state to try to stabalise itself, but there is no guarantee of
	// that succeeding
	MinknowStatus_ERROR_STATUS MinknowStatus = 0
	// READY occurs when minknow is ready for a new experiment to start.
	MinknowStatus_READY MinknowStatus = 1
	// STARTING occurs when minknow has received a call for an experiment to start and is setting up the environment
	// for data acquisition to begin
	MinknowStatus_STARTING MinknowStatus = 2
	// PROCESSING occurs when minknow is reading data from the device.
	MinknowStatus_PROCESSING MinknowStatus = 3
	// FINISHING occurs when data acquisition has stopped (either from a explicit rpc request or the experiment naturally ended)
	// and data is still being processed (albacore is still in catchup and processing reads).
	MinknowStatus_FINISHING MinknowStatus = 4
)

// Enum value maps for MinknowStatus.
var (
	MinknowStatus_name = map[int32]string{
		0: "ERROR_STATUS",
		1: "READY",
		2: "STARTING",
		3: "PROCESSING",
		4: "FINISHING",
	}
	MinknowStatus_value = map[string]int32{
		"ERROR_STATUS": 0,
		"READY":        1,
		"STARTING":     2,
		"PROCESSING":   3,
		"FINISHING":    4,
	}
)

func (x MinknowStatus) Enum() *MinknowStatus {
	p := new(MinknowStatus)
	*p = x
	return p
}

func (x MinknowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinknowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[0].Descriptor()
}

func (MinknowStatus) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[0]
}

func (x MinknowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinknowStatus.Descriptor instead.
func (MinknowStatus) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{0}
}

// An on/off setting where MinKNOW can be allowed to choose a default.
type Option int32

const (
	// Allow MinKNOW to choose the default it believes is appropriate.
	Option_AUTO Option = 0
	// Prevent the behaviour being controlled.
	Option_DISABLE Option = 1
	// Force the behaviour being controlled.
	Option_FORCE Option = 2
)

// Enum value maps for Option.
var (
	Option_name = map[int32]string{
		0: "AUTO",
		1: "DISABLE",
		2: "FORCE",
	}
	Option_value = map[string]int32{
		"AUTO":    0,
		"DISABLE": 1,
		"FORCE":   2,
	}
)

func (x Option) Enum() *Option {
	p := new(Option)
	*p = x
	return p
}

func (x Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Option) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[1].Descriptor()
}

func (Option) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[1]
}

func (x Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Option.Descriptor instead.
func (Option) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{1}
}

type Purpose int32

const (
	// No specific purpose listed.
	//
	// Reports and sequencing metrics will be disabled by default. No modifications will be made to
	// the analysis configuration.
	Purpose_OTHER_PURPOSE Purpose = 0
	// Indicates that the acquisition is for sequencing.
	//
	// This will enable reports and sequencing metrics by default.
	Purpose_SEQUENCING Purpose = 2
	// Indicates that the acquisition is for calibration.
	//
	// This will disable the entire analysis pipeline and all file output.
	Purpose_CALIBRATION Purpose = 3
)

// Enum value maps for Purpose.
var (
	Purpose_name = map[int32]string{
		0: "OTHER_PURPOSE",
		2: "SEQUENCING",
		3: "CALIBRATION",
	}
	Purpose_value = map[string]int32{
		"OTHER_PURPOSE": 0,
		"SEQUENCING":    2,
		"CALIBRATION":   3,
	}
)

func (x Purpose) Enum() *Purpose {
	p := new(Purpose)
	*p = x
	return p
}

func (x Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[2].Descriptor()
}

func (Purpose) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[2]
}

func (x Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Purpose.Descriptor instead.
func (Purpose) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{2}
}

type AcquisitionState int32

const (
	// The acquisition period is starting up.
	AcquisitionState_ACQUISITION_STARTING AcquisitionState = 0
	// The acquisition period is still running.
	AcquisitionState_ACQUISITION_RUNNING AcquisitionState = 1
	// The acquisition period is finishing:
	// ie. finishing processing and saving
	// data produced during the run.
	AcquisitionState_ACQUISITION_FINISHING AcquisitionState = 2
	// The acquisition period finished on its own and
	// did not report an error.
	AcquisitionState_ACQUISITION_COMPLETED AcquisitionState = 3
)

// Enum value maps for AcquisitionState.
var (
	AcquisitionState_name = map[int32]string{
		0: "ACQUISITION_STARTING",
		1: "ACQUISITION_RUNNING",
		2: "ACQUISITION_FINISHING",
		3: "ACQUISITION_COMPLETED",
	}
	AcquisitionState_value = map[string]int32{
		"ACQUISITION_STARTING":  0,
		"ACQUISITION_RUNNING":   1,
		"ACQUISITION_FINISHING": 2,
		"ACQUISITION_COMPLETED": 3,
	}
)

func (x AcquisitionState) Enum() *AcquisitionState {
	p := new(AcquisitionState)
	*p = x
	return p
}

func (x AcquisitionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquisitionState) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[3].Descriptor()
}

func (AcquisitionState) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[3]
}

func (x AcquisitionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquisitionState.Descriptor instead.
func (AcquisitionState) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{3}
}

type AcquisitionStopReason int32

const (
	// The acquisition has not yet stopped.
	AcquisitionStopReason_STOPPED_NOT_SET AcquisitionStopReason = 0
	// The user called the stop rpc.
	AcquisitionStopReason_STOPPED_USER_REQUESTED AcquisitionStopReason = 1
	// MinKNOW detected disk space was low and ended acquisition.
	AcquisitionStopReason_STOPPED_NO_DISK_SPACE AcquisitionStopReason = 2
	// The device stopped acquisition as it was unable to read data.
	AcquisitionStopReason_STOPPED_DEVICE_STOPPED_ACQUISITION AcquisitionStopReason = 3
	// Another acquisition run was requested, so the old one was stopped.
	AcquisitionStopReason_STOPPED_STARTING_ANOTHER_RUN AcquisitionStopReason = 4
	// The protocol ended, causing the acquisition to stop.
	AcquisitionStopReason_STOPPED_PROTOCOL_ENDED AcquisitionStopReason = 5
	// The device or asic was disconnected, causing the run to stop.
	AcquisitionStopReason_STOPPED_DEVICE_ERROR AcquisitionStopReason = 6
	// The temperature was out of a safe range (either got extremely hot or was too
	// far from the set-point for a certain amount of time)
	AcquisitionStopReason_STOPPED_BAD_TEMPERATURE AcquisitionStopReason = 7
	// MinKNOW (or the sequencing device) was shut down, turned off or crashed.
	AcquisitionStopReason_STOPPED_SHUTDOWN AcquisitionStopReason = 8
)

// Enum value maps for AcquisitionStopReason.
var (
	AcquisitionStopReason_name = map[int32]string{
		0: "STOPPED_NOT_SET",
		1: "STOPPED_USER_REQUESTED",
		2: "STOPPED_NO_DISK_SPACE",
		3: "STOPPED_DEVICE_STOPPED_ACQUISITION",
		4: "STOPPED_STARTING_ANOTHER_RUN",
		5: "STOPPED_PROTOCOL_ENDED",
		6: "STOPPED_DEVICE_ERROR",
		7: "STOPPED_BAD_TEMPERATURE",
		8: "STOPPED_SHUTDOWN",
	}
	AcquisitionStopReason_value = map[string]int32{
		"STOPPED_NOT_SET":                    0,
		"STOPPED_USER_REQUESTED":             1,
		"STOPPED_NO_DISK_SPACE":              2,
		"STOPPED_DEVICE_STOPPED_ACQUISITION": 3,
		"STOPPED_STARTING_ANOTHER_RUN":       4,
		"STOPPED_PROTOCOL_ENDED":             5,
		"STOPPED_DEVICE_ERROR":               6,
		"STOPPED_BAD_TEMPERATURE":            7,
		"STOPPED_SHUTDOWN":                   8,
	}
)

func (x AcquisitionStopReason) Enum() *AcquisitionStopReason {
	p := new(AcquisitionStopReason)
	*p = x
	return p
}

func (x AcquisitionStopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquisitionStopReason) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[4].Descriptor()
}

func (AcquisitionStopReason) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[4]
}

func (x AcquisitionStopReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquisitionStopReason.Descriptor instead.
func (AcquisitionStopReason) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{4}
}

type StartupState int32

const (
	StartupState_STARTUP_UNKNOWN StartupState = 0
	// Building the analysis pipeline objects.
	StartupState_STARTUP_BUILDING_PIPELINE StartupState = 2
	// Waiting for the basecaller to load any required data/references.
	StartupState_STARTUP_INITIALISING_BASECALLER StartupState = 3
	// Waiting for the basecaller to load alignment specific data files.
	StartupState_STARTUP_INITIALISING_BASECALLER_ALIGNMENT StartupState = 4
	// Setting up data writers for outputting reads/files.
	StartupState_STARTUP_INITIALISING_DATA_WRITERS StartupState = 5
	// Initialsing storage for in flight reads.
	StartupState_STARTUP_INITIALISING_INTERMEDIATE_DATA_STORAGE StartupState = 6
	// Initialsing storage for run statistics.
	StartupState_STARTUP_INITIALISING_STATISTICS StartupState = 7
)

// Enum value maps for StartupState.
var (
	StartupState_name = map[int32]string{
		0: "STARTUP_UNKNOWN",
		2: "STARTUP_BUILDING_PIPELINE",
		3: "STARTUP_INITIALISING_BASECALLER",
		4: "STARTUP_INITIALISING_BASECALLER_ALIGNMENT",
		5: "STARTUP_INITIALISING_DATA_WRITERS",
		6: "STARTUP_INITIALISING_INTERMEDIATE_DATA_STORAGE",
		7: "STARTUP_INITIALISING_STATISTICS",
	}
	StartupState_value = map[string]int32{
		"STARTUP_UNKNOWN":                                0,
		"STARTUP_BUILDING_PIPELINE":                      2,
		"STARTUP_INITIALISING_BASECALLER":                3,
		"STARTUP_INITIALISING_BASECALLER_ALIGNMENT":      4,
		"STARTUP_INITIALISING_DATA_WRITERS":              5,
		"STARTUP_INITIALISING_INTERMEDIATE_DATA_STORAGE": 6,
		"STARTUP_INITIALISING_STATISTICS":                7,
	}
)

func (x StartupState) Enum() *StartupState {
	p := new(StartupState)
	*p = x
	return p
}

func (x StartupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartupState) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[5].Descriptor()
}

func (StartupState) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[5]
}

func (x StartupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartupState.Descriptor instead.
func (StartupState) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{5}
}

type FinishingState int32

const (
	// The default state for acquisition
	FinishingState_FINISHING_UNKNOWN FinishingState = 0
	// The acquisition is processing raw signal into reads
	FinishingState_FINISHING_PROCESSING_DEVICE_SIGNAL FinishingState = 1
	// Processed reads are being basecalled
	FinishingState_FINISHING_BASECALLING_READS FinishingState = 2
	// Data is being written to disk (or copied to network storage)
	FinishingState_FINISHING_SAVING_DATA FinishingState = 3
)

// Enum value maps for FinishingState.
var (
	FinishingState_name = map[int32]string{
		0: "FINISHING_UNKNOWN",
		1: "FINISHING_PROCESSING_DEVICE_SIGNAL",
		2: "FINISHING_BASECALLING_READS",
		3: "FINISHING_SAVING_DATA",
	}
	FinishingState_value = map[string]int32{
		"FINISHING_UNKNOWN":                  0,
		"FINISHING_PROCESSING_DEVICE_SIGNAL": 1,
		"FINISHING_BASECALLING_READS":        2,
		"FINISHING_SAVING_DATA":              3,
	}
)

func (x FinishingState) Enum() *FinishingState {
	p := new(FinishingState)
	*p = x
	return p
}

func (x FinishingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinishingState) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[6].Descriptor()
}

func (FinishingState) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[6]
}

func (x FinishingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinishingState.Descriptor instead.
func (FinishingState) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{6}
}

type StopRequest_DataAction int32

const (
	// The current default is set to FINISH_PROCESSING, but is subject to change
	StopRequest_STOP_DEFAULT StopRequest_DataAction = 0
	// STOP_KEEP_ALL_DATA tells minknow to stop albacore catchup, but keep all of the read files
	// Any reads that have not been successfully/unsucessfully basecalled will be classed as 'skipped'
	StopRequest_STOP_KEEP_ALL_DATA StopRequest_DataAction = 1
	// FINISH_PROCESSING will allow albacore to continue catchup until all of the reads have been basecalled
	StopRequest_STOP_FINISH_PROCESSING StopRequest_DataAction = 2
)

// Enum value maps for StopRequest_DataAction.
var (
	StopRequest_DataAction_name = map[int32]string{
		0: "STOP_DEFAULT",
		1: "STOP_KEEP_ALL_DATA",
		2: "STOP_FINISH_PROCESSING",
	}
	StopRequest_DataAction_value = map[string]int32{
		"STOP_DEFAULT":           0,
		"STOP_KEEP_ALL_DATA":     1,
		"STOP_FINISH_PROCESSING": 2,
	}
)

func (x StopRequest_DataAction) Enum() *StopRequest_DataAction {
	p := new(StopRequest_DataAction)
	*p = x
	return p
}

func (x StopRequest_DataAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopRequest_DataAction) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[7].Descriptor()
}

func (StopRequest_DataAction) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[7]
}

func (x StopRequest_DataAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopRequest_DataAction.Descriptor instead.
func (StopRequest_DataAction) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{2, 0}
}

// Available signal reader types
type SetSignalReaderRequest_SignalReaderType int32

const (
	SetSignalReaderRequest_HDF5   SetSignalReaderRequest_SignalReaderType = 0 // Default value
	SetSignalReaderRequest_DEVICE SetSignalReaderRequest_SignalReaderType = 1
)

// Enum value maps for SetSignalReaderRequest_SignalReaderType.
var (
	SetSignalReaderRequest_SignalReaderType_name = map[int32]string{
		0: "HDF5",
		1: "DEVICE",
	}
	SetSignalReaderRequest_SignalReaderType_value = map[string]int32{
		"HDF5":   0,
		"DEVICE": 1,
	}
)

func (x SetSignalReaderRequest_SignalReaderType) Enum() *SetSignalReaderRequest_SignalReaderType {
	p := new(SetSignalReaderRequest_SignalReaderType)
	*p = x
	return p
}

func (x SetSignalReaderRequest_SignalReaderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetSignalReaderRequest_SignalReaderType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[8].Descriptor()
}

func (SetSignalReaderRequest_SignalReaderType) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[8]
}

func (x SetSignalReaderRequest_SignalReaderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetSignalReaderRequest_SignalReaderType.Descriptor instead.
func (SetSignalReaderRequest_SignalReaderType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{20, 0}
}

type SetSignalReaderRequest_SourceFileMode int32

const (
	SetSignalReaderRequest_UNSPECIFIED SetSignalReaderRequest_SourceFileMode = 0 // Default value
	SetSignalReaderRequest_SINGLE_RUN  SetSignalReaderRequest_SourceFileMode = 1
	SetSignalReaderRequest_LOOP        SetSignalReaderRequest_SourceFileMode = 2
)

// Enum value maps for SetSignalReaderRequest_SourceFileMode.
var (
	SetSignalReaderRequest_SourceFileMode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SINGLE_RUN",
		2: "LOOP",
	}
	SetSignalReaderRequest_SourceFileMode_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SINGLE_RUN":  1,
		"LOOP":        2,
	}
)

func (x SetSignalReaderRequest_SourceFileMode) Enum() *SetSignalReaderRequest_SourceFileMode {
	p := new(SetSignalReaderRequest_SourceFileMode)
	*p = x
	return p
}

func (x SetSignalReaderRequest_SourceFileMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetSignalReaderRequest_SourceFileMode) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_acquisition_proto_enumTypes[9].Descriptor()
}

func (SetSignalReaderRequest_SourceFileMode) Type() protoreflect.EnumType {
	return &file_minknow_api_acquisition_proto_enumTypes[9]
}

func (x SetSignalReaderRequest_SourceFileMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetSignalReaderRequest_SourceFileMode.Descriptor instead.
func (SetSignalReaderRequest_SourceFileMode) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{20, 1}
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prevent waiting until the device is ready before starting acquisition.
	//
	// Defaults to false.
	//
	// By default, MinKNOW will block in the start() call for the device and flow cell to be ready
	// for acquisition (which may take several seconds after plugging in the flow cell on some
	// devices). Setting this option will cause the call to return with an error if the device is
	// not already prepared to acquire data.
	//
	// Since 1.14
	DontWaitForDeviceReady bool `protobuf:"varint,2,opt,name=dont_wait_for_device_ready,json=dontWaitForDeviceReady,proto3" json:"dont_wait_for_device_ready,omitempty"`
	// Generate duty time and throughput reports.
	//
	// Note that this setting will be ignored (and no reports will be generated) if no protocol is
	// running at the time acquisition is started.
	//
	// The default setting (AUTO) will only generate reports if purpose is set to SEQUENCING.
	//
	// Since 3.0
	GenerateReport Option `protobuf:"varint,3,opt,name=generate_report,json=generateReport,proto3,enum=minknow_api.acquisition.Option" json:"generate_report,omitempty"`
	// Whether sequencing read metrics should be reported to Oxford Nanopore.
	//
	// These are performance metrics that are used to improve the sequencing technology. They do not
	// include any actual sequencing data, only statistics about read lengths, duty time and similar
	// generic performance information.
	//
	// The default setting (AUTO) will only send metrics if purpose is set to SEQUENCING.
	//
	// Since 3.0
	SendSequencingReadMetrics Option `protobuf:"varint,4,opt,name=send_sequencing_read_metrics,json=sendSequencingReadMetrics,proto3,enum=minknow_api.acquisition.Option" json:"send_sequencing_read_metrics,omitempty"`
	// Whether basecalling metrics should be reported to Oxford Nanopore.
	//
	// These are performance metrics that are used to improve the sequencing technology. They do not
	// include any actual sequencing data, only statistics about basecalling performance.
	//
	// The default setting (AUTO) will only send metrics if purpose is set to SEQUENCING.
	//
	// NB: this setting is ignored if live basecalling is not enabled, since there will be no
	// metrics to send.
	//
	// Since 3.2
	SendBasecallingMetrics Option `protobuf:"varint,5,opt,name=send_basecalling_metrics,json=sendBasecallingMetrics,proto3,enum=minknow_api.acquisition.Option" json:"send_basecalling_metrics,omitempty"`
	// Specify the purpose of this acquisition period.
	//
	// This affects various defaults (see the Purpose enum documentation for more details). It may
	// also affect how the user interface presents the state of the protocol.
	//
	// Since 3.2
	Purpose Purpose `protobuf:"varint,6,opt,name=purpose,proto3,enum=minknow_api.acquisition.Purpose" json:"purpose,omitempty"`
	// Perform analysis for this acquisition period.
	//
	// If this is disabled, no reads, no events, no channel states and no basecalls will be
	// generated. Any RPCs that depend on any of these will fail. No reads-based files will be
	// produced at all, regardless of any other settings.
	//
	// This is mostly useful for calibration (although you should normally use the purpose field
	// rather than setting this explicitly).
	//
	// The default setting (AUTO) will use the persistent setting from the analysis_configuraiton
	// service, unless the purpose is set to CALIBRATION.
	//
	// Since 3.2
	Analysis Option `protobuf:"varint,7,opt,name=analysis,proto3,enum=minknow_api.acquisition.Option" json:"analysis,omitempty"`
	// Allow file output for this acquisition period.
	//
	// If this is disabled, the file output settings will be ignored for this acquisition period,
	// and no data files will be produced. Note that reports are NOT managed by this setting.
	//
	// Note that setting this to FORCE will simply make file output respect the bulk and read writer
	// configurations. If each file output type is disabled, you will still get no file output.
	//
	// This is mostly useful for calibration (although you should normally use the purpose field
	// rather than setting this explicitly).
	//
	// The default setting (AUTO) will only suppress file output if purpose is set to CALIBRATION.
	//
	// Since 3.2
	FileOutput Option `protobuf:"varint,8,opt,name=file_output,json=fileOutput,proto3,enum=minknow_api.acquisition.Option" json:"file_output,omitempty"`
	// Write a final_summary.txt file.
	//
	// If file_output is disabled, the final_summary.txt file will not be written regardless of
	// this setting.
	//
	// The default setting (AUTO) will only enable writing a final_summary.txt file if the purpose
	// is set to SEQUENCING.
	//
	// Since 3.5 (NB: in 3.3 and 3.4, final_summary.txt was always written out if file_output was
	// enabled).
	GenerateFinalSummary Option `protobuf:"varint,9,opt,name=generate_final_summary,json=generateFinalSummary,proto3,enum=minknow_api.acquisition.Option" json:"generate_final_summary,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{0}
}

func (x *StartRequest) GetDontWaitForDeviceReady() bool {
	if x != nil {
		return x.DontWaitForDeviceReady
	}
	return false
}

func (x *StartRequest) GetGenerateReport() Option {
	if x != nil {
		return x.GenerateReport
	}
	return Option_AUTO
}

func (x *StartRequest) GetSendSequencingReadMetrics() Option {
	if x != nil {
		return x.SendSequencingReadMetrics
	}
	return Option_AUTO
}

func (x *StartRequest) GetSendBasecallingMetrics() Option {
	if x != nil {
		return x.SendBasecallingMetrics
	}
	return Option_AUTO
}

func (x *StartRequest) GetPurpose() Purpose {
	if x != nil {
		return x.Purpose
	}
	return Purpose_OTHER_PURPOSE
}

func (x *StartRequest) GetAnalysis() Option {
	if x != nil {
		return x.Analysis
	}
	return Option_AUTO
}

func (x *StartRequest) GetFileOutput() Option {
	if x != nil {
		return x.FileOutput
	}
	return Option_AUTO
}

func (x *StartRequest) GetGenerateFinalSummary() Option {
	if x != nil {
		return x.GenerateFinalSummary
	}
	return Option_AUTO
}

type StartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally-unique identifier generated when the acquisition is started.
	//
	// This is guaranteed to unique, including aross sequencing devices.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{1}
}

func (x *StartResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataActionOnStop StopRequest_DataAction `protobuf:"varint,1,opt,name=data_action_on_stop,json=dataActionOnStop,proto3,enum=minknow_api.acquisition.StopRequest_DataAction" json:"data_action_on_stop,omitempty"`
	// Defaults to false
	// If false will return as soon as minknow enters the FINISHING state.
	// If true then returns as soon as minknow enters the READY state.
	WaitUntilReady bool `protobuf:"varint,2,opt,name=wait_until_ready,json=waitUntilReady,proto3" json:"wait_until_ready,omitempty"`
	// Keep the ASIC power on for GridIONs and MinIONs.
	//
	// Unless this option is set to true, the ASIC power will be disabled as soon as MinKNOW has
	// stopped pulling data from it. This is because removing (or plugging in) a flow cell while the
	// power is on can damage it. Disabling the power will also disable the heating element; this is
	// likely to cause the device to cool down (particularly for MinIONs).
	//
	// You should normally only use this option if you are expecting to start acquisition again
	// in a short amount of time.
	//
	// This option has no effect on PromethIONs.
	//
	// Since 1.15.2
	KeepPowerOn bool `protobuf:"varint,3,opt,name=keep_power_on,json=keepPowerOn,proto3" json:"keep_power_on,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{2}
}

func (x *StopRequest) GetDataActionOnStop() StopRequest_DataAction {
	if x != nil {
		return x.DataActionOnStop
	}
	return StopRequest_STOP_DEFAULT
}

func (x *StopRequest) GetWaitUntilReady() bool {
	if x != nil {
		return x.WaitUntilReady
	}
	return false
}

func (x *StopRequest) GetKeepPowerOn() bool {
	if x != nil {
		return x.KeepPowerOn
	}
	return false
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{3}
}

type WatchForStatusChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stop bool `protobuf:"varint,1,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *WatchForStatusChangeRequest) Reset() {
	*x = WatchForStatusChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchForStatusChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchForStatusChangeRequest) ProtoMessage() {}

func (x *WatchForStatusChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchForStatusChangeRequest.ProtoReflect.Descriptor instead.
func (*WatchForStatusChangeRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{4}
}

func (x *WatchForStatusChangeRequest) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

type WatchForStatusChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status MinknowStatus `protobuf:"varint,1,opt,name=status,proto3,enum=minknow_api.acquisition.MinknowStatus" json:"status,omitempty"`
}

func (x *WatchForStatusChangeResponse) Reset() {
	*x = WatchForStatusChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchForStatusChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchForStatusChangeResponse) ProtoMessage() {}

func (x *WatchForStatusChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchForStatusChangeResponse.ProtoReflect.Descriptor instead.
func (*WatchForStatusChangeResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{5}
}

func (x *WatchForStatusChangeResponse) GetStatus() MinknowStatus {
	if x != nil {
		return x.Status
	}
	return MinknowStatus_ERROR_STATUS
}

type CurrentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CurrentStatusRequest) Reset() {
	*x = CurrentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentStatusRequest) ProtoMessage() {}

func (x *CurrentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentStatusRequest.ProtoReflect.Descriptor instead.
func (*CurrentStatusRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{6}
}

type CurrentStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status MinknowStatus `protobuf:"varint,1,opt,name=status,proto3,enum=minknow_api.acquisition.MinknowStatus" json:"status,omitempty"`
}

func (x *CurrentStatusResponse) Reset() {
	*x = CurrentStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentStatusResponse) ProtoMessage() {}

func (x *CurrentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentStatusResponse.ProtoReflect.Descriptor instead.
func (*CurrentStatusResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{7}
}

func (x *CurrentStatusResponse) GetStatus() MinknowStatus {
	if x != nil {
		return x.Status
	}
	return MinknowStatus_ERROR_STATUS
}

type GetProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProgressRequest) Reset() {
	*x = GetProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgressRequest) ProtoMessage() {}

func (x *GetProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgressRequest.ProtoReflect.Descriptor instead.
func (*GetProgressRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{8}
}

type GetProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of raw data (per channel) that has been acquired and
	// processed.
	RawPerChannel *GetProgressResponse_RawPerChannel `protobuf:"bytes,1,opt,name=raw_per_channel,json=rawPerChannel,proto3" json:"raw_per_channel,omitempty"`
}

func (x *GetProgressResponse) Reset() {
	*x = GetProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgressResponse) ProtoMessage() {}

func (x *GetProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgressResponse.ProtoReflect.Descriptor instead.
func (*GetProgressResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{9}
}

func (x *GetProgressResponse) GetRawPerChannel() *GetProgressResponse_RawPerChannel {
	if x != nil {
		return x.RawPerChannel
	}
	return nil
}

type GetAcquisitionRunInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition period to get information about.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *GetAcquisitionRunInfoRequest) Reset() {
	*x = GetAcquisitionRunInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAcquisitionRunInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAcquisitionRunInfoRequest) ProtoMessage() {}

func (x *GetAcquisitionRunInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAcquisitionRunInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAcquisitionRunInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{10}
}

func (x *GetAcquisitionRunInfoRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type AcquisitionYieldSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of reads selected by analysis as good reads.
	//
	// The reads in this counter are completed, but not necessarily on disk yet.
	ReadCount int64 `protobuf:"varint,1,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`
	// Number of reads successfully basecalled.
	BasecalledPassReadCount int64 `protobuf:"varint,3,opt,name=basecalled_pass_read_count,json=basecalledPassReadCount,proto3" json:"basecalled_pass_read_count,omitempty"`
	// Number of reads which have failed to basecall.
	BasecalledFailReadCount int64 `protobuf:"varint,4,opt,name=basecalled_fail_read_count,json=basecalledFailReadCount,proto3" json:"basecalled_fail_read_count,omitempty"`
	// Number of reads which have been skipped
	BasecalledSkippedReadCount int64 `protobuf:"varint,10,opt,name=basecalled_skipped_read_count,json=basecalledSkippedReadCount,proto3" json:"basecalled_skipped_read_count,omitempty"`
	// Number of bases which have been called and classed as pass.
	BasecalledPassBases int64 `protobuf:"varint,5,opt,name=basecalled_pass_bases,json=basecalledPassBases,proto3" json:"basecalled_pass_bases,omitempty"`
	// Number of bases which have been called and were classed as fail.
	BasecalledFailBases int64 `protobuf:"varint,18,opt,name=basecalled_fail_bases,json=basecalledFailBases,proto3" json:"basecalled_fail_bases,omitempty"`
	// Number of raw samples which have been called.
	BasecalledSamples int64 `protobuf:"varint,6,opt,name=basecalled_samples,json=basecalledSamples,proto3" json:"basecalled_samples,omitempty"`
	// Number of minknow raw samples which have been selected
	// for writing to disk as reads.
	SelectedRawSamples int64 `protobuf:"varint,7,opt,name=selected_raw_samples,json=selectedRawSamples,proto3" json:"selected_raw_samples,omitempty"`
	// Number of minknow events which have been selected
	// for writing to disk as reads.
	SelectedEvents int64 `protobuf:"varint,8,opt,name=selected_events,json=selectedEvents,proto3" json:"selected_events,omitempty"`
	// Estimated number of bases MinKNOW has selected for writing.
	// This is estimated based on already called bases and samples.
	EstimatedSelectedBases int64 `protobuf:"varint,9,opt,name=estimated_selected_bases,json=estimatedSelectedBases,proto3" json:"estimated_selected_bases,omitempty"`
	// Number of bases which have matched target reference.
	//
	// Only specified when running live alignment.
	//
	// Since 4.0
	AlignmentMatches int64 `protobuf:"varint,14,opt,name=alignment_matches,json=alignmentMatches,proto3" json:"alignment_matches,omitempty"`
	// Number of bases which have not matched target reference.
	//
	// Only specified when running live alignment.
	//
	// Since 4.0
	AlignmentMismatches int64 `protobuf:"varint,15,opt,name=alignment_mismatches,json=alignmentMismatches,proto3" json:"alignment_mismatches,omitempty"`
	// Number of bases which were inserted into
	// alignments that matched the reference.
	//
	// Only specified when running live alignment.
	//
	// Since 4.0
	AlignmentInsertions int64 `protobuf:"varint,16,opt,name=alignment_insertions,json=alignmentInsertions,proto3" json:"alignment_insertions,omitempty"`
	// Number of bases which were deleted from
	// alignments that matched the reference.
	//
	// Only specified when running live alignment.
	//
	// Since 4.0
	AlignmentDeletions int64 `protobuf:"varint,17,opt,name=alignment_deletions,json=alignmentDeletions,proto3" json:"alignment_deletions,omitempty"`
	// Number of bases that match the target reference(s) expressed as a
	// fraction of the total size of the target reference(s).
	//
	// eg: For a specified alignment-targets with 2000 and 3000 bases, if
	// "alignment_matches" is 2500, then "alignment_coverage" will be 0.5
	//
	// Since 4.3
	AlignmentCoverage float32 `protobuf:"fixed32,19,opt,name=alignment_coverage,json=alignmentCoverage,proto3" json:"alignment_coverage,omitempty"`
}

func (x *AcquisitionYieldSummary) Reset() {
	*x = AcquisitionYieldSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionYieldSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionYieldSummary) ProtoMessage() {}

func (x *AcquisitionYieldSummary) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionYieldSummary.ProtoReflect.Descriptor instead.
func (*AcquisitionYieldSummary) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{11}
}

func (x *AcquisitionYieldSummary) GetReadCount() int64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetBasecalledPassReadCount() int64 {
	if x != nil {
		return x.BasecalledPassReadCount
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetBasecalledFailReadCount() int64 {
	if x != nil {
		return x.BasecalledFailReadCount
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetBasecalledSkippedReadCount() int64 {
	if x != nil {
		return x.BasecalledSkippedReadCount
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetBasecalledPassBases() int64 {
	if x != nil {
		return x.BasecalledPassBases
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetBasecalledFailBases() int64 {
	if x != nil {
		return x.BasecalledFailBases
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetBasecalledSamples() int64 {
	if x != nil {
		return x.BasecalledSamples
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetSelectedRawSamples() int64 {
	if x != nil {
		return x.SelectedRawSamples
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetSelectedEvents() int64 {
	if x != nil {
		return x.SelectedEvents
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetEstimatedSelectedBases() int64 {
	if x != nil {
		return x.EstimatedSelectedBases
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetAlignmentMatches() int64 {
	if x != nil {
		return x.AlignmentMatches
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetAlignmentMismatches() int64 {
	if x != nil {
		return x.AlignmentMismatches
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetAlignmentInsertions() int64 {
	if x != nil {
		return x.AlignmentInsertions
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetAlignmentDeletions() int64 {
	if x != nil {
		return x.AlignmentDeletions
	}
	return 0
}

func (x *AcquisitionYieldSummary) GetAlignmentCoverage() float32 {
	if x != nil {
		return x.AlignmentCoverage
	}
	return 0
}

type AcquisitionWriterSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of reads finished processing and written to disk.
	//
	// The reads which have been finalised and written to disk.
	WrittenReadCount int64 `protobuf:"varint,1,opt,name=written_read_count,json=writtenReadCount,proto3" json:"written_read_count,omitempty"`
	// Number of bytes which minknow needs to write in order to
	// finish the experiment.
	BytesToWriteProduced int64 `protobuf:"varint,2,opt,name=bytes_to_write_produced,json=bytesToWriteProduced,proto3" json:"bytes_to_write_produced,omitempty"`
	// Number of bytes which minknow has failed to write to final location.
	// These reads are instead contained in the fallback/tmp locations.
	BytesToWriteFailed int64 `protobuf:"varint,3,opt,name=bytes_to_write_failed,json=bytesToWriteFailed,proto3" json:"bytes_to_write_failed,omitempty"`
	// Number of bytes which minknow has written to final location.
	BytesToWriteCompleted int64 `protobuf:"varint,4,opt,name=bytes_to_write_completed,json=bytesToWriteCompleted,proto3" json:"bytes_to_write_completed,omitempty"`
}

func (x *AcquisitionWriterSummary) Reset() {
	*x = AcquisitionWriterSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionWriterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionWriterSummary) ProtoMessage() {}

func (x *AcquisitionWriterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionWriterSummary.ProtoReflect.Descriptor instead.
func (*AcquisitionWriterSummary) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{12}
}

func (x *AcquisitionWriterSummary) GetWrittenReadCount() int64 {
	if x != nil {
		return x.WrittenReadCount
	}
	return 0
}

func (x *AcquisitionWriterSummary) GetBytesToWriteProduced() int64 {
	if x != nil {
		return x.BytesToWriteProduced
	}
	return 0
}

func (x *AcquisitionWriterSummary) GetBytesToWriteFailed() int64 {
	if x != nil {
		return x.BytesToWriteFailed
	}
	return 0
}

func (x *AcquisitionWriterSummary) GetBytesToWriteCompleted() int64 {
	if x != nil {
		return x.BytesToWriteCompleted
	}
	return 0
}

type ChannelStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The groups of channel states.
	//
	// The groups are ordered according to the "order" attribute of the group style in the channel
	// states configuration.
	Groups []*ChannelStateInfo_Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ChannelStateInfo) Reset() {
	*x = ChannelStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStateInfo) ProtoMessage() {}

func (x *ChannelStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStateInfo.ProtoReflect.Descriptor instead.
func (*ChannelStateInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelStateInfo) GetGroups() []*ChannelStateInfo_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type AcquisitionConfigSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The purpose, as supplied to `acquisition.start()`
	Purpose Purpose `protobuf:"varint,21,opt,name=purpose,proto3,enum=minknow_api.acquisition.Purpose" json:"purpose,omitempty"`
	// Was basecalling enabled for the run.
	BasecallingEnabled bool `protobuf:"varint,1,opt,name=basecalling_enabled,json=basecallingEnabled,proto3" json:"basecalling_enabled,omitempty"`
	// Basecalling configuration filename (if basecalling enabled)
	BasecallingConfigFilename string `protobuf:"bytes,16,opt,name=basecalling_config_filename,json=basecallingConfigFilename,proto3" json:"basecalling_config_filename,omitempty"`
	// Is barcoding enabled for the run
	BarcodingEnabled bool `protobuf:"varint,13,opt,name=barcoding_enabled,json=barcodingEnabled,proto3" json:"barcoding_enabled,omitempty"`
	/// Barcoding kit(s) used (if barcoding enabled)
	BarcodingKits []string `protobuf:"bytes,17,rep,name=barcoding_kits,json=barcodingKits,proto3" json:"barcoding_kits,omitempty"`
	// Is alignment enabled for the run
	AlignmentEnabled bool `protobuf:"varint,14,opt,name=alignment_enabled,json=alignmentEnabled,proto3" json:"alignment_enabled,omitempty"`
	// Alignment reference file(s) used (if alignment enabled)
	AlignmentReferenceFiles []string `protobuf:"bytes,18,rep,name=alignment_reference_files,json=alignmentReferenceFiles,proto3" json:"alignment_reference_files,omitempty"`
	// bed file used (if alignment enabled, and bed file specified)
	AlignmentBedFile string `protobuf:"bytes,19,opt,name=alignment_bed_file,json=alignmentBedFile,proto3" json:"alignment_bed_file,omitempty"`
	// Is lamp enabled for the run
	LampEnabled bool `protobuf:"varint,15,opt,name=lamp_enabled,json=lampEnabled,proto3" json:"lamp_enabled,omitempty"`
	// The LAMP kit used (if LAMP enabled)
	LampKit string `protobuf:"bytes,20,opt,name=lamp_kit,json=lampKit,proto3" json:"lamp_kit,omitempty"`
	// Root directory reads were written to for the run.
	//
	// Empty if no reads were enabled.
	ReadsDirectory string `protobuf:"bytes,2,opt,name=reads_directory,json=readsDirectory,proto3" json:"reads_directory,omitempty"`
	// Directories reads are written to if the reads_directory is on the network
	// and writes to it fail.
	//
	// Empty if no reads were enabled.
	ReadsFallbackDirectories []string `protobuf:"bytes,3,rep,name=reads_fallback_directories,json=readsFallbackDirectories,proto3" json:"reads_fallback_directories,omitempty"`
	// Determine if fast5 reads were enabled for the run.
	Fast5ReadsEnabled bool `protobuf:"varint,4,opt,name=fast5_reads_enabled,json=fast5ReadsEnabled,proto3" json:"fast5_reads_enabled,omitempty"`
	// Determine if fastq reads were enabled for the run.
	FastqReadsEnabled bool `protobuf:"varint,5,opt,name=fastq_reads_enabled,json=fastqReadsEnabled,proto3" json:"fastq_reads_enabled,omitempty"`
	// Determine if protobuf reads were enabled for the run.
	ProtobufReadsEnabled bool `protobuf:"varint,6,opt,name=protobuf_reads_enabled,json=protobufReadsEnabled,proto3" json:"protobuf_reads_enabled,omitempty"`
	// The path of the bulk file for the run.
	//
	// Empty if no reads were enabled.
	BulkFilePath string `protobuf:"bytes,7,opt,name=bulk_file_path,json=bulkFilePath,proto3" json:"bulk_file_path,omitempty"`
	// Find if the bulk writer was enabled for a run.
	BulkFileEnabled bool `protobuf:"varint,8,opt,name=bulk_file_enabled,json=bulkFileEnabled,proto3" json:"bulk_file_enabled,omitempty"`
	// Channel state styling information
	ChannelStateInfo *ChannelStateInfo `protobuf:"bytes,9,opt,name=channel_state_info,json=channelStateInfo,proto3" json:"channel_state_info,omitempty"`
	// Number of bases per event
	EventsToBaseRatio float32 `protobuf:"fixed32,10,opt,name=events_to_base_ratio,json=eventsToBaseRatio,proto3" json:"events_to_base_ratio,omitempty"`
	// Sample rate for the acquisition.
	//
	// Since 3.3
	SampleRate uint32 `protobuf:"varint,11,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Channel count used in the acquisition.
	//
	// Since 3.3
	ChannelCount uint32 `protobuf:"varint,12,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
}

func (x *AcquisitionConfigSummary) Reset() {
	*x = AcquisitionConfigSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionConfigSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionConfigSummary) ProtoMessage() {}

func (x *AcquisitionConfigSummary) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionConfigSummary.ProtoReflect.Descriptor instead.
func (*AcquisitionConfigSummary) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{14}
}

func (x *AcquisitionConfigSummary) GetPurpose() Purpose {
	if x != nil {
		return x.Purpose
	}
	return Purpose_OTHER_PURPOSE
}

func (x *AcquisitionConfigSummary) GetBasecallingEnabled() bool {
	if x != nil {
		return x.BasecallingEnabled
	}
	return false
}

func (x *AcquisitionConfigSummary) GetBasecallingConfigFilename() string {
	if x != nil {
		return x.BasecallingConfigFilename
	}
	return ""
}

func (x *AcquisitionConfigSummary) GetBarcodingEnabled() bool {
	if x != nil {
		return x.BarcodingEnabled
	}
	return false
}

func (x *AcquisitionConfigSummary) GetBarcodingKits() []string {
	if x != nil {
		return x.BarcodingKits
	}
	return nil
}

func (x *AcquisitionConfigSummary) GetAlignmentEnabled() bool {
	if x != nil {
		return x.AlignmentEnabled
	}
	return false
}

func (x *AcquisitionConfigSummary) GetAlignmentReferenceFiles() []string {
	if x != nil {
		return x.AlignmentReferenceFiles
	}
	return nil
}

func (x *AcquisitionConfigSummary) GetAlignmentBedFile() string {
	if x != nil {
		return x.AlignmentBedFile
	}
	return ""
}

func (x *AcquisitionConfigSummary) GetLampEnabled() bool {
	if x != nil {
		return x.LampEnabled
	}
	return false
}

func (x *AcquisitionConfigSummary) GetLampKit() string {
	if x != nil {
		return x.LampKit
	}
	return ""
}

func (x *AcquisitionConfigSummary) GetReadsDirectory() string {
	if x != nil {
		return x.ReadsDirectory
	}
	return ""
}

func (x *AcquisitionConfigSummary) GetReadsFallbackDirectories() []string {
	if x != nil {
		return x.ReadsFallbackDirectories
	}
	return nil
}

func (x *AcquisitionConfigSummary) GetFast5ReadsEnabled() bool {
	if x != nil {
		return x.Fast5ReadsEnabled
	}
	return false
}

func (x *AcquisitionConfigSummary) GetFastqReadsEnabled() bool {
	if x != nil {
		return x.FastqReadsEnabled
	}
	return false
}

func (x *AcquisitionConfigSummary) GetProtobufReadsEnabled() bool {
	if x != nil {
		return x.ProtobufReadsEnabled
	}
	return false
}

func (x *AcquisitionConfigSummary) GetBulkFilePath() string {
	if x != nil {
		return x.BulkFilePath
	}
	return ""
}

func (x *AcquisitionConfigSummary) GetBulkFileEnabled() bool {
	if x != nil {
		return x.BulkFileEnabled
	}
	return false
}

func (x *AcquisitionConfigSummary) GetChannelStateInfo() *ChannelStateInfo {
	if x != nil {
		return x.ChannelStateInfo
	}
	return nil
}

func (x *AcquisitionConfigSummary) GetEventsToBaseRatio() float32 {
	if x != nil {
		return x.EventsToBaseRatio
	}
	return 0
}

func (x *AcquisitionConfigSummary) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AcquisitionConfigSummary) GetChannelCount() uint32 {
	if x != nil {
		return x.ChannelCount
	}
	return 0
}

type AcquisitionRunInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier assigned to this acquisition run.
	//
	// This is guaranteed to be made of ASCII characters, and at
	// most 40 characters. It is globally unique across all
	// acquisitions on all MinKNOW instances.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Current startup task (or STARTUP_UNKNOWN if not starting up).
	StartupState StartupState `protobuf:"varint,12,opt,name=startup_state,json=startupState,proto3,enum=minknow_api.acquisition.StartupState" json:"startup_state,omitempty"`
	// Indicates the current state of the acquisition.
	State AcquisitionState `protobuf:"varint,2,opt,name=state,proto3,enum=minknow_api.acquisition.AcquisitionState" json:"state,omitempty"`
	// If the experiment is finishing, an extra piece of state
	// describing the current finishing state.
	FinishingState FinishingState `protobuf:"varint,10,opt,name=finishing_state,json=finishingState,proto3,enum=minknow_api.acquisition.FinishingState" json:"finishing_state,omitempty"`
	// The reason the acquisition period was ended.
	StopReason AcquisitionStopReason `protobuf:"varint,3,opt,name=stop_reason,json=stopReason,proto3,enum=minknow_api.acquisition.AcquisitionStopReason" json:"stop_reason,omitempty"`
	// When the acquisition period was started (UTC).
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// When MinKNOW began acquiring data (UTC).
	//
	// Unset if the acquisition is still starting up.
	DataReadStartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=data_read_start_time,json=dataReadStartTime,proto3" json:"data_read_start_time,omitempty"`
	// When the MinKNOW stopped acquiring data (UTC).
	//
	// Unset if the acquisition is still acquiring.
	DataReadEndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=data_read_end_time,json=dataReadEndTime,proto3" json:"data_read_end_time,omitempty"`
	// When the acquisition terminated (UTC).
	//
	// Unset if the acquisition period is still running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Summary of acquisition yields.
	//
	// Since 1.12
	YieldSummary *AcquisitionYieldSummary `protobuf:"bytes,8,opt,name=yield_summary,json=yieldSummary,proto3" json:"yield_summary,omitempty"`
	// Summary of the configuration settings for a run.
	//
	// Since 1.14
	ConfigSummary *AcquisitionConfigSummary `protobuf:"bytes,9,opt,name=config_summary,json=configSummary,proto3" json:"config_summary,omitempty"`
	// Summary of writer yields.
	//
	// Since 4.0
	WriterSummary *AcquisitionWriterSummary `protobuf:"bytes,11,opt,name=writer_summary,json=writerSummary,proto3" json:"writer_summary,omitempty"`
}

func (x *AcquisitionRunInfo) Reset() {
	*x = AcquisitionRunInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionRunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionRunInfo) ProtoMessage() {}

func (x *AcquisitionRunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionRunInfo.ProtoReflect.Descriptor instead.
func (*AcquisitionRunInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{15}
}

func (x *AcquisitionRunInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *AcquisitionRunInfo) GetStartupState() StartupState {
	if x != nil {
		return x.StartupState
	}
	return StartupState_STARTUP_UNKNOWN
}

func (x *AcquisitionRunInfo) GetState() AcquisitionState {
	if x != nil {
		return x.State
	}
	return AcquisitionState_ACQUISITION_STARTING
}

func (x *AcquisitionRunInfo) GetFinishingState() FinishingState {
	if x != nil {
		return x.FinishingState
	}
	return FinishingState_FINISHING_UNKNOWN
}

func (x *AcquisitionRunInfo) GetStopReason() AcquisitionStopReason {
	if x != nil {
		return x.StopReason
	}
	return AcquisitionStopReason_STOPPED_NOT_SET
}

func (x *AcquisitionRunInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *AcquisitionRunInfo) GetDataReadStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DataReadStartTime
	}
	return nil
}

func (x *AcquisitionRunInfo) GetDataReadEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DataReadEndTime
	}
	return nil
}

func (x *AcquisitionRunInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *AcquisitionRunInfo) GetYieldSummary() *AcquisitionYieldSummary {
	if x != nil {
		return x.YieldSummary
	}
	return nil
}

func (x *AcquisitionRunInfo) GetConfigSummary() *AcquisitionConfigSummary {
	if x != nil {
		return x.ConfigSummary
	}
	return nil
}

func (x *AcquisitionRunInfo) GetWriterSummary() *AcquisitionWriterSummary {
	if x != nil {
		return x.WriterSummary
	}
	return nil
}

type ListAcquisitionRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAcquisitionRunsRequest) Reset() {
	*x = ListAcquisitionRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcquisitionRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcquisitionRunsRequest) ProtoMessage() {}

func (x *ListAcquisitionRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcquisitionRunsRequest.ProtoReflect.Descriptor instead.
func (*ListAcquisitionRunsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{16}
}

type ListAcquisitionRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunIds []string `protobuf:"bytes,1,rep,name=run_ids,json=runIds,proto3" json:"run_ids,omitempty"`
}

func (x *ListAcquisitionRunsResponse) Reset() {
	*x = ListAcquisitionRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcquisitionRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcquisitionRunsResponse) ProtoMessage() {}

func (x *ListAcquisitionRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcquisitionRunsResponse.ProtoReflect.Descriptor instead.
func (*ListAcquisitionRunsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{17}
}

func (x *ListAcquisitionRunsResponse) GetRunIds() []string {
	if x != nil {
		return x.RunIds
	}
	return nil
}

type GetCurrentAcquisitionRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentAcquisitionRunRequest) Reset() {
	*x = GetCurrentAcquisitionRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentAcquisitionRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentAcquisitionRunRequest) ProtoMessage() {}

func (x *GetCurrentAcquisitionRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentAcquisitionRunRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentAcquisitionRunRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{18}
}

type WatchCurrentAcquisitionRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchCurrentAcquisitionRunRequest) Reset() {
	*x = WatchCurrentAcquisitionRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchCurrentAcquisitionRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchCurrentAcquisitionRunRequest) ProtoMessage() {}

func (x *WatchCurrentAcquisitionRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchCurrentAcquisitionRunRequest.ProtoReflect.Descriptor instead.
func (*WatchCurrentAcquisitionRunRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{19}
}

type SetSignalReaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of signal reader to use
	Reader SetSignalReaderRequest_SignalReaderType `protobuf:"varint,1,opt,name=reader,proto3,enum=minknow_api.acquisition.SetSignalReaderRequest_SignalReaderType" json:"reader,omitempty"`
	// The following settings are optional, and only used when setting the reader to hdf5
	HdfSource             string                                `protobuf:"bytes,2,opt,name=hdf_source,json=hdfSource,proto3" json:"hdf_source,omitempty"`
	HdfMode               SetSignalReaderRequest_SourceFileMode `protobuf:"varint,3,opt,name=hdf_mode,json=hdfMode,proto3,enum=minknow_api.acquisition.SetSignalReaderRequest_SourceFileMode" json:"hdf_mode,omitempty"` // Defaults to UNSPECIFIED, since this setting is optional
	SampleRateScaleFactor float32                               `protobuf:"fixed32,4,opt,name=sample_rate_scale_factor,json=sampleRateScaleFactor,proto3" json:"sample_rate_scale_factor,omitempty"`
}

func (x *SetSignalReaderRequest) Reset() {
	*x = SetSignalReaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSignalReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSignalReaderRequest) ProtoMessage() {}

func (x *SetSignalReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSignalReaderRequest.ProtoReflect.Descriptor instead.
func (*SetSignalReaderRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{20}
}

func (x *SetSignalReaderRequest) GetReader() SetSignalReaderRequest_SignalReaderType {
	if x != nil {
		return x.Reader
	}
	return SetSignalReaderRequest_HDF5
}

func (x *SetSignalReaderRequest) GetHdfSource() string {
	if x != nil {
		return x.HdfSource
	}
	return ""
}

func (x *SetSignalReaderRequest) GetHdfMode() SetSignalReaderRequest_SourceFileMode {
	if x != nil {
		return x.HdfMode
	}
	return SetSignalReaderRequest_UNSPECIFIED
}

func (x *SetSignalReaderRequest) GetSampleRateScaleFactor() float32 {
	if x != nil {
		return x.SampleRateScaleFactor
	}
	return 0
}

type SetSignalReaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSignalReaderResponse) Reset() {
	*x = SetSignalReaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSignalReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSignalReaderResponse) ProtoMessage() {}

func (x *SetSignalReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSignalReaderResponse.ProtoReflect.Descriptor instead.
func (*SetSignalReaderResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{21}
}

type GetProgressResponse_RawPerChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of samples (per channel) acquired from the device.
	Acquired uint64 `protobuf:"varint,1,opt,name=acquired,proto3" json:"acquired,omitempty"`
	// Number of samples (per channel) passed to the analysis pipeline
	// for processing.
	//
	// This can be compared to acquired to see how far behind the analysis
	// is lagging.
	Processed uint64 `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *GetProgressResponse_RawPerChannel) Reset() {
	*x = GetProgressResponse_RawPerChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgressResponse_RawPerChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgressResponse_RawPerChannel) ProtoMessage() {}

func (x *GetProgressResponse_RawPerChannel) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgressResponse_RawPerChannel.ProtoReflect.Descriptor instead.
func (*GetProgressResponse_RawPerChannel) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetProgressResponse_RawPerChannel) GetAcquired() uint64 {
	if x != nil {
		return x.Acquired
	}
	return 0
}

func (x *GetProgressResponse_RawPerChannel) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

type ChannelStateInfo_Style struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human-readable name to display when rendering this channel state or group.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// A sentence describing the meaning of the channel state or group.
	//
	// This can be used as a tooltip, for example.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The colour to use when rendering this channel state or group.
	//
	// This is a six-digit hex string describing an RGB colour (eg: "ff00ff" for purple).
	Colour string `protobuf:"bytes,3,opt,name=colour,proto3" json:"colour,omitempty"`
}

func (x *ChannelStateInfo_Style) Reset() {
	*x = ChannelStateInfo_Style{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStateInfo_Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStateInfo_Style) ProtoMessage() {}

func (x *ChannelStateInfo_Style) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStateInfo_Style.ProtoReflect.Descriptor instead.
func (*ChannelStateInfo_Style) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ChannelStateInfo_Style) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ChannelStateInfo_Style) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChannelStateInfo_Style) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

type ChannelStateInfo_ChannelState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The numeric identifier of the state.
	//
	// This is what is reported in any other APIs that return a channel state ID.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The internal name of the state.
	//
	// This is what is reported in any other APIs that return a channel state name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// How to render the channel state in a graphical user interface.
	//
	// Note that the style may be missing from some channel states (such as the ones that are
	// built in to MinKNOW).
	Style *ChannelStateInfo_Style `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	// An order ranking for the channel states when they are ungrouped.
	//
	// This can be used to order the channel states after merging the groups.
	GlobalOrder uint32 `protobuf:"varint,4,opt,name=global_order,json=globalOrder,proto3" json:"global_order,omitempty"`
}

func (x *ChannelStateInfo_ChannelState) Reset() {
	*x = ChannelStateInfo_ChannelState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStateInfo_ChannelState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStateInfo_ChannelState) ProtoMessage() {}

func (x *ChannelStateInfo_ChannelState) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStateInfo_ChannelState.ProtoReflect.Descriptor instead.
func (*ChannelStateInfo_ChannelState) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{13, 1}
}

func (x *ChannelStateInfo_ChannelState) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelStateInfo_ChannelState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelStateInfo_ChannelState) GetStyle() *ChannelStateInfo_Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *ChannelStateInfo_ChannelState) GetGlobalOrder() uint32 {
	if x != nil {
		return x.GlobalOrder
	}
	return 0
}

type ChannelStateInfo_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// How to render the group in a graphical user interface.
	//
	// Note that the style may be missing from some groups (such as the ones that are built in
	// to MinKNOW).
	Style *ChannelStateInfo_Style `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	// The channel states contained in the group.
	//
	// The groups are ordered according to the "order" attribute of the channel state style in
	// the channel states configuration.
	States []*ChannelStateInfo_ChannelState `protobuf:"bytes,3,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *ChannelStateInfo_Group) Reset() {
	*x = ChannelStateInfo_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_acquisition_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStateInfo_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStateInfo_Group) ProtoMessage() {}

func (x *ChannelStateInfo_Group) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_acquisition_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStateInfo_Group.ProtoReflect.Descriptor instead.
func (*ChannelStateInfo_Group) Descriptor() ([]byte, []int) {
	return file_minknow_api_acquisition_proto_rawDescGZIP(), []int{13, 2}
}

func (x *ChannelStateInfo_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelStateInfo_Group) GetStyle() *ChannelStateInfo_Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *ChannelStateInfo_Group) GetStates() []*ChannelStateInfo_ChannelState {
	if x != nil {
		return x.States
	}
	return nil
}

var File_minknow_api_acquisition_proto protoreflect.FileDescriptor

var file_minknow_api_acquisition_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x04, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x6f, 0x6e,
	0x74, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64,
	0x6f, 0x6e, 0x74, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x60, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x59, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x26,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4f, 0x6e, 0x22, 0x52, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4b, 0x45, 0x45,
	0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x1b, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x5e, 0x0a, 0x1c, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x14, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x72, 0x61,
	0x77, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0d, 0x72, 0x61, 0x77, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x49,
	0x0a, 0x0d, 0x52, 0x61, 0x77, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x22, 0x94, 0x06, 0x0a, 0x17, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x62,
	0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x61, 0x77, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54,
	0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x88, 0x04, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x1a, 0x57, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x1a, 0x9c, 0x01, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0xb2, 0x01, 0x0a, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x8f, 0x08, 0x0a, 0x18, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x74, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x6d,
	0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70,
	0x5f, 0x6b, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x70,
	0x4b, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x1a,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x72, 0x65, 0x61, 0x64, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61,
	0x73, 0x74, 0x35, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x73, 0x74, 0x35, 0x52, 0x65,
	0x61, 0x64, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61,
	0x73, 0x74, 0x71, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x73, 0x74, 0x71, 0x52, 0x65,
	0x61, 0x64, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x52, 0x65, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x57, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xee, 0x06, 0x0a, 0x12, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a,
	0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0c, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x58, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x0e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x36, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x21,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x92, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x64, 0x66, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x64, 0x66, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x68,
	0x64, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x68,
	0x64, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x28, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x44, 0x46, 0x35, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x0e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x02, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0x59, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x2a, 0x0a, 0x06,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52,
	0x50, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x7b, 0x0a, 0x10, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x51,
	0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x96, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52,
	0x55, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x2a, 0x96, 0x02,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x43,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x55, 0x50, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55,
	0x50, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x32, 0x0a,
	0x2e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10,
	0x06, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53,
	0x54, 0x49, 0x43, 0x53, 0x10, 0x07, 0x2a, 0x8b, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x03, 0x32, 0xe3, 0x09, 0x0a, 0x12, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x24, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a,
	0x17, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8f,
	0x01, 0x0a, 0x1d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e,
	0x12, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01,
	0x12, 0x74, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x6e, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7f, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e,
	0x73, 0x12, 0x33, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75,
	0x6e, 0x12, 0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7b, 0x0a,
	0x11, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x42, 0x5c, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75, 0x72, 0x62, 0x61,
	0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minknow_api_acquisition_proto_rawDescOnce sync.Once
	file_minknow_api_acquisition_proto_rawDescData = file_minknow_api_acquisition_proto_rawDesc
)

func file_minknow_api_acquisition_proto_rawDescGZIP() []byte {
	file_minknow_api_acquisition_proto_rawDescOnce.Do(func() {
		file_minknow_api_acquisition_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_acquisition_proto_rawDescData)
	})
	return file_minknow_api_acquisition_proto_rawDescData
}

var file_minknow_api_acquisition_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_minknow_api_acquisition_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_minknow_api_acquisition_proto_goTypes = []interface{}{
	(MinknowStatus)(0),                           // 0: minknow_api.acquisition.MinknowStatus
	(Option)(0),                                  // 1: minknow_api.acquisition.Option
	(Purpose)(0),                                 // 2: minknow_api.acquisition.Purpose
	(AcquisitionState)(0),                        // 3: minknow_api.acquisition.AcquisitionState
	(AcquisitionStopReason)(0),                   // 4: minknow_api.acquisition.AcquisitionStopReason
	(StartupState)(0),                            // 5: minknow_api.acquisition.StartupState
	(FinishingState)(0),                          // 6: minknow_api.acquisition.FinishingState
	(StopRequest_DataAction)(0),                  // 7: minknow_api.acquisition.StopRequest.DataAction
	(SetSignalReaderRequest_SignalReaderType)(0), // 8: minknow_api.acquisition.SetSignalReaderRequest.SignalReaderType
	(SetSignalReaderRequest_SourceFileMode)(0),   // 9: minknow_api.acquisition.SetSignalReaderRequest.SourceFileMode
	(*StartRequest)(nil),                         // 10: minknow_api.acquisition.StartRequest
	(*StartResponse)(nil),                        // 11: minknow_api.acquisition.StartResponse
	(*StopRequest)(nil),                          // 12: minknow_api.acquisition.StopRequest
	(*StopResponse)(nil),                         // 13: minknow_api.acquisition.StopResponse
	(*WatchForStatusChangeRequest)(nil),          // 14: minknow_api.acquisition.WatchForStatusChangeRequest
	(*WatchForStatusChangeResponse)(nil),         // 15: minknow_api.acquisition.WatchForStatusChangeResponse
	(*CurrentStatusRequest)(nil),                 // 16: minknow_api.acquisition.CurrentStatusRequest
	(*CurrentStatusResponse)(nil),                // 17: minknow_api.acquisition.CurrentStatusResponse
	(*GetProgressRequest)(nil),                   // 18: minknow_api.acquisition.GetProgressRequest
	(*GetProgressResponse)(nil),                  // 19: minknow_api.acquisition.GetProgressResponse
	(*GetAcquisitionRunInfoRequest)(nil),         // 20: minknow_api.acquisition.GetAcquisitionRunInfoRequest
	(*AcquisitionYieldSummary)(nil),              // 21: minknow_api.acquisition.AcquisitionYieldSummary
	(*AcquisitionWriterSummary)(nil),             // 22: minknow_api.acquisition.AcquisitionWriterSummary
	(*ChannelStateInfo)(nil),                     // 23: minknow_api.acquisition.ChannelStateInfo
	(*AcquisitionConfigSummary)(nil),             // 24: minknow_api.acquisition.AcquisitionConfigSummary
	(*AcquisitionRunInfo)(nil),                   // 25: minknow_api.acquisition.AcquisitionRunInfo
	(*ListAcquisitionRunsRequest)(nil),           // 26: minknow_api.acquisition.ListAcquisitionRunsRequest
	(*ListAcquisitionRunsResponse)(nil),          // 27: minknow_api.acquisition.ListAcquisitionRunsResponse
	(*GetCurrentAcquisitionRunRequest)(nil),      // 28: minknow_api.acquisition.GetCurrentAcquisitionRunRequest
	(*WatchCurrentAcquisitionRunRequest)(nil),    // 29: minknow_api.acquisition.WatchCurrentAcquisitionRunRequest
	(*SetSignalReaderRequest)(nil),               // 30: minknow_api.acquisition.SetSignalReaderRequest
	(*SetSignalReaderResponse)(nil),              // 31: minknow_api.acquisition.SetSignalReaderResponse
	(*GetProgressResponse_RawPerChannel)(nil),    // 32: minknow_api.acquisition.GetProgressResponse.RawPerChannel
	(*ChannelStateInfo_Style)(nil),               // 33: minknow_api.acquisition.ChannelStateInfo.Style
	(*ChannelStateInfo_ChannelState)(nil),        // 34: minknow_api.acquisition.ChannelStateInfo.ChannelState
	(*ChannelStateInfo_Group)(nil),               // 35: minknow_api.acquisition.ChannelStateInfo.Group
	(*timestamppb.Timestamp)(nil),                // 36: google.protobuf.Timestamp
}
var file_minknow_api_acquisition_proto_depIdxs = []int32{
	1,  // 0: minknow_api.acquisition.StartRequest.generate_report:type_name -> minknow_api.acquisition.Option
	1,  // 1: minknow_api.acquisition.StartRequest.send_sequencing_read_metrics:type_name -> minknow_api.acquisition.Option
	1,  // 2: minknow_api.acquisition.StartRequest.send_basecalling_metrics:type_name -> minknow_api.acquisition.Option
	2,  // 3: minknow_api.acquisition.StartRequest.purpose:type_name -> minknow_api.acquisition.Purpose
	1,  // 4: minknow_api.acquisition.StartRequest.analysis:type_name -> minknow_api.acquisition.Option
	1,  // 5: minknow_api.acquisition.StartRequest.file_output:type_name -> minknow_api.acquisition.Option
	1,  // 6: minknow_api.acquisition.StartRequest.generate_final_summary:type_name -> minknow_api.acquisition.Option
	7,  // 7: minknow_api.acquisition.StopRequest.data_action_on_stop:type_name -> minknow_api.acquisition.StopRequest.DataAction
	0,  // 8: minknow_api.acquisition.WatchForStatusChangeResponse.status:type_name -> minknow_api.acquisition.MinknowStatus
	0,  // 9: minknow_api.acquisition.CurrentStatusResponse.status:type_name -> minknow_api.acquisition.MinknowStatus
	32, // 10: minknow_api.acquisition.GetProgressResponse.raw_per_channel:type_name -> minknow_api.acquisition.GetProgressResponse.RawPerChannel
	35, // 11: minknow_api.acquisition.ChannelStateInfo.groups:type_name -> minknow_api.acquisition.ChannelStateInfo.Group
	2,  // 12: minknow_api.acquisition.AcquisitionConfigSummary.purpose:type_name -> minknow_api.acquisition.Purpose
	23, // 13: minknow_api.acquisition.AcquisitionConfigSummary.channel_state_info:type_name -> minknow_api.acquisition.ChannelStateInfo
	5,  // 14: minknow_api.acquisition.AcquisitionRunInfo.startup_state:type_name -> minknow_api.acquisition.StartupState
	3,  // 15: minknow_api.acquisition.AcquisitionRunInfo.state:type_name -> minknow_api.acquisition.AcquisitionState
	6,  // 16: minknow_api.acquisition.AcquisitionRunInfo.finishing_state:type_name -> minknow_api.acquisition.FinishingState
	4,  // 17: minknow_api.acquisition.AcquisitionRunInfo.stop_reason:type_name -> minknow_api.acquisition.AcquisitionStopReason
	36, // 18: minknow_api.acquisition.AcquisitionRunInfo.start_time:type_name -> google.protobuf.Timestamp
	36, // 19: minknow_api.acquisition.AcquisitionRunInfo.data_read_start_time:type_name -> google.protobuf.Timestamp
	36, // 20: minknow_api.acquisition.AcquisitionRunInfo.data_read_end_time:type_name -> google.protobuf.Timestamp
	36, // 21: minknow_api.acquisition.AcquisitionRunInfo.end_time:type_name -> google.protobuf.Timestamp
	21, // 22: minknow_api.acquisition.AcquisitionRunInfo.yield_summary:type_name -> minknow_api.acquisition.AcquisitionYieldSummary
	24, // 23: minknow_api.acquisition.AcquisitionRunInfo.config_summary:type_name -> minknow_api.acquisition.AcquisitionConfigSummary
	22, // 24: minknow_api.acquisition.AcquisitionRunInfo.writer_summary:type_name -> minknow_api.acquisition.AcquisitionWriterSummary
	8,  // 25: minknow_api.acquisition.SetSignalReaderRequest.reader:type_name -> minknow_api.acquisition.SetSignalReaderRequest.SignalReaderType
	9,  // 26: minknow_api.acquisition.SetSignalReaderRequest.hdf_mode:type_name -> minknow_api.acquisition.SetSignalReaderRequest.SourceFileMode
	33, // 27: minknow_api.acquisition.ChannelStateInfo.ChannelState.style:type_name -> minknow_api.acquisition.ChannelStateInfo.Style
	33, // 28: minknow_api.acquisition.ChannelStateInfo.Group.style:type_name -> minknow_api.acquisition.ChannelStateInfo.Style
	34, // 29: minknow_api.acquisition.ChannelStateInfo.Group.states:type_name -> minknow_api.acquisition.ChannelStateInfo.ChannelState
	10, // 30: minknow_api.acquisition.AcquisitionService.start:input_type -> minknow_api.acquisition.StartRequest
	12, // 31: minknow_api.acquisition.AcquisitionService.stop:input_type -> minknow_api.acquisition.StopRequest
	14, // 32: minknow_api.acquisition.AcquisitionService.watch_for_status_change:input_type -> minknow_api.acquisition.WatchForStatusChangeRequest
	29, // 33: minknow_api.acquisition.AcquisitionService.watch_current_acquisition_run:input_type -> minknow_api.acquisition.WatchCurrentAcquisitionRunRequest
	16, // 34: minknow_api.acquisition.AcquisitionService.current_status:input_type -> minknow_api.acquisition.CurrentStatusRequest
	18, // 35: minknow_api.acquisition.AcquisitionService.get_progress:input_type -> minknow_api.acquisition.GetProgressRequest
	20, // 36: minknow_api.acquisition.AcquisitionService.get_acquisition_info:input_type -> minknow_api.acquisition.GetAcquisitionRunInfoRequest
	26, // 37: minknow_api.acquisition.AcquisitionService.list_acquisition_runs:input_type -> minknow_api.acquisition.ListAcquisitionRunsRequest
	28, // 38: minknow_api.acquisition.AcquisitionService.get_current_acquisition_run:input_type -> minknow_api.acquisition.GetCurrentAcquisitionRunRequest
	30, // 39: minknow_api.acquisition.AcquisitionService.set_signal_reader:input_type -> minknow_api.acquisition.SetSignalReaderRequest
	11, // 40: minknow_api.acquisition.AcquisitionService.start:output_type -> minknow_api.acquisition.StartResponse
	13, // 41: minknow_api.acquisition.AcquisitionService.stop:output_type -> minknow_api.acquisition.StopResponse
	15, // 42: minknow_api.acquisition.AcquisitionService.watch_for_status_change:output_type -> minknow_api.acquisition.WatchForStatusChangeResponse
	25, // 43: minknow_api.acquisition.AcquisitionService.watch_current_acquisition_run:output_type -> minknow_api.acquisition.AcquisitionRunInfo
	17, // 44: minknow_api.acquisition.AcquisitionService.current_status:output_type -> minknow_api.acquisition.CurrentStatusResponse
	19, // 45: minknow_api.acquisition.AcquisitionService.get_progress:output_type -> minknow_api.acquisition.GetProgressResponse
	25, // 46: minknow_api.acquisition.AcquisitionService.get_acquisition_info:output_type -> minknow_api.acquisition.AcquisitionRunInfo
	27, // 47: minknow_api.acquisition.AcquisitionService.list_acquisition_runs:output_type -> minknow_api.acquisition.ListAcquisitionRunsResponse
	25, // 48: minknow_api.acquisition.AcquisitionService.get_current_acquisition_run:output_type -> minknow_api.acquisition.AcquisitionRunInfo
	31, // 49: minknow_api.acquisition.AcquisitionService.set_signal_reader:output_type -> minknow_api.acquisition.SetSignalReaderResponse
	40, // [40:50] is the sub-list for method output_type
	30, // [30:40] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_minknow_api_acquisition_proto_init() }
func file_minknow_api_acquisition_proto_init() {
	if File_minknow_api_acquisition_proto != nil {
		return
	}
	file_minknow_api_rpc_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_acquisition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchForStatusChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchForStatusChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAcquisitionRunInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionYieldSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionWriterSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionConfigSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionRunInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcquisitionRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcquisitionRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentAcquisitionRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchCurrentAcquisitionRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSignalReaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSignalReaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgressResponse_RawPerChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStateInfo_Style); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStateInfo_ChannelState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_acquisition_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStateInfo_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_acquisition_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_acquisition_proto_goTypes,
		DependencyIndexes: file_minknow_api_acquisition_proto_depIdxs,
		EnumInfos:         file_minknow_api_acquisition_proto_enumTypes,
		MessageInfos:      file_minknow_api_acquisition_proto_msgTypes,
	}.Build()
	File_minknow_api_acquisition_proto = out.File
	file_minknow_api_acquisition_proto_rawDesc = nil
	file_minknow_api_acquisition_proto_goTypes = nil
	file_minknow_api_acquisition_proto_depIdxs = nil
}
