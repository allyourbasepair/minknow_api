// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minknow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	// Get a stream of user messages, updated with new messages as the are emitted in minknow.
	//
	// Since 1.11
	GetUserMessages(ctx context.Context, in *GetUserMessagesRequest, opts ...grpc.CallOption) (LogService_GetUserMessagesClient, error)
	// Send a log message to any listeners of messages (see get_user_messages)
	//
	// Any historical user messages are first sent to the caller,
	//
	// Since 1.11
	SendUserMessage(ctx context.Context, in *SendUserMessageRequest, opts ...grpc.CallOption) (*SendUserMessageResponse, error)
	// Send a ping to the configured ping server (see system config for ping server url)
	//
	// The tracking_id and context_data section of the ping are filled in automatically by MinKNOW.
	//
	// The ping is queued internally for sending immediately, if MinKNOW fails to send the message it
	// stores the message to send when possible.
	//
	// Since 1.11
	SendPing(ctx context.Context, in *SendPingRequest, opts ...grpc.CallOption) (*SendPingResponse, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) GetUserMessages(ctx context.Context, in *GetUserMessagesRequest, opts ...grpc.CallOption) (LogService_GetUserMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], "/minknow_api.log.LogService/get_user_messages", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceGetUserMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_GetUserMessagesClient interface {
	Recv() (*UserMessage, error)
	grpc.ClientStream
}

type logServiceGetUserMessagesClient struct {
	grpc.ClientStream
}

func (x *logServiceGetUserMessagesClient) Recv() (*UserMessage, error) {
	m := new(UserMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) SendUserMessage(ctx context.Context, in *SendUserMessageRequest, opts ...grpc.CallOption) (*SendUserMessageResponse, error) {
	out := new(SendUserMessageResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.log.LogService/send_user_message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SendPing(ctx context.Context, in *SendPingRequest, opts ...grpc.CallOption) (*SendPingResponse, error) {
	out := new(SendPingResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.log.LogService/send_ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	// Get a stream of user messages, updated with new messages as the are emitted in minknow.
	//
	// Since 1.11
	GetUserMessages(*GetUserMessagesRequest, LogService_GetUserMessagesServer) error
	// Send a log message to any listeners of messages (see get_user_messages)
	//
	// Any historical user messages are first sent to the caller,
	//
	// Since 1.11
	SendUserMessage(context.Context, *SendUserMessageRequest) (*SendUserMessageResponse, error)
	// Send a ping to the configured ping server (see system config for ping server url)
	//
	// The tracking_id and context_data section of the ping are filled in automatically by MinKNOW.
	//
	// The ping is queued internally for sending immediately, if MinKNOW fails to send the message it
	// stores the message to send when possible.
	//
	// Since 1.11
	SendPing(context.Context, *SendPingRequest) (*SendPingResponse, error)
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) GetUserMessages(*GetUserMessagesRequest, LogService_GetUserMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserMessages not implemented")
}
func (UnimplementedLogServiceServer) SendUserMessage(context.Context, *SendUserMessageRequest) (*SendUserMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserMessage not implemented")
}
func (UnimplementedLogServiceServer) SendPing(context.Context, *SendPingRequest) (*SendPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPing not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_GetUserMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).GetUserMessages(m, &logServiceGetUserMessagesServer{stream})
}

type LogService_GetUserMessagesServer interface {
	Send(*UserMessage) error
	grpc.ServerStream
}

type logServiceGetUserMessagesServer struct {
	grpc.ServerStream
}

func (x *logServiceGetUserMessagesServer) Send(m *UserMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _LogService_SendUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SendUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.log.LogService/send_user_message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SendUserMessage(ctx, req.(*SendUserMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_SendPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SendPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.log.LogService/send_ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SendPing(ctx, req.(*SendPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minknow_api.log.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send_user_message",
			Handler:    _LogService_SendUserMessage_Handler,
		},
		{
			MethodName: "send_ping",
			Handler:    _LogService_SendPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get_user_messages",
			Handler:       _LogService_GetUserMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow_api/log.proto",
}
