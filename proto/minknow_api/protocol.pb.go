// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/protocol.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolState int32

const (
	// The protocol is still running.
	ProtocolState_PROTOCOL_RUNNING ProtocolState = 0
	// The protocol is waiting for the device to reach temperature
	//
	// Since 1.15
	ProtocolState_PROTOCOL_WAITING_FOR_TEMPERATURE ProtocolState = 4
	// Occurs when data protocol has stopped (either from a explicit rpc request or the script naturally ended)
	// and data is still being processed (albacore is still in catchup and processing reads).
	ProtocolState_PROTOCOL_WAITING_FOR_ACQUISITION ProtocolState = 5
	// The protocol finished on its own and did not report an error.
	//
	// This is determined by the protocol process exiting with a zero exit code.
	ProtocolState_PROTOCOL_COMPLETED ProtocolState = 1
	// The protocol was terminated by the user.
	ProtocolState_PROTOCOL_STOPPED_BY_USER ProtocolState = 2
	// The protocol finished on its own and reported an error.
	//
	// This is determined by the protocol process exiting with a non-zero exit code or because of a
	// signal. Often, this will be because an exception was raised in the Python code and not
	// caught, but could also indicate that the Python process crashed or was killed by some
	// mechanism other than by MinKNOW.
	ProtocolState_PROTOCOL_FINISHED_WITH_ERROR ProtocolState = 3
	// The protocol was terminated because the sequencing device encountered an error.
	ProtocolState_PROTOCOL_FINISHED_WITH_DEVICE_ERROR ProtocolState = 6
	// The protocol was terminated because MinKNOW could not send telemetry to start acquisition.
	ProtocolState_PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY ProtocolState = 7
)

// Enum value maps for ProtocolState.
var (
	ProtocolState_name = map[int32]string{
		0: "PROTOCOL_RUNNING",
		4: "PROTOCOL_WAITING_FOR_TEMPERATURE",
		5: "PROTOCOL_WAITING_FOR_ACQUISITION",
		1: "PROTOCOL_COMPLETED",
		2: "PROTOCOL_STOPPED_BY_USER",
		3: "PROTOCOL_FINISHED_WITH_ERROR",
		6: "PROTOCOL_FINISHED_WITH_DEVICE_ERROR",
		7: "PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY",
	}
	ProtocolState_value = map[string]int32{
		"PROTOCOL_RUNNING":                           0,
		"PROTOCOL_WAITING_FOR_TEMPERATURE":           4,
		"PROTOCOL_WAITING_FOR_ACQUISITION":           5,
		"PROTOCOL_COMPLETED":                         1,
		"PROTOCOL_STOPPED_BY_USER":                   2,
		"PROTOCOL_FINISHED_WITH_ERROR":               3,
		"PROTOCOL_FINISHED_WITH_DEVICE_ERROR":        6,
		"PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY": 7,
	}
)

func (x ProtocolState) Enum() *ProtocolState {
	p := new(ProtocolState)
	*p = x
	return p
}

func (x ProtocolState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolState) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_protocol_proto_enumTypes[0].Descriptor()
}

func (ProtocolState) Type() protoreflect.EnumType {
	return &file_minknow_api_protocol_proto_enumTypes[0]
}

func (x ProtocolState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolState.Descriptor instead.
func (ProtocolState) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{0}
}

type BarcodeUserData_SampleType int32

const (
	// The barcode sample is a real sample being tested.
	BarcodeUserData_test_sample BarcodeUserData_SampleType = 0
	// The barcode sample is a control which is expected to result in positive identification.
	BarcodeUserData_positive_control BarcodeUserData_SampleType = 1
	// The barcode sample is a control which is expected to result in negative identification.
	BarcodeUserData_negative_control BarcodeUserData_SampleType = 2
	// Indended to show that a result has not occured due to contamination.
	BarcodeUserData_no_template_control BarcodeUserData_SampleType = 3
	// Separate positive controls for when kits expect 2.
	BarcodeUserData_positive_control_1 BarcodeUserData_SampleType = 4
	// Separate positive controls for when kits expect 2.
	BarcodeUserData_positive_control_2 BarcodeUserData_SampleType = 5
)

// Enum value maps for BarcodeUserData_SampleType.
var (
	BarcodeUserData_SampleType_name = map[int32]string{
		0: "test_sample",
		1: "positive_control",
		2: "negative_control",
		3: "no_template_control",
		4: "positive_control_1",
		5: "positive_control_2",
	}
	BarcodeUserData_SampleType_value = map[string]int32{
		"test_sample":         0,
		"positive_control":    1,
		"negative_control":    2,
		"no_template_control": 3,
		"positive_control_1":  4,
		"positive_control_2":  5,
	}
)

func (x BarcodeUserData_SampleType) Enum() *BarcodeUserData_SampleType {
	p := new(BarcodeUserData_SampleType)
	*p = x
	return p
}

func (x BarcodeUserData_SampleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarcodeUserData_SampleType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_protocol_proto_enumTypes[1].Descriptor()
}

func (BarcodeUserData_SampleType) Type() protoreflect.EnumType {
	return &file_minknow_api_protocol_proto_enumTypes[1]
}

func (x BarcodeUserData_SampleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BarcodeUserData_SampleType.Descriptor instead.
func (BarcodeUserData_SampleType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{0, 0}
}

type WaitForFinishedRequest_NotificationState int32

const (
	// Request return just after the protocol has temrinated, including any acquisition periods completing.
	WaitForFinishedRequest_NOTIFY_ON_TERMINATION WaitForFinishedRequest_NotificationState = 0
	// Request return prior to the script being termiated.
	// note: will try to return 5s before killing the protocol script.
	WaitForFinishedRequest_NOTIFY_BEFORE_TERMINATION WaitForFinishedRequest_NotificationState = 1
	// Notify as the protocol script finishes, not waiting for any in progress acquisition to complete.
	WaitForFinishedRequest_NOTIFY_ON_SCRIPT_TERMINATION WaitForFinishedRequest_NotificationState = 2
)

// Enum value maps for WaitForFinishedRequest_NotificationState.
var (
	WaitForFinishedRequest_NotificationState_name = map[int32]string{
		0: "NOTIFY_ON_TERMINATION",
		1: "NOTIFY_BEFORE_TERMINATION",
		2: "NOTIFY_ON_SCRIPT_TERMINATION",
	}
	WaitForFinishedRequest_NotificationState_value = map[string]int32{
		"NOTIFY_ON_TERMINATION":        0,
		"NOTIFY_BEFORE_TERMINATION":    1,
		"NOTIFY_ON_SCRIPT_TERMINATION": 2,
	}
)

func (x WaitForFinishedRequest_NotificationState) Enum() *WaitForFinishedRequest_NotificationState {
	p := new(WaitForFinishedRequest_NotificationState)
	*p = x
	return p
}

func (x WaitForFinishedRequest_NotificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitForFinishedRequest_NotificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_protocol_proto_enumTypes[2].Descriptor()
}

func (WaitForFinishedRequest_NotificationState) Type() protoreflect.EnumType {
	return &file_minknow_api_protocol_proto_enumTypes[2]
}

func (x WaitForFinishedRequest_NotificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitForFinishedRequest_NotificationState.Descriptor instead.
func (WaitForFinishedRequest_NotificationState) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{9, 0}
}

type ProtocolIdentifierComponents_Location int32

const (
	ProtocolIdentifierComponents_ANY            ProtocolIdentifierComponents_Location = 0
	ProtocolIdentifierComponents_SYSTEM_SCRIPTS ProtocolIdentifierComponents_Location = 1
	ProtocolIdentifierComponents_USER_SCRIPTS   ProtocolIdentifierComponents_Location = 2
)

// Enum value maps for ProtocolIdentifierComponents_Location.
var (
	ProtocolIdentifierComponents_Location_name = map[int32]string{
		0: "ANY",
		1: "SYSTEM_SCRIPTS",
		2: "USER_SCRIPTS",
	}
	ProtocolIdentifierComponents_Location_value = map[string]int32{
		"ANY":            0,
		"SYSTEM_SCRIPTS": 1,
		"USER_SCRIPTS":   2,
	}
)

func (x ProtocolIdentifierComponents_Location) Enum() *ProtocolIdentifierComponents_Location {
	p := new(ProtocolIdentifierComponents_Location)
	*p = x
	return p
}

func (x ProtocolIdentifierComponents_Location) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolIdentifierComponents_Location) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_protocol_proto_enumTypes[3].Descriptor()
}

func (ProtocolIdentifierComponents_Location) Type() protoreflect.EnumType {
	return &file_minknow_api_protocol_proto_enumTypes[3]
}

func (x ProtocolIdentifierComponents_Location) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolIdentifierComponents_Location.Descriptor instead.
func (ProtocolIdentifierComponents_Location) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{34, 0}
}

type ProtocolSetting_Category int32

const (
	ProtocolSetting_OTHER       ProtocolSetting_Category = 0
	ProtocolSetting_RUN_OPTIONS ProtocolSetting_Category = 1
	ProtocolSetting_BASECALLING ProtocolSetting_Category = 2
	ProtocolSetting_OUTPUT      ProtocolSetting_Category = 3
)

// Enum value maps for ProtocolSetting_Category.
var (
	ProtocolSetting_Category_name = map[int32]string{
		0: "OTHER",
		1: "RUN_OPTIONS",
		2: "BASECALLING",
		3: "OUTPUT",
	}
	ProtocolSetting_Category_value = map[string]int32{
		"OTHER":       0,
		"RUN_OPTIONS": 1,
		"BASECALLING": 2,
		"OUTPUT":      3,
	}
)

func (x ProtocolSetting_Category) Enum() *ProtocolSetting_Category {
	p := new(ProtocolSetting_Category)
	*p = x
	return p
}

func (x ProtocolSetting_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolSetting_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_protocol_proto_enumTypes[4].Descriptor()
}

func (ProtocolSetting_Category) Type() protoreflect.EnumType {
	return &file_minknow_api_protocol_proto_enumTypes[4]
}

func (x ProtocolSetting_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolSetting_Category.Descriptor instead.
func (ProtocolSetting_Category) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{36, 0}
}

type ProtocolSetting_Unit int32

const (
	ProtocolSetting_UNITLESS ProtocolSetting_Unit = 0
	// strings
	ProtocolSetting_UTF8_STRING    ProtocolSetting_Unit = 1
	ProtocolSetting_ASCII_STRING   ProtocolSetting_Unit = 2
	ProtocolSetting_PATH           ProtocolSetting_Unit = 3
	ProtocolSetting_URL            ProtocolSetting_Unit = 4
	ProtocolSetting_PRIVATE_STRING ProtocolSetting_Unit = 5 // eg: password, or identifying data, something that should be obscured on the screen
	ProtocolSetting_CHOICE         ProtocolSetting_Unit = 6 // choose one of the strings described in choices
	ProtocolSetting_MULTI_CHOICE   ProtocolSetting_Unit = 7 // choose any number of the strings described in choices.
	// numbers
	ProtocolSetting_SECOND    ProtocolSetting_Unit = 8
	ProtocolSetting_HOUR      ProtocolSetting_Unit = 9
	ProtocolSetting_BASE      ProtocolSetting_Unit = 10
	ProtocolSetting_KBASE     ProtocolSetting_Unit = 11
	ProtocolSetting_MBASE     ProtocolSetting_Unit = 12
	ProtocolSetting_GBASE     ProtocolSetting_Unit = 13
	ProtocolSetting_MILLIVOLT ProtocolSetting_Unit = 14
)

// Enum value maps for ProtocolSetting_Unit.
var (
	ProtocolSetting_Unit_name = map[int32]string{
		0:  "UNITLESS",
		1:  "UTF8_STRING",
		2:  "ASCII_STRING",
		3:  "PATH",
		4:  "URL",
		5:  "PRIVATE_STRING",
		6:  "CHOICE",
		7:  "MULTI_CHOICE",
		8:  "SECOND",
		9:  "HOUR",
		10: "BASE",
		11: "KBASE",
		12: "MBASE",
		13: "GBASE",
		14: "MILLIVOLT",
	}
	ProtocolSetting_Unit_value = map[string]int32{
		"UNITLESS":       0,
		"UTF8_STRING":    1,
		"ASCII_STRING":   2,
		"PATH":           3,
		"URL":            4,
		"PRIVATE_STRING": 5,
		"CHOICE":         6,
		"MULTI_CHOICE":   7,
		"SECOND":         8,
		"HOUR":           9,
		"BASE":           10,
		"KBASE":          11,
		"MBASE":          12,
		"GBASE":          13,
		"MILLIVOLT":      14,
	}
)

func (x ProtocolSetting_Unit) Enum() *ProtocolSetting_Unit {
	p := new(ProtocolSetting_Unit)
	*p = x
	return p
}

func (x ProtocolSetting_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolSetting_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_protocol_proto_enumTypes[5].Descriptor()
}

func (ProtocolSetting_Unit) Type() protoreflect.EnumType {
	return &file_minknow_api_protocol_proto_enumTypes[5]
}

func (x ProtocolSetting_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolSetting_Unit.Descriptor instead.
func (ProtocolSetting_Unit) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{36, 1}
}

type ProtocolSetting_Visibility int32

const (
	// User can change this, a default may be provided
	ProtocolSetting_EDITABLE ProtocolSetting_Visibility = 0
	// Don't show this to the user, it's not relevant to this protocol
	ProtocolSetting_HIDDEN ProtocolSetting_Visibility = 1
	// User shouldn't change this from the default
	ProtocolSetting_FIXED ProtocolSetting_Visibility = 2
	// User must set this, no sensible default can be provided
	ProtocolSetting_REQUIRED ProtocolSetting_Visibility = 3
)

// Enum value maps for ProtocolSetting_Visibility.
var (
	ProtocolSetting_Visibility_name = map[int32]string{
		0: "EDITABLE",
		1: "HIDDEN",
		2: "FIXED",
		3: "REQUIRED",
	}
	ProtocolSetting_Visibility_value = map[string]int32{
		"EDITABLE": 0,
		"HIDDEN":   1,
		"FIXED":    2,
		"REQUIRED": 3,
	}
)

func (x ProtocolSetting_Visibility) Enum() *ProtocolSetting_Visibility {
	p := new(ProtocolSetting_Visibility)
	*p = x
	return p
}

func (x ProtocolSetting_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolSetting_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_protocol_proto_enumTypes[6].Descriptor()
}

func (ProtocolSetting_Visibility) Type() protoreflect.EnumType {
	return &file_minknow_api_protocol_proto_enumTypes[6]
}

func (x ProtocolSetting_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolSetting_Visibility.Descriptor instead.
func (ProtocolSetting_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{36, 2}
}

type ProtocolSetting_Constraint_Condition int32

const (
	ProtocolSetting_Constraint_EQUAL       ProtocolSetting_Constraint_Condition = 0
	ProtocolSetting_Constraint_NOT_EQUAL   ProtocolSetting_Constraint_Condition = 1
	ProtocolSetting_Constraint_GT_EQ       ProtocolSetting_Constraint_Condition = 2
	ProtocolSetting_Constraint_GT          ProtocolSetting_Constraint_Condition = 3
	ProtocolSetting_Constraint_LT_EQ       ProtocolSetting_Constraint_Condition = 4
	ProtocolSetting_Constraint_LT          ProtocolSetting_Constraint_Condition = 5
	ProtocolSetting_Constraint_IN          ProtocolSetting_Constraint_Condition = 6 // When setting a path, it should be in or under the constraining path
	ProtocolSetting_Constraint_NOT_IN      ProtocolSetting_Constraint_Condition = 7 // Forbidden directory for a path
	ProtocolSetting_Constraint_ENDS_WITH   ProtocolSetting_Constraint_Condition = 8
	ProtocolSetting_Constraint_STARTS_WITH ProtocolSetting_Constraint_Condition = 9
)

// Enum value maps for ProtocolSetting_Constraint_Condition.
var (
	ProtocolSetting_Constraint_Condition_name = map[int32]string{
		0: "EQUAL",
		1: "NOT_EQUAL",
		2: "GT_EQ",
		3: "GT",
		4: "LT_EQ",
		5: "LT",
		6: "IN",
		7: "NOT_IN",
		8: "ENDS_WITH",
		9: "STARTS_WITH",
	}
	ProtocolSetting_Constraint_Condition_value = map[string]int32{
		"EQUAL":       0,
		"NOT_EQUAL":   1,
		"GT_EQ":       2,
		"GT":          3,
		"LT_EQ":       4,
		"LT":          5,
		"IN":          6,
		"NOT_IN":      7,
		"ENDS_WITH":   8,
		"STARTS_WITH": 9,
	}
)

func (x ProtocolSetting_Constraint_Condition) Enum() *ProtocolSetting_Constraint_Condition {
	p := new(ProtocolSetting_Constraint_Condition)
	*p = x
	return p
}

func (x ProtocolSetting_Constraint_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolSetting_Constraint_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_protocol_proto_enumTypes[7].Descriptor()
}

func (ProtocolSetting_Constraint_Condition) Type() protoreflect.EnumType {
	return &file_minknow_api_protocol_proto_enumTypes[7]
}

func (x ProtocolSetting_Constraint_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolSetting_Constraint_Condition.Descriptor instead.
func (ProtocolSetting_Constraint_Condition) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{36, 1, 0}
}

type BarcodeUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Barcode name the user data applies to, eg: "barcode02"
	BarcodeName string `protobuf:"bytes,1,opt,name=barcode_name,json=barcodeName,proto3" json:"barcode_name,omitempty"`
	// Lamp barcode id the user data applies to, eg: "FIP04"
	LampBarcodeId string `protobuf:"bytes,2,opt,name=lamp_barcode_id,json=lampBarcodeId,proto3" json:"lamp_barcode_id,omitempty"`
	// User defined string alias for the barcode.
	Alias string `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	// Sample type grouping for the barcode.
	Type BarcodeUserData_SampleType `protobuf:"varint,4,opt,name=type,proto3,enum=minknow_api.protocol.BarcodeUserData_SampleType" json:"type,omitempty"`
}

func (x *BarcodeUserData) Reset() {
	*x = BarcodeUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarcodeUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarcodeUserData) ProtoMessage() {}

func (x *BarcodeUserData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarcodeUserData.ProtoReflect.Descriptor instead.
func (*BarcodeUserData) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *BarcodeUserData) GetBarcodeName() string {
	if x != nil {
		return x.BarcodeName
	}
	return ""
}

func (x *BarcodeUserData) GetLampBarcodeId() string {
	if x != nil {
		return x.LampBarcodeId
	}
	return ""
}

func (x *BarcodeUserData) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *BarcodeUserData) GetType() BarcodeUserData_SampleType {
	if x != nil {
		return x.Type
	}
	return BarcodeUserData_test_sample
}

type ProtocolRunUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The group which the experiment should be held in.
	//
	// note: This value could be unset if a user did not specify a group_id when starting the protocol.
	ProtocolGroupId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=protocol_group_id,json=protocolGroupId,proto3" json:"protocol_group_id,omitempty"`
	// sample_id created by the user
	SampleId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	// User supplied info for barcodes
	BarcodeUserInfo []*BarcodeUserData `protobuf:"bytes,3,rep,name=barcode_user_info,json=barcodeUserInfo,proto3" json:"barcode_user_info,omitempty"`
}

func (x *ProtocolRunUserInfo) Reset() {
	*x = ProtocolRunUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolRunUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolRunUserInfo) ProtoMessage() {}

func (x *ProtocolRunUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolRunUserInfo.ProtoReflect.Descriptor instead.
func (*ProtocolRunUserInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolRunUserInfo) GetProtocolGroupId() *wrapperspb.StringValue {
	if x != nil {
		return x.ProtocolGroupId
	}
	return nil
}

func (x *ProtocolRunUserInfo) GetSampleId() *wrapperspb.StringValue {
	if x != nil {
		return x.SampleId
	}
	return nil
}

func (x *ProtocolRunUserInfo) GetBarcodeUserInfo() []*BarcodeUserData {
	if x != nil {
		return x.BarcodeUserInfo
	}
	return nil
}

type StartProtocolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the protocol, as provided by list_protocols().
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The arguments to pass to the protocol.
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// User input describing the protocol.
	UserInfo *ProtocolRunUserInfo `protobuf:"bytes,3,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *StartProtocolRequest) Reset() {
	*x = StartProtocolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProtocolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProtocolRequest) ProtoMessage() {}

func (x *StartProtocolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProtocolRequest.ProtoReflect.Descriptor instead.
func (*StartProtocolRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *StartProtocolRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *StartProtocolRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *StartProtocolRequest) GetUserInfo() *ProtocolRunUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type StartProtocolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID generated when the protocol is started, to uniquely represent this protocol instance
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *StartProtocolResponse) Reset() {
	*x = StartProtocolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProtocolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProtocolResponse) ProtoMessage() {}

func (x *StartProtocolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProtocolResponse.ProtoReflect.Descriptor instead.
func (*StartProtocolResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *StartProtocolResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type StopProtocolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify how any running acquisition should
	// be handled when stopping the protocol.
	//
	// Protocol state will enter PROTOCOL_WAITING_FOR_ACQUISITION whilst any running
	// acquisition is finished.
	//
	// If a script ends on its own any analysis that was started is stopped, and it
	// is allowed to catchup. If the caller wants to end catchup they can call stop_protocol
	// to end catchup.
	//
	// Since 1.15
	DataActionOnStop StopRequest_DataAction `protobuf:"varint,1,opt,name=data_action_on_stop,json=dataActionOnStop,proto3,enum=minknow_api.acquisition.StopRequest_DataAction" json:"data_action_on_stop,omitempty"`
}

func (x *StopProtocolRequest) Reset() {
	*x = StopProtocolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProtocolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProtocolRequest) ProtoMessage() {}

func (x *StopProtocolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProtocolRequest.ProtoReflect.Descriptor instead.
func (*StopProtocolRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *StopProtocolRequest) GetDataActionOnStop() StopRequest_DataAction {
	if x != nil {
		return x.DataActionOnStop
	}
	return StopRequest_STOP_DEFAULT
}

type StopProtocolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopProtocolResponse) Reset() {
	*x = StopProtocolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProtocolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProtocolResponse) ProtoMessage() {}

func (x *StopProtocolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProtocolResponse.ProtoReflect.Descriptor instead.
func (*StopProtocolResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{5}
}

type ListProtocolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If this is false, then will try to use the cached value of the protocol list where possible
	// (still subject to changes in flow cell).
	// If this is true, then will force a reload of the protocol list
	//
	// Defaults to false
	ForceReload bool `protobuf:"varint,1,opt,name=force_reload,json=forceReload,proto3" json:"force_reload,omitempty"`
}

func (x *ListProtocolsRequest) Reset() {
	*x = ListProtocolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolsRequest) ProtoMessage() {}

func (x *ListProtocolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolsRequest.ProtoReflect.Descriptor instead.
func (*ListProtocolsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *ListProtocolsRequest) GetForceReload() bool {
	if x != nil {
		return x.ForceReload
	}
	return false
}

type ProtocolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier          string                            `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Tags                map[string]*ProtocolInfo_TagValue `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name                string                            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TagExtractionResult *ProtocolInfo_TagExtractionResult `protobuf:"bytes,4,opt,name=tag_extraction_result,json=tagExtractionResult,proto3" json:"tag_extraction_result,omitempty"`
}

func (x *ProtocolInfo) Reset() {
	*x = ProtocolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfo) ProtoMessage() {}

func (x *ProtocolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfo.ProtoReflect.Descriptor instead.
func (*ProtocolInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *ProtocolInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ProtocolInfo) GetTags() map[string]*ProtocolInfo_TagValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProtocolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolInfo) GetTagExtractionResult() *ProtocolInfo_TagExtractionResult {
	if x != nil {
		return x.TagExtractionResult
	}
	return nil
}

type ListProtocolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocols []*ProtocolInfo `protobuf:"bytes,1,rep,name=protocols,proto3" json:"protocols,omitempty"`
}

func (x *ListProtocolsResponse) Reset() {
	*x = ListProtocolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolsResponse) ProtoMessage() {}

func (x *ListProtocolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolsResponse.ProtoReflect.Descriptor instead.
func (*ListProtocolsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *ListProtocolsResponse) GetProtocols() []*ProtocolInfo {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type WaitForFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only consider a specific protocol run.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Control what to wait for.
	//
	// Specifying NOTIFY_BEFORE_TERMINATION allows a caller to be notified the script will be ended _soon_,
	// and do final work to end cleanly.
	//
	// Since 1.11
	State WaitForFinishedRequest_NotificationState `protobuf:"varint,2,opt,name=state,proto3,enum=minknow_api.protocol.WaitForFinishedRequest_NotificationState" json:"state,omitempty"`
	// Timeout to wait for finished, if the timeout expires before the protocol is complete (in the state requested)
	// then the response returns.
	//
	// By default the timeout will wait forever.
	//
	// Since 1.15
	Timeout float32 `protobuf:"fixed32,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *WaitForFinishedRequest) Reset() {
	*x = WaitForFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForFinishedRequest) ProtoMessage() {}

func (x *WaitForFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForFinishedRequest.ProtoReflect.Descriptor instead.
func (*WaitForFinishedRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *WaitForFinishedRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WaitForFinishedRequest) GetState() WaitForFinishedRequest_NotificationState {
	if x != nil {
		return x.State
	}
	return WaitForFinishedRequest_NOTIFY_ON_TERMINATION
}

func (x *WaitForFinishedRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type GetRunInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The protocol run to get information about.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *GetRunInfoRequest) Reset() {
	*x = GetRunInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunInfoRequest) ProtoMessage() {}

func (x *GetRunInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRunInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *GetRunInfoRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type Epi2MeWorkflowReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for a workflow ( unique to a specific instance of epi2me )
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL that links to the workflow report. Syntax for a local workflow: file:// otherwise: http(s)://
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Epi2MeWorkflowReference) Reset() {
	*x = Epi2MeWorkflowReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epi2MeWorkflowReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epi2MeWorkflowReference) ProtoMessage() {}

func (x *Epi2MeWorkflowReference) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epi2MeWorkflowReference.ProtoReflect.Descriptor instead.
func (*Epi2MeWorkflowReference) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *Epi2MeWorkflowReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Epi2MeWorkflowReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ProtocolRunInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier assigned to this run.
	//
	// This is guaranteed to be made of ASCII characters, and at most 40 characters. It is globally
	// unique across all protocols runs on all MinKNOW instances.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The identifier of the protocol, as passed to start_protocol().
	ProtocolId string `protobuf:"bytes,2,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// The arguments passed to start_protocol().
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Output location for protocol data (eg. reads).
	//
	// Since 1.16.
	OutputPath string `protobuf:"bytes,11,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	// Indicates the current state of the protocol run.
	State ProtocolState `protobuf:"varint,4,opt,name=state,proto3,enum=minknow_api.protocol.ProtocolState" json:"state,omitempty"`
	// When the protocol was started (UTC).
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// When the protocol script terminated (UTC).
	//
	// Unset if the protocol script is still running.
	//
	// Note that the protocol may still run until final acquisiton completes.
	ScriptEndTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=script_end_time,json=scriptEndTime,proto3" json:"script_end_time,omitempty"`
	// When the protocol terminated (UTC), indicating both the
	// protocol script and the final acquisition were completed.
	//
	// Unset if the protocol is still running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// A list of acquisition periods started whilst this protocol was running.
	//
	AcquisitionRunIds []string `protobuf:"bytes,7,rep,name=acquisition_run_ids,json=acquisitionRunIds,proto3" json:"acquisition_run_ids,omitempty"`
	// User specified information associated with the protocol at start time.
	//
	// Since 1.11.
	UserInfo *ProtocolRunUserInfo `protobuf:"bytes,8,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	// List of workflows from epi2me associated with this protocol
	//
	// Since 1.15.
	Epi2MeWorkflows []*Epi2MeWorkflowReference `protobuf:"bytes,10,rep,name=epi2me_workflows,json=epi2meWorkflows,proto3" json:"epi2me_workflows,omitempty"`
	// Information about the device a protocol was started with
	//
	// Since 3.4
	Device *GetDeviceInfoResponse `protobuf:"bytes,12,opt,name=device,proto3" json:"device,omitempty"`
	// Information about the flow cell a protocol was started with
	//
	// Since 3.4
	FlowCell *GetFlowCellInfoResponse `protobuf:"bytes,13,opt,name=flow_cell,json=flowCell,proto3" json:"flow_cell,omitempty"`
	// Meta-info about the protocol
	//
	// Since 3.8
	MetaInfo *ProtocolInfo `protobuf:"bytes,14,opt,name=meta_info,json=metaInfo,proto3" json:"meta_info,omitempty"`
}

func (x *ProtocolRunInfo) Reset() {
	*x = ProtocolRunInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolRunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolRunInfo) ProtoMessage() {}

func (x *ProtocolRunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolRunInfo.ProtoReflect.Descriptor instead.
func (*ProtocolRunInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{12}
}

func (x *ProtocolRunInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ProtocolRunInfo) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *ProtocolRunInfo) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ProtocolRunInfo) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

func (x *ProtocolRunInfo) GetState() ProtocolState {
	if x != nil {
		return x.State
	}
	return ProtocolState_PROTOCOL_RUNNING
}

func (x *ProtocolRunInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ProtocolRunInfo) GetScriptEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScriptEndTime
	}
	return nil
}

func (x *ProtocolRunInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ProtocolRunInfo) GetAcquisitionRunIds() []string {
	if x != nil {
		return x.AcquisitionRunIds
	}
	return nil
}

func (x *ProtocolRunInfo) GetUserInfo() *ProtocolRunUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ProtocolRunInfo) GetEpi2MeWorkflows() []*Epi2MeWorkflowReference {
	if x != nil {
		return x.Epi2MeWorkflows
	}
	return nil
}

func (x *ProtocolRunInfo) GetDevice() *GetDeviceInfoResponse {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ProtocolRunInfo) GetFlowCell() *GetFlowCellInfoResponse {
	if x != nil {
		return x.FlowCell
	}
	return nil
}

func (x *ProtocolRunInfo) GetMetaInfo() *ProtocolInfo {
	if x != nil {
		return x.MetaInfo
	}
	return nil
}

type ListProtocolRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProtocolRunsRequest) Reset() {
	*x = ListProtocolRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolRunsRequest) ProtoMessage() {}

func (x *ListProtocolRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolRunsRequest.ProtoReflect.Descriptor instead.
func (*ListProtocolRunsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{13}
}

type ListProtocolRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunIds []string `protobuf:"bytes,1,rep,name=run_ids,json=runIds,proto3" json:"run_ids,omitempty"`
}

func (x *ListProtocolRunsResponse) Reset() {
	*x = ListProtocolRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolRunsResponse) ProtoMessage() {}

func (x *ListProtocolRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolRunsResponse.ProtoReflect.Descriptor instead.
func (*ListProtocolRunsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{14}
}

func (x *ListProtocolRunsResponse) GetRunIds() []string {
	if x != nil {
		return x.RunIds
	}
	return nil
}

type GetCurrentProtocolRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentProtocolRunRequest) Reset() {
	*x = GetCurrentProtocolRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentProtocolRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentProtocolRunRequest) ProtoMessage() {}

func (x *GetCurrentProtocolRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentProtocolRunRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentProtocolRunRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{15}
}

type GetCurrentProtocolRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunInfo *ProtocolRunInfo `protobuf:"bytes,3,opt,name=run_info,json=runInfo,proto3" json:"run_info,omitempty"`
}

func (x *GetCurrentProtocolRunResponse) Reset() {
	*x = GetCurrentProtocolRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentProtocolRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentProtocolRunResponse) ProtoMessage() {}

func (x *GetCurrentProtocolRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentProtocolRunResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentProtocolRunResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{16}
}

func (x *GetCurrentProtocolRunResponse) GetRunInfo() *ProtocolRunInfo {
	if x != nil {
		return x.RunInfo
	}
	return nil
}

type WatchCurrentProtocolRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchCurrentProtocolRunRequest) Reset() {
	*x = WatchCurrentProtocolRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchCurrentProtocolRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchCurrentProtocolRunRequest) ProtoMessage() {}

func (x *WatchCurrentProtocolRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchCurrentProtocolRunRequest.ProtoReflect.Descriptor instead.
func (*WatchCurrentProtocolRunRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{17}
}

type GetContextInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetContextInfoRequest) Reset() {
	*x = GetContextInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContextInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContextInfoRequest) ProtoMessage() {}

func (x *GetContextInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContextInfoRequest.ProtoReflect.Descriptor instead.
func (*GetContextInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{18}
}

type GetContextInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextInfo map[string]string `protobuf:"bytes,1,rep,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetContextInfoResponse) Reset() {
	*x = GetContextInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContextInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContextInfoResponse) ProtoMessage() {}

func (x *GetContextInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContextInfoResponse.ProtoReflect.Descriptor instead.
func (*GetContextInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{19}
}

func (x *GetContextInfoResponse) GetContextInfo() map[string]string {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type SetContextInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextInfo map[string]string `protobuf:"bytes,1,rep,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetContextInfoRequest) Reset() {
	*x = SetContextInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetContextInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetContextInfoRequest) ProtoMessage() {}

func (x *SetContextInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetContextInfoRequest.ProtoReflect.Descriptor instead.
func (*SetContextInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{20}
}

func (x *SetContextInfoRequest) GetContextInfo() map[string]string {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type SetContextInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetContextInfoResponse) Reset() {
	*x = SetContextInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetContextInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetContextInfoResponse) ProtoMessage() {}

func (x *SetContextInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetContextInfoResponse.ProtoReflect.Descriptor instead.
func (*SetContextInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{21}
}

type GetProtocolPurposeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProtocolPurposeRequest) Reset() {
	*x = GetProtocolPurposeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProtocolPurposeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProtocolPurposeRequest) ProtoMessage() {}

func (x *GetProtocolPurposeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProtocolPurposeRequest.ProtoReflect.Descriptor instead.
func (*GetProtocolPurposeRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{22}
}

type GetProtocolPurposeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purpose string `protobuf:"bytes,1,opt,name=purpose,proto3" json:"purpose,omitempty"`
}

func (x *GetProtocolPurposeResponse) Reset() {
	*x = GetProtocolPurposeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProtocolPurposeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProtocolPurposeResponse) ProtoMessage() {}

func (x *GetProtocolPurposeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProtocolPurposeResponse.ProtoReflect.Descriptor instead.
func (*GetProtocolPurposeResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{23}
}

func (x *GetProtocolPurposeResponse) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

type SetProtocolPurposeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purpose string `protobuf:"bytes,1,opt,name=purpose,proto3" json:"purpose,omitempty"`
}

func (x *SetProtocolPurposeRequest) Reset() {
	*x = SetProtocolPurposeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProtocolPurposeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProtocolPurposeRequest) ProtoMessage() {}

func (x *SetProtocolPurposeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProtocolPurposeRequest.ProtoReflect.Descriptor instead.
func (*SetProtocolPurposeRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{24}
}

func (x *SetProtocolPurposeRequest) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

type SetProtocolPurposeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetProtocolPurposeResponse) Reset() {
	*x = SetProtocolPurposeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProtocolPurposeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProtocolPurposeResponse) ProtoMessage() {}

func (x *SetProtocolPurposeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProtocolPurposeResponse.ProtoReflect.Descriptor instead.
func (*SetProtocolPurposeResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{25}
}

type AddEpi2MeWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId          string                   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Epi2MeWorkflow *Epi2MeWorkflowReference `protobuf:"bytes,2,opt,name=epi2me_workflow,json=epi2meWorkflow,proto3" json:"epi2me_workflow,omitempty"`
}

func (x *AddEpi2MeWorkflowRequest) Reset() {
	*x = AddEpi2MeWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEpi2MeWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEpi2MeWorkflowRequest) ProtoMessage() {}

func (x *AddEpi2MeWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEpi2MeWorkflowRequest.ProtoReflect.Descriptor instead.
func (*AddEpi2MeWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{26}
}

func (x *AddEpi2MeWorkflowRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *AddEpi2MeWorkflowRequest) GetEpi2MeWorkflow() *Epi2MeWorkflowReference {
	if x != nil {
		return x.Epi2MeWorkflow
	}
	return nil
}

type AddEpi2MeWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddEpi2MeWorkflowResponse) Reset() {
	*x = AddEpi2MeWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEpi2MeWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEpi2MeWorkflowResponse) ProtoMessage() {}

func (x *AddEpi2MeWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEpi2MeWorkflowResponse.ProtoReflect.Descriptor instead.
func (*AddEpi2MeWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{27}
}

type ListProtocolGroupIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProtocolGroupIdsRequest) Reset() {
	*x = ListProtocolGroupIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolGroupIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolGroupIdsRequest) ProtoMessage() {}

func (x *ListProtocolGroupIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolGroupIdsRequest.ProtoReflect.Descriptor instead.
func (*ListProtocolGroupIdsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{28}
}

type ListProtocolGroupIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of protocol group ids used in any
	// protocol started on this instance of minknow.
	//
	ProtocolGroupIds []string `protobuf:"bytes,1,rep,name=protocol_group_ids,json=protocolGroupIds,proto3" json:"protocol_group_ids,omitempty"`
}

func (x *ListProtocolGroupIdsResponse) Reset() {
	*x = ListProtocolGroupIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolGroupIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolGroupIdsResponse) ProtoMessage() {}

func (x *ListProtocolGroupIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolGroupIdsResponse.ProtoReflect.Descriptor instead.
func (*ListProtocolGroupIdsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{29}
}

func (x *ListProtocolGroupIdsResponse) GetProtocolGroupIds() []string {
	if x != nil {
		return x.ProtocolGroupIds
	}
	return nil
}

type BeginHardwareCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BeginHardwareCheckRequest) Reset() {
	*x = BeginHardwareCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginHardwareCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginHardwareCheckRequest) ProtoMessage() {}

func (x *BeginHardwareCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginHardwareCheckRequest.ProtoReflect.Descriptor instead.
func (*BeginHardwareCheckRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{30}
}

type BeginHardwareCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID generated when the protocol is started, to uniquely represent this protocol instance
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *BeginHardwareCheckResponse) Reset() {
	*x = BeginHardwareCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginHardwareCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginHardwareCheckResponse) ProtoMessage() {}

func (x *BeginHardwareCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginHardwareCheckResponse.ProtoReflect.Descriptor instead.
func (*BeginHardwareCheckResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{31}
}

func (x *BeginHardwareCheckResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type BeginPlatformQcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BeginPlatformQcRequest) Reset() {
	*x = BeginPlatformQcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginPlatformQcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginPlatformQcRequest) ProtoMessage() {}

func (x *BeginPlatformQcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginPlatformQcRequest.ProtoReflect.Descriptor instead.
func (*BeginPlatformQcRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{32}
}

type BeginPlatformQcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID generated when the protocol is started, to uniquely represent this protocol instance
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *BeginPlatformQcResponse) Reset() {
	*x = BeginPlatformQcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginPlatformQcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginPlatformQcResponse) ProtoMessage() {}

func (x *BeginPlatformQcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginPlatformQcResponse.ProtoReflect.Descriptor instead.
func (*BeginPlatformQcResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{33}
}

func (x *BeginPlatformQcResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ProtocolIdentifierComponents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If not specified, will default to "ANY"
	Location ProtocolIdentifierComponents_Location `protobuf:"varint,1,opt,name=location,proto3,enum=minknow_api.protocol.ProtocolIdentifierComponents_Location" json:"location,omitempty"`
	// one of "custom", "sequencing", "control", "ctc", "platform qc" or "flowcell_plugin"
	ExperimentType string `protobuf:"bytes,2,opt,name=experiment_type,json=experimentType,proto3" json:"experiment_type,omitempty"`
	// Name (or path) of the protocol, without the .toml extension eg: "sequencing/sequencing_MIN106_DNA" this is relative to the
	// system or user protocol directory
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// eg: "FLO-MIN106"
	FlowCellProductCode string `protobuf:"bytes,4,opt,name=flow_cell_product_code,json=flowCellProductCode,proto3" json:"flow_cell_product_code,omitempty"`
	// eg: "SQK-RPB004"
	Kit string `protobuf:"bytes,5,opt,name=kit,proto3" json:"kit,omitempty"`
}

func (x *ProtocolIdentifierComponents) Reset() {
	*x = ProtocolIdentifierComponents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolIdentifierComponents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolIdentifierComponents) ProtoMessage() {}

func (x *ProtocolIdentifierComponents) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolIdentifierComponents.ProtoReflect.Descriptor instead.
func (*ProtocolIdentifierComponents) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{34}
}

func (x *ProtocolIdentifierComponents) GetLocation() ProtocolIdentifierComponents_Location {
	if x != nil {
		return x.Location
	}
	return ProtocolIdentifierComponents_ANY
}

func (x *ProtocolIdentifierComponents) GetExperimentType() string {
	if x != nil {
		return x.ExperimentType
	}
	return ""
}

func (x *ProtocolIdentifierComponents) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolIdentifierComponents) GetFlowCellProductCode() string {
	if x != nil {
		return x.FlowCellProductCode
	}
	return ""
}

func (x *ProtocolIdentifierComponents) GetKit() string {
	if x != nil {
		return x.Kit
	}
	return ""
}

type ListSettingsForProtocolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProtocolIdentifier:
	//	*ListSettingsForProtocolRequest_Identifier
	//	*ListSettingsForProtocolRequest_Components
	ProtocolIdentifier isListSettingsForProtocolRequest_ProtocolIdentifier `protobuf_oneof:"protocol_identifier"`
}

func (x *ListSettingsForProtocolRequest) Reset() {
	*x = ListSettingsForProtocolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSettingsForProtocolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSettingsForProtocolRequest) ProtoMessage() {}

func (x *ListSettingsForProtocolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSettingsForProtocolRequest.ProtoReflect.Descriptor instead.
func (*ListSettingsForProtocolRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{35}
}

func (m *ListSettingsForProtocolRequest) GetProtocolIdentifier() isListSettingsForProtocolRequest_ProtocolIdentifier {
	if m != nil {
		return m.ProtocolIdentifier
	}
	return nil
}

func (x *ListSettingsForProtocolRequest) GetIdentifier() string {
	if x, ok := x.GetProtocolIdentifier().(*ListSettingsForProtocolRequest_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (x *ListSettingsForProtocolRequest) GetComponents() *ProtocolIdentifierComponents {
	if x, ok := x.GetProtocolIdentifier().(*ListSettingsForProtocolRequest_Components); ok {
		return x.Components
	}
	return nil
}

type isListSettingsForProtocolRequest_ProtocolIdentifier interface {
	isListSettingsForProtocolRequest_ProtocolIdentifier()
}

type ListSettingsForProtocolRequest_Identifier struct {
	// specify the protocol with a string containing all the protocol's identifying components, eg:
	// "sequencing/sequencing_MIN106_DNA:FLO-MIN106:SQK-RPB004"
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type ListSettingsForProtocolRequest_Components struct {
	// specify the protocol providing the identifying components individually. All components are optional, if more
	// than one protocol matches given strings, information about the first will be returned.
	Components *ProtocolIdentifierComponents `protobuf:"bytes,2,opt,name=components,proto3,oneof"`
}

func (*ListSettingsForProtocolRequest_Identifier) isListSettingsForProtocolRequest_ProtocolIdentifier() {
}

func (*ListSettingsForProtocolRequest_Components) isListSettingsForProtocolRequest_ProtocolIdentifier() {
}

type ProtocolSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category ProtocolSetting_Category `protobuf:"varint,1,opt,name=category,proto3,enum=minknow_api.protocol.ProtocolSetting_Category" json:"category,omitempty"`
	// Identifier is the unique primary-key for referring to protocol-settings,
	// dependencies refer to other settings via their identifier.
	Identifier  string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional additional help text for a setting that may be shown to the user if required.
	Help         string                                `protobuf:"bytes,16,opt,name=help,proto3" json:"help,omitempty"`
	Unit         ProtocolSetting_Unit                  `protobuf:"varint,5,opt,name=unit,proto3,enum=minknow_api.protocol.ProtocolSetting_Unit" json:"unit,omitempty"`
	DefaultValue *ProtocolSetting_ProtocolSettingValue `protobuf:"bytes,6,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// All constraints must be met if this setting is to be considered valid
	Constraints []*ProtocolSetting_Constraint `protobuf:"bytes,7,rep,name=constraints,proto3" json:"constraints,omitempty"`
	// If any of the dependencies matches it's constraints, this setting should
	// adopt the level of visibility specified in "visibility". If none of the
	// dependencies match their constraints, then "visibility" should be ignored
	// and the option should be hidden from the user.
	//
	// Some dependencies may be specified multiple times, but with mutually
	// exclusive constraints, for example if the setting controls data compression
	// level, where there is a compression_algorithm setting specified by a string
	// that can have the values "X", "Y" or "None". The setting may be dependent
	// on compression_algorithm equals "X" or compression_algorithm equals "Y".
	// If the compression_algorithm is "None" then none of the dependency constraints
	// will be met and the setting should be hidden. A typical arrangement of fields
	// in this case would be:
	// Dependency {
	//   identifier: "compression_algorithm",
	//   Constraint {
	//     condition : EQUAL,
	//     value: "X"
	//   }
	// }
	// Dependency {
	//   identifier: "compression_algorithm",
	//   Constraint {
	//     condition : EQUAL,
	//     value: "Y"
	//   }
	// }
	// When a dependency is specified with multiple constraints they must all be
	// met before the dependency is considered satisfied, for example some other
	// setting may be dependent on compression_level being in a range (0,10] :
	//  Dependency {
	//   identifier: "compression_level",
	//   Constraint {
	//     condition : GT,
	//     value: 0
	//   },
	//   Constraint {
	//     condition : LT_EQ,
	//     value: 10
	//   }
	// }
	Dependencies []*ProtocolSetting_Dependency `protobuf:"bytes,8,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// If any of the dependencies match their constraints, this level of visibility
	// should be adopted. It should also be adopted if no dependencies are specified.
	Visibility ProtocolSetting_Visibility `protobuf:"varint,9,opt,name=visibility,proto3,enum=minknow_api.protocol.ProtocolSetting_Visibility" json:"visibility,omitempty"`
	// when unit is CHOICE, this defines the acceptable choices.
	Choices []string `protobuf:"bytes,17,rep,name=choices,proto3" json:"choices,omitempty"`
}

func (x *ProtocolSetting) Reset() {
	*x = ProtocolSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolSetting) ProtoMessage() {}

func (x *ProtocolSetting) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolSetting.ProtoReflect.Descriptor instead.
func (*ProtocolSetting) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{36}
}

func (x *ProtocolSetting) GetCategory() ProtocolSetting_Category {
	if x != nil {
		return x.Category
	}
	return ProtocolSetting_OTHER
}

func (x *ProtocolSetting) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ProtocolSetting) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProtocolSetting) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *ProtocolSetting) GetUnit() ProtocolSetting_Unit {
	if x != nil {
		return x.Unit
	}
	return ProtocolSetting_UNITLESS
}

func (x *ProtocolSetting) GetDefaultValue() *ProtocolSetting_ProtocolSettingValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ProtocolSetting) GetConstraints() []*ProtocolSetting_Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *ProtocolSetting) GetDependencies() []*ProtocolSetting_Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *ProtocolSetting) GetVisibility() ProtocolSetting_Visibility {
	if x != nil {
		return x.Visibility
	}
	return ProtocolSetting_EDITABLE
}

func (x *ProtocolSetting) GetChoices() []string {
	if x != nil {
		return x.Choices
	}
	return nil
}

type ListSettingsForProtocolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol    *ProtocolIdentifierComponents                `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RunOptions  *ListSettingsForProtocolResponse_RunOptions  `protobuf:"bytes,2,opt,name=run_options,json=runOptions,proto3" json:"run_options,omitempty"`
	Basecalling *ListSettingsForProtocolResponse_Basecalling `protobuf:"bytes,3,opt,name=basecalling,proto3" json:"basecalling,omitempty"`
	Output      *ListSettingsForProtocolResponse_Output      `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	// Any protocol settings not covered by the above structures, for example
	// those required for custom-scripts.
	ProtocolSettings []*ProtocolSetting `protobuf:"bytes,5,rep,name=protocol_settings,json=protocolSettings,proto3" json:"protocol_settings,omitempty"`
}

func (x *ListSettingsForProtocolResponse) Reset() {
	*x = ListSettingsForProtocolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSettingsForProtocolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSettingsForProtocolResponse) ProtoMessage() {}

func (x *ListSettingsForProtocolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSettingsForProtocolResponse.ProtoReflect.Descriptor instead.
func (*ListSettingsForProtocolResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{37}
}

func (x *ListSettingsForProtocolResponse) GetProtocol() *ProtocolIdentifierComponents {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *ListSettingsForProtocolResponse) GetRunOptions() *ListSettingsForProtocolResponse_RunOptions {
	if x != nil {
		return x.RunOptions
	}
	return nil
}

func (x *ListSettingsForProtocolResponse) GetBasecalling() *ListSettingsForProtocolResponse_Basecalling {
	if x != nil {
		return x.Basecalling
	}
	return nil
}

func (x *ListSettingsForProtocolResponse) GetOutput() *ListSettingsForProtocolResponse_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ListSettingsForProtocolResponse) GetProtocolSettings() []*ProtocolSetting {
	if x != nil {
		return x.ProtocolSettings
	}
	return nil
}

type ProtocolInfo_TagValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TagValue:
	//	*ProtocolInfo_TagValue_StringValue
	//	*ProtocolInfo_TagValue_BoolValue
	//	*ProtocolInfo_TagValue_IntValue
	//	*ProtocolInfo_TagValue_DoubleValue
	//	*ProtocolInfo_TagValue_ArrayValue
	//	*ProtocolInfo_TagValue_ObjectValue
	TagValue isProtocolInfo_TagValue_TagValue `protobuf_oneof:"tag_value"`
}

func (x *ProtocolInfo_TagValue) Reset() {
	*x = ProtocolInfo_TagValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfo_TagValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfo_TagValue) ProtoMessage() {}

func (x *ProtocolInfo_TagValue) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfo_TagValue.ProtoReflect.Descriptor instead.
func (*ProtocolInfo_TagValue) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{7, 0}
}

func (m *ProtocolInfo_TagValue) GetTagValue() isProtocolInfo_TagValue_TagValue {
	if m != nil {
		return m.TagValue
	}
	return nil
}

func (x *ProtocolInfo_TagValue) GetStringValue() string {
	if x, ok := x.GetTagValue().(*ProtocolInfo_TagValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ProtocolInfo_TagValue) GetBoolValue() bool {
	if x, ok := x.GetTagValue().(*ProtocolInfo_TagValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *ProtocolInfo_TagValue) GetIntValue() int64 {
	if x, ok := x.GetTagValue().(*ProtocolInfo_TagValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *ProtocolInfo_TagValue) GetDoubleValue() float64 {
	if x, ok := x.GetTagValue().(*ProtocolInfo_TagValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *ProtocolInfo_TagValue) GetArrayValue() string {
	if x, ok := x.GetTagValue().(*ProtocolInfo_TagValue_ArrayValue); ok {
		return x.ArrayValue
	}
	return ""
}

func (x *ProtocolInfo_TagValue) GetObjectValue() string {
	if x, ok := x.GetTagValue().(*ProtocolInfo_TagValue_ObjectValue); ok {
		return x.ObjectValue
	}
	return ""
}

type isProtocolInfo_TagValue_TagValue interface {
	isProtocolInfo_TagValue_TagValue()
}

type ProtocolInfo_TagValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_ArrayValue struct {
	ArrayValue string `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type ProtocolInfo_TagValue_ObjectValue struct {
	ObjectValue string `protobuf:"bytes,6,opt,name=object_value,json=objectValue,proto3,oneof"`
}

func (*ProtocolInfo_TagValue_StringValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_BoolValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_IntValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_DoubleValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_ArrayValue) isProtocolInfo_TagValue_TagValue() {}

func (*ProtocolInfo_TagValue_ObjectValue) isProtocolInfo_TagValue_TagValue() {}

type ProtocolInfo_TagExtractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorReport string `protobuf:"bytes,2,opt,name=error_report,json=errorReport,proto3" json:"error_report,omitempty"`
}

func (x *ProtocolInfo_TagExtractionResult) Reset() {
	*x = ProtocolInfo_TagExtractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfo_TagExtractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfo_TagExtractionResult) ProtoMessage() {}

func (x *ProtocolInfo_TagExtractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfo_TagExtractionResult.ProtoReflect.Descriptor instead.
func (*ProtocolInfo_TagExtractionResult) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{7, 1}
}

func (x *ProtocolInfo_TagExtractionResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProtocolInfo_TagExtractionResult) GetErrorReport() string {
	if x != nil {
		return x.ErrorReport
	}
	return ""
}

type ProtocolSetting_ProtocolSettingValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProtocolSettingValue:
	//	*ProtocolSetting_ProtocolSettingValue_StringValue
	//	*ProtocolSetting_ProtocolSettingValue_FloatValue
	//	*ProtocolSetting_ProtocolSettingValue_IntegerValue
	//	*ProtocolSetting_ProtocolSettingValue_BoolValue
	//	*ProtocolSetting_ProtocolSettingValue_ChannelsValue
	ProtocolSettingValue isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue `protobuf_oneof:"protocol_setting_value"`
}

func (x *ProtocolSetting_ProtocolSettingValue) Reset() {
	*x = ProtocolSetting_ProtocolSettingValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolSetting_ProtocolSettingValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolSetting_ProtocolSettingValue) ProtoMessage() {}

func (x *ProtocolSetting_ProtocolSettingValue) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolSetting_ProtocolSettingValue.ProtoReflect.Descriptor instead.
func (*ProtocolSetting_ProtocolSettingValue) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{36, 0}
}

func (m *ProtocolSetting_ProtocolSettingValue) GetProtocolSettingValue() isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue {
	if m != nil {
		return m.ProtocolSettingValue
	}
	return nil
}

func (x *ProtocolSetting_ProtocolSettingValue) GetStringValue() string {
	if x, ok := x.GetProtocolSettingValue().(*ProtocolSetting_ProtocolSettingValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ProtocolSetting_ProtocolSettingValue) GetFloatValue() float64 {
	if x, ok := x.GetProtocolSettingValue().(*ProtocolSetting_ProtocolSettingValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *ProtocolSetting_ProtocolSettingValue) GetIntegerValue() int64 {
	if x, ok := x.GetProtocolSettingValue().(*ProtocolSetting_ProtocolSettingValue_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *ProtocolSetting_ProtocolSettingValue) GetBoolValue() bool {
	if x, ok := x.GetProtocolSettingValue().(*ProtocolSetting_ProtocolSettingValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *ProtocolSetting_ProtocolSettingValue) GetChannelsValue() *WriterConfiguration_ChannelConfiguration {
	if x, ok := x.GetProtocolSettingValue().(*ProtocolSetting_ProtocolSettingValue_ChannelsValue); ok {
		return x.ChannelsValue
	}
	return nil
}

type isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue interface {
	isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue()
}

type ProtocolSetting_ProtocolSettingValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ProtocolSetting_ProtocolSettingValue_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type ProtocolSetting_ProtocolSettingValue_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,3,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type ProtocolSetting_ProtocolSettingValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type ProtocolSetting_ProtocolSettingValue_ChannelsValue struct {
	ChannelsValue *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,5,opt,name=channels_value,json=channelsValue,proto3,oneof"`
}

func (*ProtocolSetting_ProtocolSettingValue_StringValue) isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue() {
}

func (*ProtocolSetting_ProtocolSettingValue_FloatValue) isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue() {
}

func (*ProtocolSetting_ProtocolSettingValue_IntegerValue) isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue() {
}

func (*ProtocolSetting_ProtocolSettingValue_BoolValue) isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue() {
}

func (*ProtocolSetting_ProtocolSettingValue_ChannelsValue) isProtocolSetting_ProtocolSettingValue_ProtocolSettingValue() {
}

type ProtocolSetting_Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition ProtocolSetting_Constraint_Condition  `protobuf:"varint,1,opt,name=condition,proto3,enum=minknow_api.protocol.ProtocolSetting_Constraint_Condition" json:"condition,omitempty"`
	Value     *ProtocolSetting_ProtocolSettingValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProtocolSetting_Constraint) Reset() {
	*x = ProtocolSetting_Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolSetting_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolSetting_Constraint) ProtoMessage() {}

func (x *ProtocolSetting_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolSetting_Constraint.ProtoReflect.Descriptor instead.
func (*ProtocolSetting_Constraint) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{36, 1}
}

func (x *ProtocolSetting_Constraint) GetCondition() ProtocolSetting_Constraint_Condition {
	if x != nil {
		return x.Condition
	}
	return ProtocolSetting_Constraint_EQUAL
}

func (x *ProtocolSetting_Constraint) GetValue() *ProtocolSetting_ProtocolSettingValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type ProtocolSetting_Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier  string                        `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Constraints []*ProtocolSetting_Constraint `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *ProtocolSetting_Dependency) Reset() {
	*x = ProtocolSetting_Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolSetting_Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolSetting_Dependency) ProtoMessage() {}

func (x *ProtocolSetting_Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolSetting_Dependency.ProtoReflect.Descriptor instead.
func (*ProtocolSetting_Dependency) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{36, 2}
}

func (x *ProtocolSetting_Dependency) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ProtocolSetting_Dependency) GetConstraints() []*ProtocolSetting_Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// Run options
type ListSettingsForProtocolResponse_RunOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunLength               *ProtocolSetting `protobuf:"bytes,1,opt,name=run_length,json=runLength,proto3" json:"run_length,omitempty"`
	BiasVoltage             *ProtocolSetting `protobuf:"bytes,2,opt,name=bias_voltage,json=biasVoltage,proto3" json:"bias_voltage,omitempty"`
	ReadUntilEnabled        *ProtocolSetting `protobuf:"bytes,3,opt,name=read_until_enabled,json=readUntilEnabled,proto3" json:"read_until_enabled,omitempty"`
	ReadUntilRefFile        *ProtocolSetting `protobuf:"bytes,4,opt,name=read_until_ref_file,json=readUntilRefFile,proto3" json:"read_until_ref_file,omitempty"`
	ReadUntilChannels       *ProtocolSetting `protobuf:"bytes,5,opt,name=read_until_channels,json=readUntilChannels,proto3" json:"read_until_channels,omitempty"`
	ReadUntilBedFileEnabled *ProtocolSetting `protobuf:"bytes,6,opt,name=read_until_bed_file_enabled,json=readUntilBedFileEnabled,proto3" json:"read_until_bed_file_enabled,omitempty"`
	ReadUntilBedFile        *ProtocolSetting `protobuf:"bytes,7,opt,name=read_until_bed_file,json=readUntilBedFile,proto3" json:"read_until_bed_file,omitempty"`
	ReadUntilEnrichment     *ProtocolSetting `protobuf:"bytes,8,opt,name=read_until_enrichment,json=readUntilEnrichment,proto3" json:"read_until_enrichment,omitempty"`
	ActiveChannelSelection  *ProtocolSetting `protobuf:"bytes,9,opt,name=active_channel_selection,json=activeChannelSelection,proto3" json:"active_channel_selection,omitempty"` // bool
	MuxScanPeriod           *ProtocolSetting `protobuf:"bytes,10,opt,name=mux_scan_period,json=muxScanPeriod,proto3" json:"mux_scan_period,omitempty"`                           // in hours
	GroupChangePeriod       *ProtocolSetting `protobuf:"bytes,11,opt,name=group_change_period,json=groupChangePeriod,proto3" json:"group_change_period,omitempty"`
}

func (x *ListSettingsForProtocolResponse_RunOptions) Reset() {
	*x = ListSettingsForProtocolResponse_RunOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSettingsForProtocolResponse_RunOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSettingsForProtocolResponse_RunOptions) ProtoMessage() {}

func (x *ListSettingsForProtocolResponse_RunOptions) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSettingsForProtocolResponse_RunOptions.ProtoReflect.Descriptor instead.
func (*ListSettingsForProtocolResponse_RunOptions) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{37, 0}
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetRunLength() *ProtocolSetting {
	if x != nil {
		return x.RunLength
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetBiasVoltage() *ProtocolSetting {
	if x != nil {
		return x.BiasVoltage
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetReadUntilEnabled() *ProtocolSetting {
	if x != nil {
		return x.ReadUntilEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetReadUntilRefFile() *ProtocolSetting {
	if x != nil {
		return x.ReadUntilRefFile
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetReadUntilChannels() *ProtocolSetting {
	if x != nil {
		return x.ReadUntilChannels
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetReadUntilBedFileEnabled() *ProtocolSetting {
	if x != nil {
		return x.ReadUntilBedFileEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetReadUntilBedFile() *ProtocolSetting {
	if x != nil {
		return x.ReadUntilBedFile
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetReadUntilEnrichment() *ProtocolSetting {
	if x != nil {
		return x.ReadUntilEnrichment
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetActiveChannelSelection() *ProtocolSetting {
	if x != nil {
		return x.ActiveChannelSelection
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetMuxScanPeriod() *ProtocolSetting {
	if x != nil {
		return x.MuxScanPeriod
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_RunOptions) GetGroupChangePeriod() *ProtocolSetting {
	if x != nil {
		return x.GroupChangePeriod
	}
	return nil
}

type ListSettingsForProtocolResponse_Basecalling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasecallingEnabled         *ProtocolSetting `protobuf:"bytes,1,opt,name=basecalling_enabled,json=basecallingEnabled,proto3" json:"basecalling_enabled,omitempty"`
	BarcodingEnabled           *ProtocolSetting `protobuf:"bytes,2,opt,name=barcoding_enabled,json=barcodingEnabled,proto3" json:"barcoding_enabled,omitempty"`
	BasecallModel              *ProtocolSetting `protobuf:"bytes,3,opt,name=basecall_model,json=basecallModel,proto3" json:"basecall_model,omitempty"`
	TrimBarcodesEnabled        *ProtocolSetting `protobuf:"bytes,4,opt,name=trim_barcodes_enabled,json=trimBarcodesEnabled,proto3" json:"trim_barcodes_enabled,omitempty"`
	RequireBarcodesBothEnds    *ProtocolSetting `protobuf:"bytes,5,opt,name=require_barcodes_both_ends,json=requireBarcodesBothEnds,proto3" json:"require_barcodes_both_ends,omitempty"`
	DetectMidStrandBarcodes    *ProtocolSetting `protobuf:"bytes,6,opt,name=detect_mid_strand_barcodes,json=detectMidStrandBarcodes,proto3" json:"detect_mid_strand_barcodes,omitempty"`
	OverrideMidBarcodingScore  *ProtocolSetting `protobuf:"bytes,7,opt,name=override_mid_barcoding_score,json=overrideMidBarcodingScore,proto3" json:"override_mid_barcoding_score,omitempty"`
	OverrideRearBarcodingScore *ProtocolSetting `protobuf:"bytes,8,opt,name=override_rear_barcoding_score,json=overrideRearBarcodingScore,proto3" json:"override_rear_barcoding_score,omitempty"`
	MinBarcodingScore          *ProtocolSetting `protobuf:"bytes,9,opt,name=min_barcoding_score,json=minBarcodingScore,proto3" json:"min_barcoding_score,omitempty"`
	MinBarcodingScoreRear      *ProtocolSetting `protobuf:"bytes,10,opt,name=min_barcoding_score_rear,json=minBarcodingScoreRear,proto3" json:"min_barcoding_score_rear,omitempty"`
	MinBarcodingScoreMid       *ProtocolSetting `protobuf:"bytes,11,opt,name=min_barcoding_score_mid,json=minBarcodingScoreMid,proto3" json:"min_barcoding_score_mid,omitempty"`
	AlignmentEnabled           *ProtocolSetting `protobuf:"bytes,12,opt,name=alignment_enabled,json=alignmentEnabled,proto3" json:"alignment_enabled,omitempty"`
	AlignmentRefFile           *ProtocolSetting `protobuf:"bytes,13,opt,name=alignment_ref_file,json=alignmentRefFile,proto3" json:"alignment_ref_file,omitempty"`
	AlignmentBedFileEnabled    *ProtocolSetting `protobuf:"bytes,14,opt,name=alignment_bed_file_enabled,json=alignmentBedFileEnabled,proto3" json:"alignment_bed_file_enabled,omitempty"`
	AlignmentBedFile           *ProtocolSetting `protobuf:"bytes,15,opt,name=alignment_bed_file,json=alignmentBedFile,proto3" json:"alignment_bed_file,omitempty"`
}

func (x *ListSettingsForProtocolResponse_Basecalling) Reset() {
	*x = ListSettingsForProtocolResponse_Basecalling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSettingsForProtocolResponse_Basecalling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSettingsForProtocolResponse_Basecalling) ProtoMessage() {}

func (x *ListSettingsForProtocolResponse_Basecalling) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSettingsForProtocolResponse_Basecalling.ProtoReflect.Descriptor instead.
func (*ListSettingsForProtocolResponse_Basecalling) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{37, 1}
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetBasecallingEnabled() *ProtocolSetting {
	if x != nil {
		return x.BasecallingEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetBarcodingEnabled() *ProtocolSetting {
	if x != nil {
		return x.BarcodingEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetBasecallModel() *ProtocolSetting {
	if x != nil {
		return x.BasecallModel
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetTrimBarcodesEnabled() *ProtocolSetting {
	if x != nil {
		return x.TrimBarcodesEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetRequireBarcodesBothEnds() *ProtocolSetting {
	if x != nil {
		return x.RequireBarcodesBothEnds
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetDetectMidStrandBarcodes() *ProtocolSetting {
	if x != nil {
		return x.DetectMidStrandBarcodes
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetOverrideMidBarcodingScore() *ProtocolSetting {
	if x != nil {
		return x.OverrideMidBarcodingScore
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetOverrideRearBarcodingScore() *ProtocolSetting {
	if x != nil {
		return x.OverrideRearBarcodingScore
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetMinBarcodingScore() *ProtocolSetting {
	if x != nil {
		return x.MinBarcodingScore
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetMinBarcodingScoreRear() *ProtocolSetting {
	if x != nil {
		return x.MinBarcodingScoreRear
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetMinBarcodingScoreMid() *ProtocolSetting {
	if x != nil {
		return x.MinBarcodingScoreMid
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetAlignmentEnabled() *ProtocolSetting {
	if x != nil {
		return x.AlignmentEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetAlignmentRefFile() *ProtocolSetting {
	if x != nil {
		return x.AlignmentRefFile
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetAlignmentBedFileEnabled() *ProtocolSetting {
	if x != nil {
		return x.AlignmentBedFileEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Basecalling) GetAlignmentBedFile() *ProtocolSetting {
	if x != nil {
		return x.AlignmentBedFile
	}
	return nil
}

// Output
type ListSettingsForProtocolResponse_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputLocation             *ProtocolSetting `protobuf:"bytes,1,opt,name=output_location,json=outputLocation,proto3" json:"output_location,omitempty"`
	FastQEnabled               *ProtocolSetting `protobuf:"bytes,2,opt,name=fast_q_enabled,json=fastQEnabled,proto3" json:"fast_q_enabled,omitempty"`
	FastQReadsPerFile          *ProtocolSetting `protobuf:"bytes,3,opt,name=fast_q_reads_per_file,json=fastQReadsPerFile,proto3" json:"fast_q_reads_per_file,omitempty"`
	FastQDataCompression       *ProtocolSetting `protobuf:"bytes,4,opt,name=fast_q_data_compression,json=fastQDataCompression,proto3" json:"fast_q_data_compression,omitempty"`
	Fast_5Enabled              *ProtocolSetting `protobuf:"bytes,5,opt,name=fast_5_enabled,json=fast5Enabled,proto3" json:"fast_5_enabled,omitempty"`
	Fast_5ReadsPerFile         *ProtocolSetting `protobuf:"bytes,6,opt,name=fast_5_reads_per_file,json=fast5ReadsPerFile,proto3" json:"fast_5_reads_per_file,omitempty"`
	Fast_5DataTraceTable       *ProtocolSetting `protobuf:"bytes,7,opt,name=fast_5_data_trace_table,json=fast5DataTraceTable,proto3" json:"fast_5_data_trace_table,omitempty"`
	Fast_5DataMoveTable        *ProtocolSetting `protobuf:"bytes,8,opt,name=fast_5_data_move_table,json=fast5DataMoveTable,proto3" json:"fast_5_data_move_table,omitempty"`
	Fast_5DataFastQ            *ProtocolSetting `protobuf:"bytes,9,opt,name=fast_5_data_fast_q,json=fast5DataFastQ,proto3" json:"fast_5_data_fast_q,omitempty"`
	Fast_5DataRaw              *ProtocolSetting `protobuf:"bytes,10,opt,name=fast_5_data_raw,json=fast5DataRaw,proto3" json:"fast_5_data_raw,omitempty"`
	Fast_5DataCompression      *ProtocolSetting `protobuf:"bytes,11,opt,name=fast_5_data_compression,json=fast5DataCompression,proto3" json:"fast_5_data_compression,omitempty"`
	BamEnabled                 *ProtocolSetting `protobuf:"bytes,12,opt,name=bam_enabled,json=bamEnabled,proto3" json:"bam_enabled,omitempty"`
	ReadFilteringEnabled       *ProtocolSetting `protobuf:"bytes,13,opt,name=read_filtering_enabled,json=readFilteringEnabled,proto3" json:"read_filtering_enabled,omitempty"`
	ReadFilteringMinQscore     *ProtocolSetting `protobuf:"bytes,14,opt,name=read_filtering_min_qscore,json=readFilteringMinQscore,proto3" json:"read_filtering_min_qscore,omitempty"`
	ReadFilteringMinReadLength *ProtocolSetting `protobuf:"bytes,15,opt,name=read_filtering_min_read_length,json=readFilteringMinReadLength,proto3" json:"read_filtering_min_read_length,omitempty"`
	ReadFilteringMaxReadLength *ProtocolSetting `protobuf:"bytes,16,opt,name=read_filtering_max_read_length,json=readFilteringMaxReadLength,proto3" json:"read_filtering_max_read_length,omitempty"`
	BulkFileEnabled            *ProtocolSetting `protobuf:"bytes,17,opt,name=bulk_file_enabled,json=bulkFileEnabled,proto3" json:"bulk_file_enabled,omitempty"`
	BulkFileRaw                *ProtocolSetting `protobuf:"bytes,18,opt,name=bulk_file_raw,json=bulkFileRaw,proto3" json:"bulk_file_raw,omitempty"`
	BulkFileEvents             *ProtocolSetting `protobuf:"bytes,19,opt,name=bulk_file_events,json=bulkFileEvents,proto3" json:"bulk_file_events,omitempty"`
	BulkFileReadTable          *ProtocolSetting `protobuf:"bytes,20,opt,name=bulk_file_read_table,json=bulkFileReadTable,proto3" json:"bulk_file_read_table,omitempty"`
	BulkFileRawEnabled         *ProtocolSetting `protobuf:"bytes,21,opt,name=bulk_file_raw_enabled,json=bulkFileRawEnabled,proto3" json:"bulk_file_raw_enabled,omitempty"`
	BulkFileEventsEnabled      *ProtocolSetting `protobuf:"bytes,22,opt,name=bulk_file_events_enabled,json=bulkFileEventsEnabled,proto3" json:"bulk_file_events_enabled,omitempty"`
	BulkFileReadTableEnabled   *ProtocolSetting `protobuf:"bytes,23,opt,name=bulk_file_read_table_enabled,json=bulkFileReadTableEnabled,proto3" json:"bulk_file_read_table_enabled,omitempty"`
}

func (x *ListSettingsForProtocolResponse_Output) Reset() {
	*x = ListSettingsForProtocolResponse_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_protocol_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSettingsForProtocolResponse_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSettingsForProtocolResponse_Output) ProtoMessage() {}

func (x *ListSettingsForProtocolResponse_Output) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_protocol_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSettingsForProtocolResponse_Output.ProtoReflect.Descriptor instead.
func (*ListSettingsForProtocolResponse_Output) Descriptor() ([]byte, []int) {
	return file_minknow_api_protocol_proto_rawDescGZIP(), []int{37, 2}
}

func (x *ListSettingsForProtocolResponse_Output) GetOutputLocation() *ProtocolSetting {
	if x != nil {
		return x.OutputLocation
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFastQEnabled() *ProtocolSetting {
	if x != nil {
		return x.FastQEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFastQReadsPerFile() *ProtocolSetting {
	if x != nil {
		return x.FastQReadsPerFile
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFastQDataCompression() *ProtocolSetting {
	if x != nil {
		return x.FastQDataCompression
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFast_5Enabled() *ProtocolSetting {
	if x != nil {
		return x.Fast_5Enabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFast_5ReadsPerFile() *ProtocolSetting {
	if x != nil {
		return x.Fast_5ReadsPerFile
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFast_5DataTraceTable() *ProtocolSetting {
	if x != nil {
		return x.Fast_5DataTraceTable
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFast_5DataMoveTable() *ProtocolSetting {
	if x != nil {
		return x.Fast_5DataMoveTable
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFast_5DataFastQ() *ProtocolSetting {
	if x != nil {
		return x.Fast_5DataFastQ
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFast_5DataRaw() *ProtocolSetting {
	if x != nil {
		return x.Fast_5DataRaw
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetFast_5DataCompression() *ProtocolSetting {
	if x != nil {
		return x.Fast_5DataCompression
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetBamEnabled() *ProtocolSetting {
	if x != nil {
		return x.BamEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetReadFilteringEnabled() *ProtocolSetting {
	if x != nil {
		return x.ReadFilteringEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetReadFilteringMinQscore() *ProtocolSetting {
	if x != nil {
		return x.ReadFilteringMinQscore
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetReadFilteringMinReadLength() *ProtocolSetting {
	if x != nil {
		return x.ReadFilteringMinReadLength
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetReadFilteringMaxReadLength() *ProtocolSetting {
	if x != nil {
		return x.ReadFilteringMaxReadLength
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetBulkFileEnabled() *ProtocolSetting {
	if x != nil {
		return x.BulkFileEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetBulkFileRaw() *ProtocolSetting {
	if x != nil {
		return x.BulkFileRaw
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetBulkFileEvents() *ProtocolSetting {
	if x != nil {
		return x.BulkFileEvents
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetBulkFileReadTable() *ProtocolSetting {
	if x != nil {
		return x.BulkFileReadTable
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetBulkFileRawEnabled() *ProtocolSetting {
	if x != nil {
		return x.BulkFileRawEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetBulkFileEventsEnabled() *ProtocolSetting {
	if x != nil {
		return x.BulkFileEventsEnabled
	}
	return nil
}

func (x *ListSettingsForProtocolResponse_Output) GetBulkFileReadTableEnabled() *ProtocolSetting {
	if x != nil {
		return x.BulkFileReadTableEnabled
	}
	return nil
}

var File_minknow_api_protocol_proto protoreflect.FileDescriptor

var file_minknow_api_protocol_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x6d, 0x70, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x6e, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x31, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x32, 0x10, 0x05, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x2e, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x22, 0x75, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x96, 0x05, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x6a, 0x0a, 0x15, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x74, 0x61, 0x67, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xe9, 0x01,
	0x0a, 0x08, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x52, 0x0a, 0x13, 0x54, 0x61, 0x67,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x64, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0x96,
	0x02, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x6f, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x2a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x45, 0x70, 0x69, 0x32, 0x6d, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x8f, 0x06, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x10, 0x65, 0x70,
	0x69, 0x32, 0x6d, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x70, 0x69, 0x32,
	0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0f, 0x65, 0x70, 0x69, 0x32, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c,
	0x6c, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x61, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x75,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x20, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xba, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3e, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x01,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x36, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x1c,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x0a,
	0x18, 0x41, 0x64, 0x64, 0x45, 0x70, 0x69, 0x32, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x65, 0x70, 0x69, 0x32, 0x6d, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x70, 0x69, 0x32, 0x6d, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x65, 0x70, 0x69, 0x32, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x45, 0x70, 0x69, 0x32, 0x6d,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4c, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x1b,
	0x0a, 0x19, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x1a, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x22, 0x18, 0x0a, 0x16, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x51, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x17, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x51, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xb6, 0x02, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x74, 0x22, 0x39, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x53, 0x10, 0x02, 0x22, 0xaf, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x15, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xc5, 0x0d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18,
	0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x54, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x1a, 0xb7, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x18, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb9, 0x02, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x54, 0x5f, 0x45, 0x51, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x54, 0x5f, 0x45, 0x51, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4c,
	0x54, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x44, 0x53, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x09, 0x1a, 0x80, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x08, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x55, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x53, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x03, 0x22,
	0xcc, 0x01, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x49, 0x54,
	0x4c, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x54, 0x46, 0x38, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x53, 0x43, 0x49, 0x49,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x54,
	0x48, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f,
	0x55, 0x52, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x09,
	0x0a, 0x05, 0x4b, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x42, 0x41,
	0x53, 0x45, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0d, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x56, 0x4f, 0x4c, 0x54, 0x10, 0x0e, 0x22, 0x3f,
	0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x44, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x49,
	0x44, 0x44, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22,
	0x98, 0x26, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x61, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xbb, 0x07, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x72, 0x75, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x0c, 0x62, 0x69,
	0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x62, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x13, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x72,
	0x65, 0x61, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52, 0x65, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x55, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x17, 0x72, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x42, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x13, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x72, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x42, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x59, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x72, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x18,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x0f, 0x6d, 0x75, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d,
	0x75, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x55, 0x0a, 0x13,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x1a, 0xf3, 0x0a, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x59, 0x0a,
	0x15, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x13, 0x74, 0x72, 0x69, 0x6d, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x6f, 0x74,
	0x68, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x42, 0x6f, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x1a,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x64, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d,
	0x69, 0x64, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x66, 0x0a, 0x1c, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x64,
	0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x1d, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x72, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x61, 0x72, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x5e, 0x0a, 0x18, 0x6d, 0x69, 0x6e,
	0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61, 0x72, 0x12, 0x5c, 0x0a, 0x17, 0x6d, 0x69, 0x6e,
	0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x12, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x62, 0x0a, 0x1a, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0xfe, 0x0f, 0x0a, 0x06, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x51, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x57, 0x0a, 0x15, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x66, 0x61, 0x73, 0x74, 0x51, 0x52, 0x65,
	0x61, 0x64, 0x73, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x71, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x14, 0x66, 0x61, 0x73, 0x74, 0x51, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x35, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x35, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x15, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x35, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x66, 0x61, 0x73,
	0x74, 0x35, 0x52, 0x65, 0x61, 0x64, 0x73, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x5b,
	0x0a, 0x17, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x35, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x66, 0x61, 0x73, 0x74, 0x35, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x35, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x12, 0x66, 0x61, 0x73, 0x74, 0x35, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x35,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x35,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x61, 0x73, 0x74, 0x51, 0x12, 0x4c, 0x0a, 0x0f, 0x66, 0x61, 0x73,
	0x74, 0x5f, 0x35, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x35,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x77, 0x12, 0x5c, 0x0a, 0x17, 0x66, 0x61, 0x73, 0x74, 0x5f,
	0x35, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x14, 0x66, 0x61, 0x73, 0x74, 0x35, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x62, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x62, 0x61, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5b, 0x0a,
	0x16, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x19, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x71, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x51, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x69, 0x0a, 0x1e,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x72, 0x65, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x69, 0x0a, 0x1e, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x51, 0x0a, 0x11, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x77,
	0x12, 0x4f, 0x0a, 0x10, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0e, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x56, 0x0a, 0x14, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x12, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x77, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x18, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x62, 0x75,
	0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x1c, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x18, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2a, 0xa2, 0x02, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12,
	0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x10, 0x07, 0x32,
	0x9d, 0x10, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x11, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x63, 0x0a, 0x0c, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x78,
	0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x72, 0x75, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7a, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x72, 0x75, 0x6e, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x72, 0x75, 0x6e, 0x12, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x72, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x72, 0x0a, 0x10, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12,
	0x7e, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12,
	0x7e, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12,
	0x78, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x70, 0x69, 0x32, 0x6d, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x64,
	0x64, 0x45, 0x70, 0x69, 0x32, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x64,
	0x64, 0x45, 0x70, 0x69, 0x32, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x17, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x7f, 0x0a, 0x14, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x98, 0xb5,
	0x18, 0x01, 0x12, 0x76, 0x0a, 0x11, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x71, 0x63, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x51, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x51, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x98, 0xb5, 0x18, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x1a, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0x90, 0x02, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x42,
	0x5c, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65, 0x74,
	0x65, 0x63, 0x68, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x79,
	0x6f, 0x75, 0x72, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minknow_api_protocol_proto_rawDescOnce sync.Once
	file_minknow_api_protocol_proto_rawDescData = file_minknow_api_protocol_proto_rawDesc
)

func file_minknow_api_protocol_proto_rawDescGZIP() []byte {
	file_minknow_api_protocol_proto_rawDescOnce.Do(func() {
		file_minknow_api_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_protocol_proto_rawDescData)
	})
	return file_minknow_api_protocol_proto_rawDescData
}

var file_minknow_api_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_minknow_api_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_minknow_api_protocol_proto_goTypes = []interface{}{
	(ProtocolState)(0),                                  // 0: minknow_api.protocol.ProtocolState
	(BarcodeUserData_SampleType)(0),                     // 1: minknow_api.protocol.BarcodeUserData.SampleType
	(WaitForFinishedRequest_NotificationState)(0),       // 2: minknow_api.protocol.WaitForFinishedRequest.NotificationState
	(ProtocolIdentifierComponents_Location)(0),          // 3: minknow_api.protocol.ProtocolIdentifierComponents.Location
	(ProtocolSetting_Category)(0),                       // 4: minknow_api.protocol.ProtocolSetting.Category
	(ProtocolSetting_Unit)(0),                           // 5: minknow_api.protocol.ProtocolSetting.Unit
	(ProtocolSetting_Visibility)(0),                     // 6: minknow_api.protocol.ProtocolSetting.Visibility
	(ProtocolSetting_Constraint_Condition)(0),           // 7: minknow_api.protocol.ProtocolSetting.Constraint.Condition
	(*BarcodeUserData)(nil),                             // 8: minknow_api.protocol.BarcodeUserData
	(*ProtocolRunUserInfo)(nil),                         // 9: minknow_api.protocol.ProtocolRunUserInfo
	(*StartProtocolRequest)(nil),                        // 10: minknow_api.protocol.StartProtocolRequest
	(*StartProtocolResponse)(nil),                       // 11: minknow_api.protocol.StartProtocolResponse
	(*StopProtocolRequest)(nil),                         // 12: minknow_api.protocol.StopProtocolRequest
	(*StopProtocolResponse)(nil),                        // 13: minknow_api.protocol.StopProtocolResponse
	(*ListProtocolsRequest)(nil),                        // 14: minknow_api.protocol.ListProtocolsRequest
	(*ProtocolInfo)(nil),                                // 15: minknow_api.protocol.ProtocolInfo
	(*ListProtocolsResponse)(nil),                       // 16: minknow_api.protocol.ListProtocolsResponse
	(*WaitForFinishedRequest)(nil),                      // 17: minknow_api.protocol.WaitForFinishedRequest
	(*GetRunInfoRequest)(nil),                           // 18: minknow_api.protocol.GetRunInfoRequest
	(*Epi2MeWorkflowReference)(nil),                     // 19: minknow_api.protocol.Epi2meWorkflowReference
	(*ProtocolRunInfo)(nil),                             // 20: minknow_api.protocol.ProtocolRunInfo
	(*ListProtocolRunsRequest)(nil),                     // 21: minknow_api.protocol.ListProtocolRunsRequest
	(*ListProtocolRunsResponse)(nil),                    // 22: minknow_api.protocol.ListProtocolRunsResponse
	(*GetCurrentProtocolRunRequest)(nil),                // 23: minknow_api.protocol.GetCurrentProtocolRunRequest
	(*GetCurrentProtocolRunResponse)(nil),               // 24: minknow_api.protocol.GetCurrentProtocolRunResponse
	(*WatchCurrentProtocolRunRequest)(nil),              // 25: minknow_api.protocol.WatchCurrentProtocolRunRequest
	(*GetContextInfoRequest)(nil),                       // 26: minknow_api.protocol.GetContextInfoRequest
	(*GetContextInfoResponse)(nil),                      // 27: minknow_api.protocol.GetContextInfoResponse
	(*SetContextInfoRequest)(nil),                       // 28: minknow_api.protocol.SetContextInfoRequest
	(*SetContextInfoResponse)(nil),                      // 29: minknow_api.protocol.SetContextInfoResponse
	(*GetProtocolPurposeRequest)(nil),                   // 30: minknow_api.protocol.GetProtocolPurposeRequest
	(*GetProtocolPurposeResponse)(nil),                  // 31: minknow_api.protocol.GetProtocolPurposeResponse
	(*SetProtocolPurposeRequest)(nil),                   // 32: minknow_api.protocol.SetProtocolPurposeRequest
	(*SetProtocolPurposeResponse)(nil),                  // 33: minknow_api.protocol.SetProtocolPurposeResponse
	(*AddEpi2MeWorkflowRequest)(nil),                    // 34: minknow_api.protocol.AddEpi2meWorkflowRequest
	(*AddEpi2MeWorkflowResponse)(nil),                   // 35: minknow_api.protocol.AddEpi2meWorkflowResponse
	(*ListProtocolGroupIdsRequest)(nil),                 // 36: minknow_api.protocol.ListProtocolGroupIdsRequest
	(*ListProtocolGroupIdsResponse)(nil),                // 37: minknow_api.protocol.ListProtocolGroupIdsResponse
	(*BeginHardwareCheckRequest)(nil),                   // 38: minknow_api.protocol.BeginHardwareCheckRequest
	(*BeginHardwareCheckResponse)(nil),                  // 39: minknow_api.protocol.BeginHardwareCheckResponse
	(*BeginPlatformQcRequest)(nil),                      // 40: minknow_api.protocol.BeginPlatformQcRequest
	(*BeginPlatformQcResponse)(nil),                     // 41: minknow_api.protocol.BeginPlatformQcResponse
	(*ProtocolIdentifierComponents)(nil),                // 42: minknow_api.protocol.ProtocolIdentifierComponents
	(*ListSettingsForProtocolRequest)(nil),              // 43: minknow_api.protocol.ListSettingsForProtocolRequest
	(*ProtocolSetting)(nil),                             // 44: minknow_api.protocol.ProtocolSetting
	(*ListSettingsForProtocolResponse)(nil),             // 45: minknow_api.protocol.ListSettingsForProtocolResponse
	(*ProtocolInfo_TagValue)(nil),                       // 46: minknow_api.protocol.ProtocolInfo.TagValue
	(*ProtocolInfo_TagExtractionResult)(nil),            // 47: minknow_api.protocol.ProtocolInfo.TagExtractionResult
	nil,                                                 // 48: minknow_api.protocol.ProtocolInfo.TagsEntry
	nil,                                                 // 49: minknow_api.protocol.GetContextInfoResponse.ContextInfoEntry
	nil,                                                 // 50: minknow_api.protocol.SetContextInfoRequest.ContextInfoEntry
	(*ProtocolSetting_ProtocolSettingValue)(nil),        // 51: minknow_api.protocol.ProtocolSetting.ProtocolSettingValue
	(*ProtocolSetting_Constraint)(nil),                  // 52: minknow_api.protocol.ProtocolSetting.Constraint
	(*ProtocolSetting_Dependency)(nil),                  // 53: minknow_api.protocol.ProtocolSetting.Dependency
	(*ListSettingsForProtocolResponse_RunOptions)(nil),  // 54: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions
	(*ListSettingsForProtocolResponse_Basecalling)(nil), // 55: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling
	(*ListSettingsForProtocolResponse_Output)(nil),      // 56: minknow_api.protocol.ListSettingsForProtocolResponse.Output
	(*wrapperspb.StringValue)(nil),                      // 57: google.protobuf.StringValue
	(StopRequest_DataAction)(0),                         // 58: minknow_api.acquisition.StopRequest.DataAction
	(*timestamppb.Timestamp)(nil),                       // 59: google.protobuf.Timestamp
	(*GetDeviceInfoResponse)(nil),                       // 60: minknow_api.device.GetDeviceInfoResponse
	(*GetFlowCellInfoResponse)(nil),                     // 61: minknow_api.device.GetFlowCellInfoResponse
	(*WriterConfiguration_ChannelConfiguration)(nil),    // 62: minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
}
var file_minknow_api_protocol_proto_depIdxs = []int32{
	1,   // 0: minknow_api.protocol.BarcodeUserData.type:type_name -> minknow_api.protocol.BarcodeUserData.SampleType
	57,  // 1: minknow_api.protocol.ProtocolRunUserInfo.protocol_group_id:type_name -> google.protobuf.StringValue
	57,  // 2: minknow_api.protocol.ProtocolRunUserInfo.sample_id:type_name -> google.protobuf.StringValue
	8,   // 3: minknow_api.protocol.ProtocolRunUserInfo.barcode_user_info:type_name -> minknow_api.protocol.BarcodeUserData
	9,   // 4: minknow_api.protocol.StartProtocolRequest.user_info:type_name -> minknow_api.protocol.ProtocolRunUserInfo
	58,  // 5: minknow_api.protocol.StopProtocolRequest.data_action_on_stop:type_name -> minknow_api.acquisition.StopRequest.DataAction
	48,  // 6: minknow_api.protocol.ProtocolInfo.tags:type_name -> minknow_api.protocol.ProtocolInfo.TagsEntry
	47,  // 7: minknow_api.protocol.ProtocolInfo.tag_extraction_result:type_name -> minknow_api.protocol.ProtocolInfo.TagExtractionResult
	15,  // 8: minknow_api.protocol.ListProtocolsResponse.protocols:type_name -> minknow_api.protocol.ProtocolInfo
	2,   // 9: minknow_api.protocol.WaitForFinishedRequest.state:type_name -> minknow_api.protocol.WaitForFinishedRequest.NotificationState
	0,   // 10: minknow_api.protocol.ProtocolRunInfo.state:type_name -> minknow_api.protocol.ProtocolState
	59,  // 11: minknow_api.protocol.ProtocolRunInfo.start_time:type_name -> google.protobuf.Timestamp
	59,  // 12: minknow_api.protocol.ProtocolRunInfo.script_end_time:type_name -> google.protobuf.Timestamp
	59,  // 13: minknow_api.protocol.ProtocolRunInfo.end_time:type_name -> google.protobuf.Timestamp
	9,   // 14: minknow_api.protocol.ProtocolRunInfo.user_info:type_name -> minknow_api.protocol.ProtocolRunUserInfo
	19,  // 15: minknow_api.protocol.ProtocolRunInfo.epi2me_workflows:type_name -> minknow_api.protocol.Epi2meWorkflowReference
	60,  // 16: minknow_api.protocol.ProtocolRunInfo.device:type_name -> minknow_api.device.GetDeviceInfoResponse
	61,  // 17: minknow_api.protocol.ProtocolRunInfo.flow_cell:type_name -> minknow_api.device.GetFlowCellInfoResponse
	15,  // 18: minknow_api.protocol.ProtocolRunInfo.meta_info:type_name -> minknow_api.protocol.ProtocolInfo
	20,  // 19: minknow_api.protocol.GetCurrentProtocolRunResponse.run_info:type_name -> minknow_api.protocol.ProtocolRunInfo
	49,  // 20: minknow_api.protocol.GetContextInfoResponse.context_info:type_name -> minknow_api.protocol.GetContextInfoResponse.ContextInfoEntry
	50,  // 21: minknow_api.protocol.SetContextInfoRequest.context_info:type_name -> minknow_api.protocol.SetContextInfoRequest.ContextInfoEntry
	19,  // 22: minknow_api.protocol.AddEpi2meWorkflowRequest.epi2me_workflow:type_name -> minknow_api.protocol.Epi2meWorkflowReference
	3,   // 23: minknow_api.protocol.ProtocolIdentifierComponents.location:type_name -> minknow_api.protocol.ProtocolIdentifierComponents.Location
	42,  // 24: minknow_api.protocol.ListSettingsForProtocolRequest.components:type_name -> minknow_api.protocol.ProtocolIdentifierComponents
	4,   // 25: minknow_api.protocol.ProtocolSetting.category:type_name -> minknow_api.protocol.ProtocolSetting.Category
	5,   // 26: minknow_api.protocol.ProtocolSetting.unit:type_name -> minknow_api.protocol.ProtocolSetting.Unit
	51,  // 27: minknow_api.protocol.ProtocolSetting.default_value:type_name -> minknow_api.protocol.ProtocolSetting.ProtocolSettingValue
	52,  // 28: minknow_api.protocol.ProtocolSetting.constraints:type_name -> minknow_api.protocol.ProtocolSetting.Constraint
	53,  // 29: minknow_api.protocol.ProtocolSetting.dependencies:type_name -> minknow_api.protocol.ProtocolSetting.Dependency
	6,   // 30: minknow_api.protocol.ProtocolSetting.visibility:type_name -> minknow_api.protocol.ProtocolSetting.Visibility
	42,  // 31: minknow_api.protocol.ListSettingsForProtocolResponse.protocol:type_name -> minknow_api.protocol.ProtocolIdentifierComponents
	54,  // 32: minknow_api.protocol.ListSettingsForProtocolResponse.run_options:type_name -> minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions
	55,  // 33: minknow_api.protocol.ListSettingsForProtocolResponse.basecalling:type_name -> minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling
	56,  // 34: minknow_api.protocol.ListSettingsForProtocolResponse.output:type_name -> minknow_api.protocol.ListSettingsForProtocolResponse.Output
	44,  // 35: minknow_api.protocol.ListSettingsForProtocolResponse.protocol_settings:type_name -> minknow_api.protocol.ProtocolSetting
	46,  // 36: minknow_api.protocol.ProtocolInfo.TagsEntry.value:type_name -> minknow_api.protocol.ProtocolInfo.TagValue
	62,  // 37: minknow_api.protocol.ProtocolSetting.ProtocolSettingValue.channels_value:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	7,   // 38: minknow_api.protocol.ProtocolSetting.Constraint.condition:type_name -> minknow_api.protocol.ProtocolSetting.Constraint.Condition
	51,  // 39: minknow_api.protocol.ProtocolSetting.Constraint.value:type_name -> minknow_api.protocol.ProtocolSetting.ProtocolSettingValue
	52,  // 40: minknow_api.protocol.ProtocolSetting.Dependency.constraints:type_name -> minknow_api.protocol.ProtocolSetting.Constraint
	44,  // 41: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.run_length:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 42: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.bias_voltage:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 43: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 44: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_ref_file:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 45: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_channels:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 46: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 47: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 48: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enrichment:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 49: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.active_channel_selection:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 50: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.mux_scan_period:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 51: minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.group_change_period:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 52: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecalling_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 53: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.barcoding_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 54: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecall_model:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 55: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.trim_barcodes_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 56: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.require_barcodes_both_ends:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 57: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.detect_mid_strand_barcodes:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 58: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_mid_barcoding_score:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 59: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_rear_barcoding_score:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 60: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 61: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_rear:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 62: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_mid:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 63: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 64: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_ref_file:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 65: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 66: minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 67: minknow_api.protocol.ListSettingsForProtocolResponse.Output.output_location:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 68: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 69: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_reads_per_file:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 70: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_data_compression:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 71: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 72: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_reads_per_file:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 73: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_trace_table:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 74: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_move_table:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 75: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_fast_q:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 76: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_raw:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 77: minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_compression:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 78: minknow_api.protocol.ListSettingsForProtocolResponse.Output.bam_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 79: minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 80: minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_qscore:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 81: minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_read_length:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 82: minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_max_read_length:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 83: minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 84: minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 85: minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 86: minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 87: minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 88: minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	44,  // 89: minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table_enabled:type_name -> minknow_api.protocol.ProtocolSetting
	10,  // 90: minknow_api.protocol.ProtocolService.start_protocol:input_type -> minknow_api.protocol.StartProtocolRequest
	12,  // 91: minknow_api.protocol.ProtocolService.stop_protocol:input_type -> minknow_api.protocol.StopProtocolRequest
	17,  // 92: minknow_api.protocol.ProtocolService.wait_for_finished:input_type -> minknow_api.protocol.WaitForFinishedRequest
	18,  // 93: minknow_api.protocol.ProtocolService.get_run_info:input_type -> minknow_api.protocol.GetRunInfoRequest
	21,  // 94: minknow_api.protocol.ProtocolService.list_protocol_runs:input_type -> minknow_api.protocol.ListProtocolRunsRequest
	23,  // 95: minknow_api.protocol.ProtocolService.get_current_protocol_run:input_type -> minknow_api.protocol.GetCurrentProtocolRunRequest
	25,  // 96: minknow_api.protocol.ProtocolService.watch_current_protocol_run:input_type -> minknow_api.protocol.WatchCurrentProtocolRunRequest
	14,  // 97: minknow_api.protocol.ProtocolService.list_protocols:input_type -> minknow_api.protocol.ListProtocolsRequest
	26,  // 98: minknow_api.protocol.ProtocolService.get_context_info:input_type -> minknow_api.protocol.GetContextInfoRequest
	28,  // 99: minknow_api.protocol.ProtocolService.set_context_info:input_type -> minknow_api.protocol.SetContextInfoRequest
	30,  // 100: minknow_api.protocol.ProtocolService.get_protocol_purpose:input_type -> minknow_api.protocol.GetProtocolPurposeRequest
	32,  // 101: minknow_api.protocol.ProtocolService.set_protocol_purpose:input_type -> minknow_api.protocol.SetProtocolPurposeRequest
	34,  // 102: minknow_api.protocol.ProtocolService.add_epi2me_workflow:input_type -> minknow_api.protocol.AddEpi2meWorkflowRequest
	36,  // 103: minknow_api.protocol.ProtocolService.list_protocol_group_ids:input_type -> minknow_api.protocol.ListProtocolGroupIdsRequest
	38,  // 104: minknow_api.protocol.ProtocolService.begin_hardware_check:input_type -> minknow_api.protocol.BeginHardwareCheckRequest
	40,  // 105: minknow_api.protocol.ProtocolService.begin_platform_qc:input_type -> minknow_api.protocol.BeginPlatformQcRequest
	43,  // 106: minknow_api.protocol.ProtocolService.list_settings_for_protocol:input_type -> minknow_api.protocol.ListSettingsForProtocolRequest
	11,  // 107: minknow_api.protocol.ProtocolService.start_protocol:output_type -> minknow_api.protocol.StartProtocolResponse
	13,  // 108: minknow_api.protocol.ProtocolService.stop_protocol:output_type -> minknow_api.protocol.StopProtocolResponse
	20,  // 109: minknow_api.protocol.ProtocolService.wait_for_finished:output_type -> minknow_api.protocol.ProtocolRunInfo
	20,  // 110: minknow_api.protocol.ProtocolService.get_run_info:output_type -> minknow_api.protocol.ProtocolRunInfo
	22,  // 111: minknow_api.protocol.ProtocolService.list_protocol_runs:output_type -> minknow_api.protocol.ListProtocolRunsResponse
	20,  // 112: minknow_api.protocol.ProtocolService.get_current_protocol_run:output_type -> minknow_api.protocol.ProtocolRunInfo
	20,  // 113: minknow_api.protocol.ProtocolService.watch_current_protocol_run:output_type -> minknow_api.protocol.ProtocolRunInfo
	16,  // 114: minknow_api.protocol.ProtocolService.list_protocols:output_type -> minknow_api.protocol.ListProtocolsResponse
	27,  // 115: minknow_api.protocol.ProtocolService.get_context_info:output_type -> minknow_api.protocol.GetContextInfoResponse
	29,  // 116: minknow_api.protocol.ProtocolService.set_context_info:output_type -> minknow_api.protocol.SetContextInfoResponse
	31,  // 117: minknow_api.protocol.ProtocolService.get_protocol_purpose:output_type -> minknow_api.protocol.GetProtocolPurposeResponse
	33,  // 118: minknow_api.protocol.ProtocolService.set_protocol_purpose:output_type -> minknow_api.protocol.SetProtocolPurposeResponse
	35,  // 119: minknow_api.protocol.ProtocolService.add_epi2me_workflow:output_type -> minknow_api.protocol.AddEpi2meWorkflowResponse
	37,  // 120: minknow_api.protocol.ProtocolService.list_protocol_group_ids:output_type -> minknow_api.protocol.ListProtocolGroupIdsResponse
	39,  // 121: minknow_api.protocol.ProtocolService.begin_hardware_check:output_type -> minknow_api.protocol.BeginHardwareCheckResponse
	41,  // 122: minknow_api.protocol.ProtocolService.begin_platform_qc:output_type -> minknow_api.protocol.BeginPlatformQcResponse
	45,  // 123: minknow_api.protocol.ProtocolService.list_settings_for_protocol:output_type -> minknow_api.protocol.ListSettingsForProtocolResponse
	107, // [107:124] is the sub-list for method output_type
	90,  // [90:107] is the sub-list for method input_type
	90,  // [90:90] is the sub-list for extension type_name
	90,  // [90:90] is the sub-list for extension extendee
	0,   // [0:90] is the sub-list for field type_name
}

func init() { file_minknow_api_protocol_proto_init() }
func file_minknow_api_protocol_proto_init() {
	if File_minknow_api_protocol_proto != nil {
		return
	}
	file_minknow_api_acquisition_proto_init()
	file_minknow_api_analysis_configuration_proto_init()
	file_minknow_api_device_proto_init()
	file_minknow_api_rpc_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarcodeUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolRunUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProtocolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProtocolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProtocolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProtocolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epi2MeWorkflowReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolRunInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentProtocolRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentProtocolRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchCurrentProtocolRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContextInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContextInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetContextInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetContextInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProtocolPurposeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProtocolPurposeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProtocolPurposeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProtocolPurposeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEpi2MeWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEpi2MeWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolGroupIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolGroupIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginHardwareCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginHardwareCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginPlatformQcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginPlatformQcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolIdentifierComponents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSettingsForProtocolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSettingsForProtocolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfo_TagValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfo_TagExtractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolSetting_ProtocolSettingValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolSetting_Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolSetting_Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSettingsForProtocolResponse_RunOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSettingsForProtocolResponse_Basecalling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_protocol_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSettingsForProtocolResponse_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minknow_api_protocol_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*ListSettingsForProtocolRequest_Identifier)(nil),
		(*ListSettingsForProtocolRequest_Components)(nil),
	}
	file_minknow_api_protocol_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*ProtocolInfo_TagValue_StringValue)(nil),
		(*ProtocolInfo_TagValue_BoolValue)(nil),
		(*ProtocolInfo_TagValue_IntValue)(nil),
		(*ProtocolInfo_TagValue_DoubleValue)(nil),
		(*ProtocolInfo_TagValue_ArrayValue)(nil),
		(*ProtocolInfo_TagValue_ObjectValue)(nil),
	}
	file_minknow_api_protocol_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*ProtocolSetting_ProtocolSettingValue_StringValue)(nil),
		(*ProtocolSetting_ProtocolSettingValue_FloatValue)(nil),
		(*ProtocolSetting_ProtocolSettingValue_IntegerValue)(nil),
		(*ProtocolSetting_ProtocolSettingValue_BoolValue)(nil),
		(*ProtocolSetting_ProtocolSettingValue_ChannelsValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_protocol_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_protocol_proto_goTypes,
		DependencyIndexes: file_minknow_api_protocol_proto_depIdxs,
		EnumInfos:         file_minknow_api_protocol_proto_enumTypes,
		MessageInfos:      file_minknow_api_protocol_proto_msgTypes,
	}.Build()
	File_minknow_api_protocol_proto = out.File
	file_minknow_api_protocol_proto_rawDesc = nil
	file_minknow_api_protocol_proto_goTypes = nil
	file_minknow_api_protocol_proto_depIdxs = nil
}
