// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/device.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the type of flow cell connection.
//
// This means that this determines what flow cells can be inserted.
//
// Since 4.1
type FlowCellConnectorType int32

const (
	// This is the default value when this enum is used in requests, and can be used to indicate
	// that the caller doesn't care about flow cell connection types.
	//
	// It should not be returned by any RPCs (if you do see it returned, you may be using
	// minknow_api from 4.1+ to call RPCs on MinKNOW Core 4.0).
	FlowCellConnectorType_FCCON_NOT_SET FlowCellConnectorType = 0
	// The flow cell position accepts PromethION-style flow cells.
	FlowCellConnectorType_FCCON_PROMETHION FlowCellConnectorType = 1
	// The flow cell position accepts MinION flow cells. MinION Mk1, Mk1B and Mk1C all accept these
	// flow cells, as well as the GridION X5.
	//
	// Note that if a Flongle adapter is inserted, FCCON_FLONGLE will be returned instead.
	FlowCellConnectorType_FCCON_MINION_MK1 FlowCellConnectorType = 2
	// The flow cell position accepts Flongle flow cells.
	//
	// Currently, this means a MinION or GridION with a Flongle adapter inserted.
	FlowCellConnectorType_FCCON_FLONGLE FlowCellConnectorType = 3
)

// Enum value maps for FlowCellConnectorType.
var (
	FlowCellConnectorType_name = map[int32]string{
		0: "FCCON_NOT_SET",
		1: "FCCON_PROMETHION",
		2: "FCCON_MINION_MK1",
		3: "FCCON_FLONGLE",
	}
	FlowCellConnectorType_value = map[string]int32{
		"FCCON_NOT_SET":    0,
		"FCCON_PROMETHION": 1,
		"FCCON_MINION_MK1": 2,
		"FCCON_FLONGLE":    3,
	}
)

func (x FlowCellConnectorType) Enum() *FlowCellConnectorType {
	p := new(FlowCellConnectorType)
	*p = x
	return p
}

func (x FlowCellConnectorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowCellConnectorType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_device_proto_enumTypes[0].Descriptor()
}

func (FlowCellConnectorType) Type() protoreflect.EnumType {
	return &file_minknow_api_device_proto_enumTypes[0]
}

func (x FlowCellConnectorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowCellConnectorType.Descriptor instead.
func (FlowCellConnectorType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{0}
}

type SelectedWell int32

const (
	SelectedWell_WELL_NONE  SelectedWell = 0
	SelectedWell_WELL_1     SelectedWell = 1
	SelectedWell_WELL_2     SelectedWell = 2
	SelectedWell_WELL_3     SelectedWell = 3
	SelectedWell_WELL_4     SelectedWell = 4
	SelectedWell_WELL_OTHER SelectedWell = 5
)

// Enum value maps for SelectedWell.
var (
	SelectedWell_name = map[int32]string{
		0: "WELL_NONE",
		1: "WELL_1",
		2: "WELL_2",
		3: "WELL_3",
		4: "WELL_4",
		5: "WELL_OTHER",
	}
	SelectedWell_value = map[string]int32{
		"WELL_NONE":  0,
		"WELL_1":     1,
		"WELL_2":     2,
		"WELL_3":     3,
		"WELL_4":     4,
		"WELL_OTHER": 5,
	}
)

func (x SelectedWell) Enum() *SelectedWell {
	p := new(SelectedWell)
	*p = x
	return p
}

func (x SelectedWell) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectedWell) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_device_proto_enumTypes[1].Descriptor()
}

func (SelectedWell) Type() protoreflect.EnumType {
	return &file_minknow_api_device_proto_enumTypes[1]
}

func (x SelectedWell) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectedWell.Descriptor instead.
func (SelectedWell) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{1}
}

type GetDeviceInfoResponse_DeviceType int32

const (
	GetDeviceInfoResponse_MINION      GetDeviceInfoResponse_DeviceType = 0
	GetDeviceInfoResponse_GRIDION     GetDeviceInfoResponse_DeviceType = 2
	GetDeviceInfoResponse_PROMETHION  GetDeviceInfoResponse_DeviceType = 3
	GetDeviceInfoResponse_MINION_MK1C GetDeviceInfoResponse_DeviceType = 4
	GetDeviceInfoResponse_TRAXION     GetDeviceInfoResponse_DeviceType = 5
)

// Enum value maps for GetDeviceInfoResponse_DeviceType.
var (
	GetDeviceInfoResponse_DeviceType_name = map[int32]string{
		0: "MINION",
		2: "GRIDION",
		3: "PROMETHION",
		4: "MINION_MK1C",
		5: "TRAXION",
	}
	GetDeviceInfoResponse_DeviceType_value = map[string]int32{
		"MINION":      0,
		"GRIDION":     2,
		"PROMETHION":  3,
		"MINION_MK1C": 4,
		"TRAXION":     5,
	}
)

func (x GetDeviceInfoResponse_DeviceType) Enum() *GetDeviceInfoResponse_DeviceType {
	p := new(GetDeviceInfoResponse_DeviceType)
	*p = x
	return p
}

func (x GetDeviceInfoResponse_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDeviceInfoResponse_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_device_proto_enumTypes[2].Descriptor()
}

func (GetDeviceInfoResponse_DeviceType) Type() protoreflect.EnumType {
	return &file_minknow_api_device_proto_enumTypes[2]
}

func (x GetDeviceInfoResponse_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDeviceInfoResponse_DeviceType.Descriptor instead.
func (GetDeviceInfoResponse_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{3, 0}
}

type GetDeviceStateResponse_DeviceState int32

const (
	GetDeviceStateResponse_DEVICE_DISCONNECTED GetDeviceStateResponse_DeviceState = 0
	GetDeviceStateResponse_DEVICE_READY        GetDeviceStateResponse_DeviceState = 1
)

// Enum value maps for GetDeviceStateResponse_DeviceState.
var (
	GetDeviceStateResponse_DeviceState_name = map[int32]string{
		0: "DEVICE_DISCONNECTED",
		1: "DEVICE_READY",
	}
	GetDeviceStateResponse_DeviceState_value = map[string]int32{
		"DEVICE_DISCONNECTED": 0,
		"DEVICE_READY":        1,
	}
)

func (x GetDeviceStateResponse_DeviceState) Enum() *GetDeviceStateResponse_DeviceState {
	p := new(GetDeviceStateResponse_DeviceState)
	*p = x
	return p
}

func (x GetDeviceStateResponse_DeviceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDeviceStateResponse_DeviceState) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_device_proto_enumTypes[3].Descriptor()
}

func (GetDeviceStateResponse_DeviceState) Type() protoreflect.EnumType {
	return &file_minknow_api_device_proto_enumTypes[3]
}

func (x GetDeviceStateResponse_DeviceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDeviceStateResponse_DeviceState.Descriptor instead.
func (GetDeviceStateResponse_DeviceState) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{5, 0}
}

// Describes the configuration of a channel on the device.
//
// Note that this is a lossy representation. The device-specific APIs provide more precise
// information. This only describes common configurations, and omits anything that doesn't impact
// the received signal.
type ChannelConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The currently-connected well.
	//
	// Wells are counted from 1. 0 indicates that no well is connected. 5 indicates some non-generic configuration
	// such as ground for a minion or connecting all wells on promethion
	//
	// Note that MinKNOW can return channel configurations where the well number is larger than the
	// ``max_well_count`` value returned by :meth:`DeviceService.get_device_info`. This indicates
	// that some other connection has been made (for example, PromethIONs can simultaneously
	// connect all wells, and MinIONs can connect to ground).
	Well uint32 `protobuf:"varint,1,opt,name=well,proto3" json:"well,omitempty"`
	// Whether the test current is connected to the integrator (measurement circuit).
	//
	// The signal will be a steady test current produced on the device. This can be used for
	// calibration or to test the device integration circuits.
	TestCurrent bool `protobuf:"varint,2,opt,name=test_current,json=testCurrent,proto3" json:"test_current,omitempty"`
}

func (x *ChannelConfiguration) Reset() {
	*x = ChannelConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfiguration) ProtoMessage() {}

func (x *ChannelConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfiguration.ProtoReflect.Descriptor instead.
func (*ChannelConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelConfiguration) GetWell() uint32 {
	if x != nil {
		return x.Well
	}
	return 0
}

func (x *ChannelConfiguration) GetTestCurrent() bool {
	if x != nil {
		return x.TestCurrent
	}
	return false
}

// Describes the configuration of a channel on the device.
//
// Note that this is a lossy representation. The device-specific APIs provide more precise
// information. This only describes common configurations, and omits anything that doesn't impact
// the received signal.
type ReturnedChannelConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The currently-connected well.
	//
	// Wells are counted from 1. 0 indicates that no well is connected. 5 indicates some non-generic configuration
	// such as ground for a minion or connecting all wells on promethion
	//
	// Note that MinKNOW can return channel configurations where the well number is larger than the
	// ``max_well_count`` value returned by :meth:`DeviceService.get_device_info`. This indicates
	// that some other connection has been made (for example, PromethIONs can simultaneously
	// connect all wells, and MinIONs can connect to ground).
	Well uint32 `protobuf:"varint,1,opt,name=well,proto3" json:"well,omitempty"`
	// Whether the test current is connected to the integrator (measurement circuit).
	//
	// The signal will be a steady test current produced on the device. This can be used for
	// calibration or to test the device integration circuits.
	TestCurrent bool `protobuf:"varint,2,opt,name=test_current,json=testCurrent,proto3" json:"test_current,omitempty"`
	// Whether the unblock voltage is connected to the integrator (measurement circuit).
	//
	// Provides a reverse potential across the connected well. This can be used to drive molecules
	// back out of the well.
	Unblock bool `protobuf:"varint,4,opt,name=unblock,proto3" json:"unblock,omitempty"`
}

func (x *ReturnedChannelConfiguration) Reset() {
	*x = ReturnedChannelConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnedChannelConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnedChannelConfiguration) ProtoMessage() {}

func (x *ReturnedChannelConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnedChannelConfiguration.ProtoReflect.Descriptor instead.
func (*ReturnedChannelConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{1}
}

func (x *ReturnedChannelConfiguration) GetWell() uint32 {
	if x != nil {
		return x.Well
	}
	return 0
}

func (x *ReturnedChannelConfiguration) GetTestCurrent() bool {
	if x != nil {
		return x.TestCurrent
	}
	return false
}

func (x *ReturnedChannelConfiguration) GetUnblock() bool {
	if x != nil {
		return x.Unblock
	}
	return false
}

type GetDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeviceInfoRequest) Reset() {
	*x = GetDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoRequest) ProtoMessage() {}

func (x *GetDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{2}
}

type GetDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the device.
	//
	// This is the identifier of the device MinKNOW was started for. It will only communicate
	// with this device.
	//
	// Note that simulated device IDs are only unique for this host, not globally.
	//
	// This value will be set even if the device is not currently connected (assuming MinKNOW
	// was started by the manager service).
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The type of the device.
	DeviceType GetDeviceInfoResponse_DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=minknow_api.device.GetDeviceInfoResponse_DeviceType" json:"device_type,omitempty"`
	// Whether the device is simulated.
	//
	// If this is true, there is no physical device - MinKNOW is simluating it. If it is false,
	// MinKNOW will be acquiring data from a real device.
	IsSimulated bool `protobuf:"varint,3,opt,name=is_simulated,json=isSimulated,proto3" json:"is_simulated,omitempty"`
	// The maximum number of channels supported by the device.
	//
	// Each channel provides a signal from the device. For example, a MinION supports up to 512
	// channels, and so can provide 512 simultaneous streams of data.
	//
	// This value is fixed for a given device type. Note, however, that a flow cell might be attached
	// that has a smaller number of channels.
	MaxChannelCount uint32 `protobuf:"varint,4,opt,name=max_channel_count,json=maxChannelCount,proto3" json:"max_channel_count,omitempty"`
	// The maximum number of wells connected to each channel.
	//
	// A well is a discrete location on the device where sensing can take place. Normally, each well
	// should have a single nanopore in it.
	//
	// For example, a MinION supports up to 4 wells per channel, allowing for 2048 wells in total.
	// So the value of this for a MinION will be 4.
	//
	// This value is fixed for a given device type. Note, however, that a flow cell might be attached
	// that has a smaller number of wells on each channel.
	MaxWellsPerChannel uint32 `protobuf:"varint,5,opt,name=max_wells_per_channel,json=maxWellsPerChannel,proto3" json:"max_wells_per_channel,omitempty"`
	// Whether the set_temperature() method can be expected to work.
	//
	// On some systems, not all connected devices have the ability to control their own temperature,
	// as temperature controls are managed in groups. If this field is true, this device can control
	// its own temperature. If it it false, it cannot, and the temperature will be maintained at a
	// pre-determined temperature.
	CanSetTemperature bool `protobuf:"varint,6,opt,name=can_set_temperature,json=canSetTemperature,proto3" json:"can_set_temperature,omitempty"`
	// The range of uncalibrated data values.
	//
	// This is the number of distinct signal values that can be produced by the device's analog to
	// digital converter (ADC).
	Digitisation    uint32                                    `protobuf:"varint,7,opt,name=digitisation,proto3" json:"digitisation,omitempty"`
	FirmwareVersion []*GetDeviceInfoResponse_ComponentVersion `protobuf:"bytes,10,rep,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
}

func (x *GetDeviceInfoResponse) Reset() {
	*x = GetDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoResponse) ProtoMessage() {}

func (x *GetDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{3}
}

func (x *GetDeviceInfoResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *GetDeviceInfoResponse) GetDeviceType() GetDeviceInfoResponse_DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return GetDeviceInfoResponse_MINION
}

func (x *GetDeviceInfoResponse) GetIsSimulated() bool {
	if x != nil {
		return x.IsSimulated
	}
	return false
}

func (x *GetDeviceInfoResponse) GetMaxChannelCount() uint32 {
	if x != nil {
		return x.MaxChannelCount
	}
	return 0
}

func (x *GetDeviceInfoResponse) GetMaxWellsPerChannel() uint32 {
	if x != nil {
		return x.MaxWellsPerChannel
	}
	return 0
}

func (x *GetDeviceInfoResponse) GetCanSetTemperature() bool {
	if x != nil {
		return x.CanSetTemperature
	}
	return false
}

func (x *GetDeviceInfoResponse) GetDigitisation() uint32 {
	if x != nil {
		return x.Digitisation
	}
	return 0
}

func (x *GetDeviceInfoResponse) GetFirmwareVersion() []*GetDeviceInfoResponse_ComponentVersion {
	if x != nil {
		return x.FirmwareVersion
	}
	return nil
}

type GetDeviceStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeviceStateRequest) Reset() {
	*x = GetDeviceStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceStateRequest) ProtoMessage() {}

func (x *GetDeviceStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceStateRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceStateRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{4}
}

type GetDeviceStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the physical hardware is present.
	//
	// This is really only relevant to MinIONs, which could be unplugged by the user at any time.
	DeviceState GetDeviceStateResponse_DeviceState `protobuf:"varint,1,opt,name=device_state,json=deviceState,proto3,enum=minknow_api.device.GetDeviceStateResponse_DeviceState" json:"device_state,omitempty"`
	// Indicates what sort of flow cell can be inserted.
	//
	// For example, if the user needs to set or override the flow cell product code, this can be
	// used to limit the list of possible flow cell product codes to choose from.
	//
	// Since 4.1
	FlowCellConnector FlowCellConnectorType `protobuf:"varint,2,opt,name=flow_cell_connector,json=flowCellConnector,proto3,enum=minknow_api.device.FlowCellConnectorType" json:"flow_cell_connector,omitempty"`
}

func (x *GetDeviceStateResponse) Reset() {
	*x = GetDeviceStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceStateResponse) ProtoMessage() {}

func (x *GetDeviceStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceStateResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceStateResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{5}
}

func (x *GetDeviceStateResponse) GetDeviceState() GetDeviceStateResponse_DeviceState {
	if x != nil {
		return x.DeviceState
	}
	return GetDeviceStateResponse_DEVICE_DISCONNECTED
}

func (x *GetDeviceStateResponse) GetFlowCellConnector() FlowCellConnectorType {
	if x != nil {
		return x.FlowCellConnector
	}
	return FlowCellConnectorType_FCCON_NOT_SET
}

type StreamDeviceStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamDeviceStateRequest) Reset() {
	*x = StreamDeviceStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDeviceStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeviceStateRequest) ProtoMessage() {}

func (x *StreamDeviceStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeviceStateRequest.ProtoReflect.Descriptor instead.
func (*StreamDeviceStateRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{6}
}

type GetFlowCellInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFlowCellInfoRequest) Reset() {
	*x = GetFlowCellInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowCellInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowCellInfoRequest) ProtoMessage() {}

func (x *GetFlowCellInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowCellInfoRequest.ProtoReflect.Descriptor instead.
func (*GetFlowCellInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{7}
}

type GetFlowCellInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether there is a flow cell present.
	//
	// If both this and has_adapter are false, none of the other fields will contain useful
	// information.
	HasFlowCell bool `protobuf:"varint,1,opt,name=has_flow_cell,json=hasFlowCell,proto3" json:"has_flow_cell,omitempty"`
	// The number of channels currently supported by the device.
	//
	// This may be smaller than the ``max_channel_count`` value returned by get_device_info(),
	// depending on the attached flow cell.
	ChannelCount uint32 `protobuf:"varint,2,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
	// The number of wells currently supported by the device.
	//
	// This may be smaller than the ``max_wells_per_channel`` value returned by get_device_info(),
	// depending on the attached flow cell.
	WellsPerChannel uint32 `protobuf:"varint,3,opt,name=wells_per_channel,json=wellsPerChannel,proto3" json:"wells_per_channel,omitempty"`
	// The unique identifier for the flow cell.
	//
	// This should be same as the value printed onto the flow cell casing. Not all flow cells will
	// have the flow cell ID recorded in a way that MinKNOW can read. In those cases, this will be an
	// empty string, even though the user may be able to see a printed identifier on the flow cell.
	FlowCellId string `protobuf:"bytes,4,opt,name=flow_cell_id,json=flowCellId,proto3" json:"flow_cell_id,omitempty"`
	// The unique identifier for the ASIC (formatted as string).
	//
	// This is a value uniquely identifying the ASIC embedded in the flow cell. It will
	// always be set when a flow cell is present.
	//
	// The intended use for this is to track the identity of the asic in the flow cell, eg. for
	// displaying to users during production of chips.
	//
	// Caveats:
	//
	// * This value will not mean anything to a customer.
	// * There is no guarantee that this field will contain the same identifier across
	//   MinKNOW versions, even with the same flow cell.
	// * An ASIC can be recycled into a new flow cell, so this identifier may be re-used in the
	//   future (although it can be considered unique for the duration of a protocol run).
	AsicIdStr string `protobuf:"bytes,13,opt,name=asic_id_str,json=asicIdStr,proto3" json:"asic_id_str,omitempty"`
	// The product code for the flow cell.
	//
	// This should be the code displayed in the shop where the flow cell was bought. Not all
	// flow cells will have the product code recorded in a way that MinKNOW can read. In those cases,
	// this will be an empty string.
	ProductCode string `protobuf:"bytes,6,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// A unique identifier for the flow cell, which the user can specify.
	//
	// In the event a flow cell does not have an eeprom, this field contains data input by the user
	// using set_flow_cell_info to record required data.
	//
	// Only alpha-numeric, space, dash and underscore characters are allowed in this field.
	//
	// Since 1.12
	UserSpecifiedFlowCellId string `protobuf:"bytes,7,opt,name=user_specified_flow_cell_id,json=userSpecifiedFlowCellId,proto3" json:"user_specified_flow_cell_id,omitempty"`
	// A product code for the flow cell, which the user can specify.
	//
	// This should be the code displayed in the shop where the flow cell was bought. Not all
	// flow cells have an eeprom, in the event they don't, the user can specify using this id using
	// set_flow_cell_info.
	//
	// Since 1.12
	UserSpecifiedProductCode string `protobuf:"bytes,8,opt,name=user_specified_product_code,json=userSpecifiedProductCode,proto3" json:"user_specified_product_code,omitempty"`
	// Whether there is a flongle adapter.
	//
	// If this is true, the adapter_id, channel_count and wells_per_channel fields should all
	// provide useful information, even if has_flow_cell is false.
	HasAdapter bool `protobuf:"varint,9,opt,name=has_adapter,json=hasAdapter,proto3" json:"has_adapter,omitempty"`
	// The unique identifier of an attached flongle adatper.
	//
	// This should be same as the value printed onto the adapter casing.
	AdapterId string `protobuf:"bytes,10,opt,name=adapter_id,json=adapterId,proto3" json:"adapter_id,omitempty"`
	// Used to make the field nullable, since the null value is not protobuf's default.
	//
	// Types that are assignable to TemperatureOffsetNullable:
	//	*GetFlowCellInfoResponse_TemperatureOffset
	TemperatureOffsetNullable isGetFlowCellInfoResponse_TemperatureOffsetNullable `protobuf_oneof:"temperature_offset_nullable"`
	// The version of the ASIC contained in the flowcell (if specified by the hardware).
	//
	// This can be used to determine if the hardware should support certain features
	// added to only newer ASICs.
	//
	// Possible values include: "IA02C", "IA02D", or if the value is not readable on the
	// current hardware an empty string is returned.
	//
	// Since 1.14
	AsicVersion string `protobuf:"bytes,12,opt,name=asic_version,json=asicVersion,proto3" json:"asic_version,omitempty"`
}

func (x *GetFlowCellInfoResponse) Reset() {
	*x = GetFlowCellInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowCellInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowCellInfoResponse) ProtoMessage() {}

func (x *GetFlowCellInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowCellInfoResponse.ProtoReflect.Descriptor instead.
func (*GetFlowCellInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{8}
}

func (x *GetFlowCellInfoResponse) GetHasFlowCell() bool {
	if x != nil {
		return x.HasFlowCell
	}
	return false
}

func (x *GetFlowCellInfoResponse) GetChannelCount() uint32 {
	if x != nil {
		return x.ChannelCount
	}
	return 0
}

func (x *GetFlowCellInfoResponse) GetWellsPerChannel() uint32 {
	if x != nil {
		return x.WellsPerChannel
	}
	return 0
}

func (x *GetFlowCellInfoResponse) GetFlowCellId() string {
	if x != nil {
		return x.FlowCellId
	}
	return ""
}

func (x *GetFlowCellInfoResponse) GetAsicIdStr() string {
	if x != nil {
		return x.AsicIdStr
	}
	return ""
}

func (x *GetFlowCellInfoResponse) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *GetFlowCellInfoResponse) GetUserSpecifiedFlowCellId() string {
	if x != nil {
		return x.UserSpecifiedFlowCellId
	}
	return ""
}

func (x *GetFlowCellInfoResponse) GetUserSpecifiedProductCode() string {
	if x != nil {
		return x.UserSpecifiedProductCode
	}
	return ""
}

func (x *GetFlowCellInfoResponse) GetHasAdapter() bool {
	if x != nil {
		return x.HasAdapter
	}
	return false
}

func (x *GetFlowCellInfoResponse) GetAdapterId() string {
	if x != nil {
		return x.AdapterId
	}
	return ""
}

func (m *GetFlowCellInfoResponse) GetTemperatureOffsetNullable() isGetFlowCellInfoResponse_TemperatureOffsetNullable {
	if m != nil {
		return m.TemperatureOffsetNullable
	}
	return nil
}

func (x *GetFlowCellInfoResponse) GetTemperatureOffset() float32 {
	if x, ok := x.GetTemperatureOffsetNullable().(*GetFlowCellInfoResponse_TemperatureOffset); ok {
		return x.TemperatureOffset
	}
	return 0
}

func (x *GetFlowCellInfoResponse) GetAsicVersion() string {
	if x != nil {
		return x.AsicVersion
	}
	return ""
}

type isGetFlowCellInfoResponse_TemperatureOffsetNullable interface {
	isGetFlowCellInfoResponse_TemperatureOffsetNullable()
}

type GetFlowCellInfoResponse_TemperatureOffset struct {
	// The temperature offset for the flow cell, returned as an offset in degrees Celsius.
	//
	// This offset specifies a correction to be applied to ASIC temperature.
	// If multiple ASIC temperatures are available from the device, applies to the mean temperature.
	//
	// Since 1.14
	TemperatureOffset float32 `protobuf:"fixed32,11,opt,name=temperature_offset,json=temperatureOffset,proto3,oneof"`
}

func (*GetFlowCellInfoResponse_TemperatureOffset) isGetFlowCellInfoResponse_TemperatureOffsetNullable() {
}

type StreamFlowCellInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamFlowCellInfoRequest) Reset() {
	*x = StreamFlowCellInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFlowCellInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFlowCellInfoRequest) ProtoMessage() {}

func (x *StreamFlowCellInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFlowCellInfoRequest.ProtoReflect.Descriptor instead.
func (*StreamFlowCellInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{9}
}

type SetUserSpecifiedFlowCellIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the flow cell, which the user can specify.
	//
	// In the event a flow cell does not have an eeprom, this field can be used by the user
	// to record their flow_cell_id.
	//
	// Since 1.12
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SetUserSpecifiedFlowCellIdRequest) Reset() {
	*x = SetUserSpecifiedFlowCellIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserSpecifiedFlowCellIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSpecifiedFlowCellIdRequest) ProtoMessage() {}

func (x *SetUserSpecifiedFlowCellIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSpecifiedFlowCellIdRequest.ProtoReflect.Descriptor instead.
func (*SetUserSpecifiedFlowCellIdRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{10}
}

func (x *SetUserSpecifiedFlowCellIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetUserSpecifiedFlowCellIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserSpecifiedFlowCellIdResponse) Reset() {
	*x = SetUserSpecifiedFlowCellIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserSpecifiedFlowCellIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSpecifiedFlowCellIdResponse) ProtoMessage() {}

func (x *SetUserSpecifiedFlowCellIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSpecifiedFlowCellIdResponse.ProtoReflect.Descriptor instead.
func (*SetUserSpecifiedFlowCellIdResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{11}
}

type SetUserSpecifiedProductCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A product code for the flow cell, which the user can specify.
	//
	// In the event a flow cell does not have an eeprom, the user can specify product code here.
	//
	// Since 1.12
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SetUserSpecifiedProductCodeRequest) Reset() {
	*x = SetUserSpecifiedProductCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserSpecifiedProductCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSpecifiedProductCodeRequest) ProtoMessage() {}

func (x *SetUserSpecifiedProductCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSpecifiedProductCodeRequest.ProtoReflect.Descriptor instead.
func (*SetUserSpecifiedProductCodeRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{12}
}

func (x *SetUserSpecifiedProductCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type SetUserSpecifiedProductCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserSpecifiedProductCodeResponse) Reset() {
	*x = SetUserSpecifiedProductCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserSpecifiedProductCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSpecifiedProductCodeResponse) ProtoMessage() {}

func (x *SetUserSpecifiedProductCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSpecifiedProductCodeResponse.ProtoReflect.Descriptor instead.
func (*SetUserSpecifiedProductCodeResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{13}
}

type GetChannelsLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetChannelsLayoutRequest) Reset() {
	*x = GetChannelsLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsLayoutRequest) ProtoMessage() {}

func (x *GetChannelsLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsLayoutRequest.ProtoReflect.Descriptor instead.
func (*GetChannelsLayoutRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{14}
}

type GetChannelsLayoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelRecords []*ChannelRecord `protobuf:"bytes,1,rep,name=channel_records,json=channelRecords,proto3" json:"channel_records,omitempty"`
}

func (x *GetChannelsLayoutResponse) Reset() {
	*x = GetChannelsLayoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsLayoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsLayoutResponse) ProtoMessage() {}

func (x *GetChannelsLayoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsLayoutResponse.ProtoReflect.Descriptor instead.
func (*GetChannelsLayoutResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{15}
}

func (x *GetChannelsLayoutResponse) GetChannelRecords() []*ChannelRecord {
	if x != nil {
		return x.ChannelRecords
	}
	return nil
}

type ChannelRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MuxRecords []*ChannelRecord_MuxRecord `protobuf:"bytes,3,rep,name=mux_records,json=muxRecords,proto3" json:"mux_records,omitempty"`
}

func (x *ChannelRecord) Reset() {
	*x = ChannelRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRecord) ProtoMessage() {}

func (x *ChannelRecord) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRecord.ProtoReflect.Descriptor instead.
func (*ChannelRecord) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{16}
}

func (x *ChannelRecord) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelRecord) GetMuxRecords() []*ChannelRecord_MuxRecord {
	if x != nil {
		return x.MuxRecords
	}
	return nil
}

type ResetDeviceSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetDeviceSettingsRequest) Reset() {
	*x = ResetDeviceSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetDeviceSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetDeviceSettingsRequest) ProtoMessage() {}

func (x *ResetDeviceSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetDeviceSettingsRequest.ProtoReflect.Descriptor instead.
func (*ResetDeviceSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{17}
}

type ResetDeviceSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetDeviceSettingsResponse) Reset() {
	*x = ResetDeviceSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetDeviceSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetDeviceSettingsResponse) ProtoMessage() {}

func (x *ResetDeviceSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetDeviceSettingsResponse.ProtoReflect.Descriptor instead.
func (*ResetDeviceSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{18}
}

type SetCalibrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first channel included in calibration data.
	//
	// This must always be 1. This is required in order to make sure the client and MinKNOW agree on
	// what data is being provided.
	FirstChannel uint32 `protobuf:"varint,1,opt,name=first_channel,json=firstChannel,proto3" json:"first_channel,omitempty"`
	// The last channel included in calibration data.
	//
	// This must always be the same as the channel count returned by
	// :meth:`get_flow_cell_info`. This is required in order to make
	// sure the client and MinKNOW agree on what data is being provided.
	LastChannel uint32 `protobuf:"varint,2,opt,name=last_channel,json=lastChannel,proto3" json:"last_channel,omitempty"`
	// The ADC value adjustment to reach 0pA on each channel.
	//
	// This is ``-x``, where ``x`` is the (mean) ADC value at 0pA.
	Offsets []float32 `protobuf:"fixed32,3,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	// The range of possible pA values that can be produced by the device.
	PaRanges []float32 `protobuf:"fixed32,4,rep,packed,name=pa_ranges,json=paRanges,proto3" json:"pa_ranges,omitempty"`
}

func (x *SetCalibrationRequest) Reset() {
	*x = SetCalibrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCalibrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCalibrationRequest) ProtoMessage() {}

func (x *SetCalibrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCalibrationRequest.ProtoReflect.Descriptor instead.
func (*SetCalibrationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{19}
}

func (x *SetCalibrationRequest) GetFirstChannel() uint32 {
	if x != nil {
		return x.FirstChannel
	}
	return 0
}

func (x *SetCalibrationRequest) GetLastChannel() uint32 {
	if x != nil {
		return x.LastChannel
	}
	return 0
}

func (x *SetCalibrationRequest) GetOffsets() []float32 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *SetCalibrationRequest) GetPaRanges() []float32 {
	if x != nil {
		return x.PaRanges
	}
	return nil
}

type SetCalibrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetCalibrationResponse) Reset() {
	*x = SetCalibrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCalibrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCalibrationResponse) ProtoMessage() {}

func (x *SetCalibrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCalibrationResponse.ProtoReflect.Descriptor instead.
func (*SetCalibrationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{20}
}

type ClearCalibrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearCalibrationRequest) Reset() {
	*x = ClearCalibrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearCalibrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearCalibrationRequest) ProtoMessage() {}

func (x *ClearCalibrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearCalibrationRequest.ProtoReflect.Descriptor instead.
func (*ClearCalibrationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{21}
}

type ClearCalibrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearCalibrationResponse) Reset() {
	*x = ClearCalibrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearCalibrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearCalibrationResponse) ProtoMessage() {}

func (x *ClearCalibrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearCalibrationResponse.ProtoReflect.Descriptor instead.
func (*ClearCalibrationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{22}
}

type GetCalibrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first channel to get calibration data for.
	//
	// This should normally be 1.
	FirstChannel uint32 `protobuf:"varint,1,opt,name=first_channel,json=firstChannel,proto3" json:"first_channel,omitempty"`
	// The last channel included in calibration data.
	//
	// This should normally be the channel count returned by
	// :meth:`get_flow_cell_info`.
	LastChannel uint32 `protobuf:"varint,2,opt,name=last_channel,json=lastChannel,proto3" json:"last_channel,omitempty"`
}

func (x *GetCalibrationRequest) Reset() {
	*x = GetCalibrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalibrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalibrationRequest) ProtoMessage() {}

func (x *GetCalibrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalibrationRequest.ProtoReflect.Descriptor instead.
func (*GetCalibrationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{23}
}

func (x *GetCalibrationRequest) GetFirstChannel() uint32 {
	if x != nil {
		return x.FirstChannel
	}
	return 0
}

func (x *GetCalibrationRequest) GetLastChannel() uint32 {
	if x != nil {
		return x.LastChannel
	}
	return 0
}

type GetCalibrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range of possible ADC values that can be produced by the device.
	//
	// This is the same as the digitisation value returned by the
	// :meth:`DeviceService.get_device_info` RPC. It is included here for convenience.
	Digitisation uint32 `protobuf:"varint,1,opt,name=digitisation,proto3" json:"digitisation,omitempty"`
	// The ADC value adjustment to reach 0pA on each channel.
	//
	// This is ``-x``, where ``x`` is the (mean) ADC value at 0pA.
	Offsets []float32 `protobuf:"fixed32,2,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	// The range of possible pA values that can be produced on each channel.
	//
	// The change in pA represented by a change of 1 ADC can be calculated by dividing the
	// digitisation by this value.
	PaRanges []float32 `protobuf:"fixed32,3,rep,packed,name=pa_ranges,json=paRanges,proto3" json:"pa_ranges,omitempty"`
	// Find if there is a stored calibration, or if the returned response is empty.
	//
	// Since 1.12
	HasCalibration bool `protobuf:"varint,4,opt,name=has_calibration,json=hasCalibration,proto3" json:"has_calibration,omitempty"`
}

func (x *GetCalibrationResponse) Reset() {
	*x = GetCalibrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalibrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalibrationResponse) ProtoMessage() {}

func (x *GetCalibrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalibrationResponse.ProtoReflect.Descriptor instead.
func (*GetCalibrationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{24}
}

func (x *GetCalibrationResponse) GetDigitisation() uint32 {
	if x != nil {
		return x.Digitisation
	}
	return 0
}

func (x *GetCalibrationResponse) GetOffsets() []float32 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *GetCalibrationResponse) GetPaRanges() []float32 {
	if x != nil {
		return x.PaRanges
	}
	return nil
}

func (x *GetCalibrationResponse) GetHasCalibration() bool {
	if x != nil {
		return x.HasCalibration
	}
	return false
}

type SetTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The desired temperature in degrees Celsius.
	//
	// If temperature control is supported and enabled, the device will attempt to keep its
	// temperature at this value. See the ``can_set_temperature`` field returned by the
	// DeviceService.get_device_info() RPC.
	Temperature float32 `protobuf:"fixed32,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Settings which can be specified in order to wait for the temperature to be reached.
	//
	// If this is not set at all, not waiting will be done. If it is set (even to an empty
	// WaitForTemperatureSettings object), the call will not return until either the temperature was
	// reached or the timeout was reached. In this case, on MinIONs and GridIONs, the ASIC power
	// will be enabled if it was not already. See acquisition.StopRequest.keep_power_on for more
	// details about the implications of this.
	//
	// Since 1.15
	WaitForTemperature *SetTemperatureRequest_WaitForTemperatureSettings `protobuf:"bytes,2,opt,name=wait_for_temperature,json=waitForTemperature,proto3" json:"wait_for_temperature,omitempty"`
}

func (x *SetTemperatureRequest) Reset() {
	*x = SetTemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTemperatureRequest) ProtoMessage() {}

func (x *SetTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTemperatureRequest.ProtoReflect.Descriptor instead.
func (*SetTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{25}
}

func (x *SetTemperatureRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *SetTemperatureRequest) GetWaitForTemperature() *SetTemperatureRequest_WaitForTemperatureSettings {
	if x != nil {
		return x.WaitForTemperature
	}
	return nil
}

type SetTemperatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Find if we hit a timeout waiting for the temperature to be hit.
	TimedOutWaitingForTemperature bool `protobuf:"varint,1,opt,name=timed_out_waiting_for_temperature,json=timedOutWaitingForTemperature,proto3" json:"timed_out_waiting_for_temperature,omitempty"`
}

func (x *SetTemperatureResponse) Reset() {
	*x = SetTemperatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTemperatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTemperatureResponse) ProtoMessage() {}

func (x *SetTemperatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTemperatureResponse.ProtoReflect.Descriptor instead.
func (*SetTemperatureResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{26}
}

func (x *SetTemperatureResponse) GetTimedOutWaitingForTemperature() bool {
	if x != nil {
		return x.TimedOutWaitingForTemperature
	}
	return false
}

type GetTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTemperatureRequest) Reset() {
	*x = GetTemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemperatureRequest) ProtoMessage() {}

func (x *GetTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemperatureRequest.ProtoReflect.Descriptor instead.
func (*GetTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{27}
}

type GetTemperatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Temperature:
	//	*GetTemperatureResponse_Minion
	//	*GetTemperatureResponse_Promethion
	Temperature isGetTemperatureResponse_Temperature `protobuf_oneof:"temperature"`
	// Return the temperature target the device is aiming to reach.
	//
	// Since 1.15
	TargetTemperature *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=target_temperature,json=targetTemperature,proto3" json:"target_temperature,omitempty"`
}

func (x *GetTemperatureResponse) Reset() {
	*x = GetTemperatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemperatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemperatureResponse) ProtoMessage() {}

func (x *GetTemperatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemperatureResponse.ProtoReflect.Descriptor instead.
func (*GetTemperatureResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{28}
}

func (m *GetTemperatureResponse) GetTemperature() isGetTemperatureResponse_Temperature {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (x *GetTemperatureResponse) GetMinion() *GetTemperatureResponse_MinIONTemperature {
	if x, ok := x.GetTemperature().(*GetTemperatureResponse_Minion); ok {
		return x.Minion
	}
	return nil
}

func (x *GetTemperatureResponse) GetPromethion() *GetTemperatureResponse_PromethIONTemperature {
	if x, ok := x.GetTemperature().(*GetTemperatureResponse_Promethion); ok {
		return x.Promethion
	}
	return nil
}

func (x *GetTemperatureResponse) GetTargetTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.TargetTemperature
	}
	return nil
}

type isGetTemperatureResponse_Temperature interface {
	isGetTemperatureResponse_Temperature()
}

type GetTemperatureResponse_Minion struct {
	Minion *GetTemperatureResponse_MinIONTemperature `protobuf:"bytes,1,opt,name=minion,proto3,oneof"`
}

type GetTemperatureResponse_Promethion struct {
	Promethion *GetTemperatureResponse_PromethIONTemperature `protobuf:"bytes,2,opt,name=promethion,proto3,oneof"`
}

func (*GetTemperatureResponse_Minion) isGetTemperatureResponse_Temperature() {}

func (*GetTemperatureResponse_Promethion) isGetTemperatureResponse_Temperature() {}

type StreamTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How often temperature updates should be sent
	// Defaults to a period of 1 second, if not specified, or set to 0
	PeriodSeconds uint32 `protobuf:"varint,1,opt,name=period_seconds,json=periodSeconds,proto3" json:"period_seconds,omitempty"`
}

func (x *StreamTemperatureRequest) Reset() {
	*x = StreamTemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTemperatureRequest) ProtoMessage() {}

func (x *StreamTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTemperatureRequest.ProtoReflect.Descriptor instead.
func (*StreamTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{29}
}

func (x *StreamTemperatureRequest) GetPeriodSeconds() uint32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

type UnblockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of channels indexed from 1.
	Channels []uint32 `protobuf:"varint,1,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	// How long should an unblock last.
	//
	// Types that are assignable to Duration:
	//	*UnblockRequest_DurationInSeconds
	//	*UnblockRequest_DurationInMilliseconds
	Duration isUnblockRequest_Duration `protobuf_oneof:"duration"`
}

func (x *UnblockRequest) Reset() {
	*x = UnblockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockRequest) ProtoMessage() {}

func (x *UnblockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockRequest.ProtoReflect.Descriptor instead.
func (*UnblockRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{30}
}

func (x *UnblockRequest) GetChannels() []uint32 {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (m *UnblockRequest) GetDuration() isUnblockRequest_Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (x *UnblockRequest) GetDurationInSeconds() uint32 {
	if x, ok := x.GetDuration().(*UnblockRequest_DurationInSeconds); ok {
		return x.DurationInSeconds
	}
	return 0
}

func (x *UnblockRequest) GetDurationInMilliseconds() uint32 {
	if x, ok := x.GetDuration().(*UnblockRequest_DurationInMilliseconds); ok {
		return x.DurationInMilliseconds
	}
	return 0
}

type isUnblockRequest_Duration interface {
	isUnblockRequest_Duration()
}

type UnblockRequest_DurationInSeconds struct {
	DurationInSeconds uint32 `protobuf:"varint,2,opt,name=duration_in_seconds,json=durationInSeconds,proto3,oneof"`
}

type UnblockRequest_DurationInMilliseconds struct {
	DurationInMilliseconds uint32 `protobuf:"varint,3,opt,name=duration_in_milliseconds,json=durationInMilliseconds,proto3,oneof"`
}

func (*UnblockRequest_DurationInSeconds) isUnblockRequest_Duration() {}

func (*UnblockRequest_DurationInMilliseconds) isUnblockRequest_Duration() {}

type UnblockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnblockResponse) Reset() {
	*x = UnblockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockResponse) ProtoMessage() {}

func (x *UnblockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockResponse.ProtoReflect.Descriptor instead.
func (*UnblockResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{31}
}

type CancelUnblocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelUnblocksRequest) Reset() {
	*x = CancelUnblocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelUnblocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUnblocksRequest) ProtoMessage() {}

func (x *CancelUnblocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUnblocksRequest.ProtoReflect.Descriptor instead.
func (*CancelUnblocksRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{32}
}

type CancelUnblocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of unblocks which have been cancelled as part of this request.
	//
	// Should return the total number of unblock operations which have been cancelled.
	//
	CancelledUnblocks uint32 `protobuf:"varint,1,opt,name=cancelled_unblocks,json=cancelledUnblocks,proto3" json:"cancelled_unblocks,omitempty"`
}

func (x *CancelUnblocksResponse) Reset() {
	*x = CancelUnblocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelUnblocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUnblocksResponse) ProtoMessage() {}

func (x *CancelUnblocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUnblocksResponse.ProtoReflect.Descriptor instead.
func (*CancelUnblocksResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{33}
}

func (x *CancelUnblocksResponse) GetCancelledUnblocks() uint32 {
	if x != nil {
		return x.CancelledUnblocks
	}
	return 0
}

type GetChannelConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of channel names (1-indexed) to specify what channels to get channel configs for
	//
	// Will return an error if any of the channel names are below 1, or above the channel count value
	// returned from :meth:`get_flow_cell_info`
	Channels []uint32 `protobuf:"varint,1,rep,packed,name=channels,proto3" json:"channels,omitempty"`
}

func (x *GetChannelConfigurationRequest) Reset() {
	*x = GetChannelConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelConfigurationRequest) ProtoMessage() {}

func (x *GetChannelConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetChannelConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{34}
}

func (x *GetChannelConfigurationRequest) GetChannels() []uint32 {
	if x != nil {
		return x.Channels
	}
	return nil
}

type GetChannelConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of channel configurations
	//
	// The order of channel configurations matches the channel order specified by :attribute:`channels`
	// in the request message
	ChannelConfigurations []*ReturnedChannelConfiguration `protobuf:"bytes,1,rep,name=channel_configurations,json=channelConfigurations,proto3" json:"channel_configurations,omitempty"`
}

func (x *GetChannelConfigurationResponse) Reset() {
	*x = GetChannelConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelConfigurationResponse) ProtoMessage() {}

func (x *GetChannelConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{35}
}

func (x *GetChannelConfigurationResponse) GetChannelConfigurations() []*ReturnedChannelConfiguration {
	if x != nil {
		return x.ChannelConfigurations
	}
	return nil
}

type SetChannelConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map between <channel name, config to set>
	//
	// Will return an error if any of the key values (representing channel names) are below 1, or
	// above the channel count value returned from :meth:`get_flow_cell_info`
	//
	// The selected well cannot be set to WELL_OTHER, and will error if it tries to do so
	//
	// DEPRECATED: Note that the type to set may change from 4.0 to enforce the fact that
	// unblock cannot be set through this call
	ChannelConfigurations map[uint32]*ChannelConfiguration `protobuf:"bytes,1,rep,name=channel_configurations,json=channelConfigurations,proto3" json:"channel_configurations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetChannelConfigurationRequest) Reset() {
	*x = SetChannelConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelConfigurationRequest) ProtoMessage() {}

func (x *SetChannelConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelConfigurationRequest.ProtoReflect.Descriptor instead.
func (*SetChannelConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{36}
}

func (x *SetChannelConfigurationRequest) GetChannelConfigurations() map[uint32]*ChannelConfiguration {
	if x != nil {
		return x.ChannelConfigurations
	}
	return nil
}

type SetChannelConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetChannelConfigurationResponse) Reset() {
	*x = SetChannelConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelConfigurationResponse) ProtoMessage() {}

func (x *SetChannelConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelConfigurationResponse.ProtoReflect.Descriptor instead.
func (*SetChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{37}
}

type SetChannelConfigurationAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelConfiguration *ChannelConfiguration `protobuf:"bytes,1,opt,name=channel_configuration,json=channelConfiguration,proto3" json:"channel_configuration,omitempty"`
}

func (x *SetChannelConfigurationAllRequest) Reset() {
	*x = SetChannelConfigurationAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelConfigurationAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelConfigurationAllRequest) ProtoMessage() {}

func (x *SetChannelConfigurationAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelConfigurationAllRequest.ProtoReflect.Descriptor instead.
func (*SetChannelConfigurationAllRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{38}
}

func (x *SetChannelConfigurationAllRequest) GetChannelConfiguration() *ChannelConfiguration {
	if x != nil {
		return x.ChannelConfiguration
	}
	return nil
}

type SetChannelConfigurationAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetChannelConfigurationAllResponse) Reset() {
	*x = SetChannelConfigurationAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelConfigurationAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelConfigurationAllResponse) ProtoMessage() {}

func (x *SetChannelConfigurationAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelConfigurationAllResponse.ProtoReflect.Descriptor instead.
func (*SetChannelConfigurationAllResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{39}
}

type SaturationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Settings for saturation count thresholds, this controls how long a
	// saturated value must be over limit before the channel is turned off.
	//
	// If not specified, the previous thresholds are kept.
	Thresholds *SaturationConfig_Thresholds `protobuf:"bytes,1,opt,name=thresholds,proto3" json:"thresholds,omitempty"`
	// Settings for software saturation, specified in adc units of the device.
	//
	// If not specified, the previous thresholds are kept.
	SoftwareSaturation *SaturationConfig_SoftwareSaturation `protobuf:"bytes,2,opt,name=software_saturation,json=softwareSaturation,proto3" json:"software_saturation,omitempty"`
	// Settings for user threshold saturation, specified in pA.
	//
	// If not specified, the previous thresholds are kept.
	UserThresholdSaturation *SaturationConfig_UserThresholdSaturation `protobuf:"bytes,3,opt,name=user_threshold_saturation,json=userThresholdSaturation,proto3" json:"user_threshold_saturation,omitempty"`
}

func (x *SaturationConfig) Reset() {
	*x = SaturationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaturationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaturationConfig) ProtoMessage() {}

func (x *SaturationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaturationConfig.ProtoReflect.Descriptor instead.
func (*SaturationConfig) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{40}
}

func (x *SaturationConfig) GetThresholds() *SaturationConfig_Thresholds {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

func (x *SaturationConfig) GetSoftwareSaturation() *SaturationConfig_SoftwareSaturation {
	if x != nil {
		return x.SoftwareSaturation
	}
	return nil
}

func (x *SaturationConfig) GetUserThresholdSaturation() *SaturationConfig_UserThresholdSaturation {
	if x != nil {
		return x.UserThresholdSaturation
	}
	return nil
}

type SetSaturationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *SaturationConfig `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *SetSaturationConfigRequest) Reset() {
	*x = SetSaturationConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSaturationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSaturationConfigRequest) ProtoMessage() {}

func (x *SetSaturationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSaturationConfigRequest.ProtoReflect.Descriptor instead.
func (*SetSaturationConfigRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{41}
}

func (x *SetSaturationConfigRequest) GetSettings() *SaturationConfig {
	if x != nil {
		return x.Settings
	}
	return nil
}

type SetSaturationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSaturationConfigResponse) Reset() {
	*x = SetSaturationConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSaturationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSaturationConfigResponse) ProtoMessage() {}

func (x *SetSaturationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSaturationConfigResponse.ProtoReflect.Descriptor instead.
func (*SetSaturationConfigResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{42}
}

type GetSaturationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSaturationConfigRequest) Reset() {
	*x = GetSaturationConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSaturationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSaturationConfigRequest) ProtoMessage() {}

func (x *GetSaturationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSaturationConfigRequest.ProtoReflect.Descriptor instead.
func (*GetSaturationConfigRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{43}
}

type GetSaturationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *SaturationConfig `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *GetSaturationConfigResponse) Reset() {
	*x = GetSaturationConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSaturationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSaturationConfigResponse) ProtoMessage() {}

func (x *GetSaturationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSaturationConfigResponse.ProtoReflect.Descriptor instead.
func (*GetSaturationConfigResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{44}
}

func (x *GetSaturationConfigResponse) GetSettings() *SaturationConfig {
	if x != nil {
		return x.Settings
	}
	return nil
}

type GetSampleRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSampleRateRequest) Reset() {
	*x = GetSampleRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleRateRequest) ProtoMessage() {}

func (x *GetSampleRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleRateRequest.ProtoReflect.Descriptor instead.
func (*GetSampleRateRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{45}
}

type GetSampleRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
}

func (x *GetSampleRateResponse) Reset() {
	*x = GetSampleRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSampleRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSampleRateResponse) ProtoMessage() {}

func (x *GetSampleRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSampleRateResponse.ProtoReflect.Descriptor instead.
func (*GetSampleRateResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{46}
}

func (x *GetSampleRateResponse) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

type SetSampleRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
}

func (x *SetSampleRateRequest) Reset() {
	*x = SetSampleRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSampleRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSampleRateRequest) ProtoMessage() {}

func (x *SetSampleRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSampleRateRequest.ProtoReflect.Descriptor instead.
func (*SetSampleRateRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{47}
}

func (x *SetSampleRateRequest) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

type SetSampleRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The real sample rate is the actual sample rate that is set on the device, which
	// may be different from the actual value passed into the rpc.
	//
	// For example on promethion, when it is given a sample rate, it will round to the nearest
	// 1000. So 1499 becomes 1000 and 1500 becomes 2000 real sample rate
	//
	// For a minion, the actual sample rate is determined via 3 separate values; clock speed,
	// integration time and clock divider, and so not all values are possible. e.g. setting 3000
	// will return 3012 real sample rate. See 'sampling_frequency' in MinionDeviceService for a
	// slightly more in depth explanation
	RealSampleRate uint32 `protobuf:"varint,1,opt,name=real_sample_rate,json=realSampleRate,proto3" json:"real_sample_rate,omitempty"`
}

func (x *SetSampleRateResponse) Reset() {
	*x = SetSampleRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSampleRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSampleRateResponse) ProtoMessage() {}

func (x *SetSampleRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSampleRateResponse.ProtoReflect.Descriptor instead.
func (*SetSampleRateResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{48}
}

func (x *SetSampleRateResponse) GetRealSampleRate() uint32 {
	if x != nil {
		return x.RealSampleRate
	}
	return 0
}

type GetBiasVoltageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBiasVoltageRequest) Reset() {
	*x = GetBiasVoltageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBiasVoltageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBiasVoltageRequest) ProtoMessage() {}

func (x *GetBiasVoltageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBiasVoltageRequest.ProtoReflect.Descriptor instead.
func (*GetBiasVoltageRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{49}
}

type GetBiasVoltageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiasVoltage float64 `protobuf:"fixed64,1,opt,name=bias_voltage,json=biasVoltage,proto3" json:"bias_voltage,omitempty"`
}

func (x *GetBiasVoltageResponse) Reset() {
	*x = GetBiasVoltageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBiasVoltageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBiasVoltageResponse) ProtoMessage() {}

func (x *GetBiasVoltageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBiasVoltageResponse.ProtoReflect.Descriptor instead.
func (*GetBiasVoltageResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{50}
}

func (x *GetBiasVoltageResponse) GetBiasVoltage() float64 {
	if x != nil {
		return x.BiasVoltage
	}
	return 0
}

type SetBiasVoltageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiasVoltage float64 `protobuf:"fixed64,1,opt,name=bias_voltage,json=biasVoltage,proto3" json:"bias_voltage,omitempty"`
}

func (x *SetBiasVoltageRequest) Reset() {
	*x = SetBiasVoltageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBiasVoltageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBiasVoltageRequest) ProtoMessage() {}

func (x *SetBiasVoltageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBiasVoltageRequest.ProtoReflect.Descriptor instead.
func (*SetBiasVoltageRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{51}
}

func (x *SetBiasVoltageRequest) GetBiasVoltage() float64 {
	if x != nil {
		return x.BiasVoltage
	}
	return 0
}

type SetBiasVoltageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBiasVoltageResponse) Reset() {
	*x = SetBiasVoltageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBiasVoltageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBiasVoltageResponse) ProtoMessage() {}

func (x *SetBiasVoltageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBiasVoltageResponse.ProtoReflect.Descriptor instead.
func (*SetBiasVoltageResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{52}
}

// Firmware versions and serial-numbers of components associated with this device
//
// Depending on the hardware, there may be several components associated with
// this device, each with their own firmware version and serial-number. Not all
// components have serial-numbers.
type GetDeviceInfoResponse_ComponentVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the component that has firmware
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// The firmware version, if this cannot be determined for a component where
	// the firmware version would usually be available, this will contain
	// "Unknown"
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The serial-number of a component. If this in not applicable to the
	// type of component or cannot be read at the current time, then this
	// field will be blank.
	SerialNumber string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *GetDeviceInfoResponse_ComponentVersion) Reset() {
	*x = GetDeviceInfoResponse_ComponentVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoResponse_ComponentVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoResponse_ComponentVersion) ProtoMessage() {}

func (x *GetDeviceInfoResponse_ComponentVersion) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoResponse_ComponentVersion.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoResponse_ComponentVersion) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetDeviceInfoResponse_ComponentVersion) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *GetDeviceInfoResponse_ComponentVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetDeviceInfoResponse_ComponentVersion) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type ChannelRecord_MuxRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PhysX uint32 `protobuf:"varint,2,opt,name=phys_x,json=physX,proto3" json:"phys_x,omitempty"`
	PhysY uint32 `protobuf:"varint,3,opt,name=phys_y,json=physY,proto3" json:"phys_y,omitempty"`
}

func (x *ChannelRecord_MuxRecord) Reset() {
	*x = ChannelRecord_MuxRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRecord_MuxRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRecord_MuxRecord) ProtoMessage() {}

func (x *ChannelRecord_MuxRecord) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRecord_MuxRecord.ProtoReflect.Descriptor instead.
func (*ChannelRecord_MuxRecord) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ChannelRecord_MuxRecord) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelRecord_MuxRecord) GetPhysX() uint32 {
	if x != nil {
		return x.PhysX
	}
	return 0
}

func (x *ChannelRecord_MuxRecord) GetPhysY() uint32 {
	if x != nil {
		return x.PhysY
	}
	return 0
}

type SetTemperatureRequest_WaitForTemperatureSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum duration (in seconds) to wait for the device to reach temperature.
	//
	// Not specifying a value will wait for a maximum of 5 minutes.
	Timeout uint32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Minimum duration (in seconds) that the reported temperature must be
	// continually within the target temperature range, before the device is
	// considered to have reached temperature.
	//
	// A value of zero means that the device will be considered to have reached temperature
	// as soon as the reported temperature is equal to the target temperature.
	//
	// Not specifying a value is equivalent to specifying a value of zero.
	//
	// The min_stable_duration must be less than or equal to the timeout duration
	// (if it were greater, then the temperature would never be read as 'stable' before
	// the time-out occurred).
	//
	// Since 3.4
	MinStableDuration uint32 `protobuf:"varint,3,opt,name=min_stable_duration,json=minStableDuration,proto3" json:"min_stable_duration,omitempty"`
	// Specify an optional tolerance to apply to the wait.
	//
	// For example, if the target temperature is 35, and the tolerance is 1
	// any temperature in the range 34 - 36 will cause the request to return.
	//
	// Default is 0.5 degree tolerance.
	Tolerance float32 `protobuf:"fixed32,2,opt,name=tolerance,proto3" json:"tolerance,omitempty"`
}

func (x *SetTemperatureRequest_WaitForTemperatureSettings) Reset() {
	*x = SetTemperatureRequest_WaitForTemperatureSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTemperatureRequest_WaitForTemperatureSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTemperatureRequest_WaitForTemperatureSettings) ProtoMessage() {}

func (x *SetTemperatureRequest_WaitForTemperatureSettings) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTemperatureRequest_WaitForTemperatureSettings.ProtoReflect.Descriptor instead.
func (*SetTemperatureRequest_WaitForTemperatureSettings) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{25, 0}
}

func (x *SetTemperatureRequest_WaitForTemperatureSettings) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SetTemperatureRequest_WaitForTemperatureSettings) GetMinStableDuration() uint32 {
	if x != nil {
		return x.MinStableDuration
	}
	return 0
}

func (x *SetTemperatureRequest_WaitForTemperatureSettings) GetTolerance() float32 {
	if x != nil {
		return x.Tolerance
	}
	return 0
}

// Packet of temperatures appropriate for a MinION.
type GetTemperatureResponse_MinIONTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temperature as measured by the probe inside the asic.
	AsicTemperature *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=asic_temperature,json=asicTemperature,proto3" json:"asic_temperature,omitempty"`
	// Temperature as measured by the probe in the minion heatsink.
	HeatsinkTemperature *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=heatsink_temperature,json=heatsinkTemperature,proto3" json:"heatsink_temperature,omitempty"`
}

func (x *GetTemperatureResponse_MinIONTemperature) Reset() {
	*x = GetTemperatureResponse_MinIONTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemperatureResponse_MinIONTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemperatureResponse_MinIONTemperature) ProtoMessage() {}

func (x *GetTemperatureResponse_MinIONTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemperatureResponse_MinIONTemperature.ProtoReflect.Descriptor instead.
func (*GetTemperatureResponse_MinIONTemperature) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{28, 0}
}

func (x *GetTemperatureResponse_MinIONTemperature) GetAsicTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.AsicTemperature
	}
	return nil
}

func (x *GetTemperatureResponse_MinIONTemperature) GetHeatsinkTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.HeatsinkTemperature
	}
	return nil
}

// Packet of temperatures appropriate for a PromethION.
type GetTemperatureResponse_PromethIONTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temperature as measured by thermistor TH2 on the P-Chip.
	FlowcellTemperature *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=flowcell_temperature,json=flowcellTemperature,proto3" json:"flowcell_temperature,omitempty"`
	// Mean of 12 pixel-blocks temperatures measured with sensors in the ASIC.
	ChamberTemperature *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=chamber_temperature,json=chamberTemperature,proto3" json:"chamber_temperature,omitempty"`
}

func (x *GetTemperatureResponse_PromethIONTemperature) Reset() {
	*x = GetTemperatureResponse_PromethIONTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemperatureResponse_PromethIONTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemperatureResponse_PromethIONTemperature) ProtoMessage() {}

func (x *GetTemperatureResponse_PromethIONTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemperatureResponse_PromethIONTemperature.ProtoReflect.Descriptor instead.
func (*GetTemperatureResponse_PromethIONTemperature) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{28, 1}
}

func (x *GetTemperatureResponse_PromethIONTemperature) GetFlowcellTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.FlowcellTemperature
	}
	return nil
}

func (x *GetTemperatureResponse_PromethIONTemperature) GetChamberTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.ChamberTemperature
	}
	return nil
}

// The thresholds define how many over limit samples
// are required to trigger saturation on the device.
//
// Each packet of frames minknow receive is delivered to the saturation
// check (in approx 64 frame chunks), only the first frame of each packet is inspected.
// The thresolds control how many _packets_ must be outside the valid range.
// ie. if general_threshold is set to 10, at least 640 frames are
// required to trigger saturation.
//
// It is also possible to not define the value to never
// trigger saturation in this config.
type SaturationConfig_Thresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Threshold for software saturation on all non-unblock muxes
	GeneralThreshold *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=general_threshold,json=generalThreshold,proto3" json:"general_threshold,omitempty"`
	// Threshold for software saturation on unblock muxes
	UnblockThreshold *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=unblock_threshold,json=unblockThreshold,proto3" json:"unblock_threshold,omitempty"`
	// Threshold for user threshold  saturation on all non-unblock muxes
	UserGeneralThreshold *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=user_general_threshold,json=userGeneralThreshold,proto3" json:"user_general_threshold,omitempty"`
	// Threshold for user threshold saturation on unblock muxes
	UserUnblockThreshold *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=user_unblock_threshold,json=userUnblockThreshold,proto3" json:"user_unblock_threshold,omitempty"`
}

func (x *SaturationConfig_Thresholds) Reset() {
	*x = SaturationConfig_Thresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaturationConfig_Thresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaturationConfig_Thresholds) ProtoMessage() {}

func (x *SaturationConfig_Thresholds) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaturationConfig_Thresholds.ProtoReflect.Descriptor instead.
func (*SaturationConfig_Thresholds) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{40, 0}
}

func (x *SaturationConfig_Thresholds) GetGeneralThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.GeneralThreshold
	}
	return nil
}

func (x *SaturationConfig_Thresholds) GetUnblockThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.UnblockThreshold
	}
	return nil
}

func (x *SaturationConfig_Thresholds) GetUserGeneralThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.UserGeneralThreshold
	}
	return nil
}

func (x *SaturationConfig_Thresholds) GetUserUnblockThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.UserUnblockThreshold
	}
	return nil
}

// The ranges specify the actual pA or ADC ranges which will trigger saturation.
// This range is checked against the first sample in each delivered packet.
//
// software saturation is specified in adc units
type SaturationConfig_SoftwareSaturation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to enable or disable software saturation.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The minimum adc value that is not a saturation.
	//
	// If this value is not specified, the previous value is kept.
	SoftwareMinAdc *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=software_min_adc,json=softwareMinAdc,proto3" json:"software_min_adc,omitempty"`
	// The maximum adc value that is not a saturation.
	//
	// If this value is not specified, the previous value is kept.
	SoftwareMaxAdc *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=software_max_adc,json=softwareMaxAdc,proto3" json:"software_max_adc,omitempty"`
}

func (x *SaturationConfig_SoftwareSaturation) Reset() {
	*x = SaturationConfig_SoftwareSaturation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaturationConfig_SoftwareSaturation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaturationConfig_SoftwareSaturation) ProtoMessage() {}

func (x *SaturationConfig_SoftwareSaturation) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaturationConfig_SoftwareSaturation.ProtoReflect.Descriptor instead.
func (*SaturationConfig_SoftwareSaturation) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{40, 1}
}

func (x *SaturationConfig_SoftwareSaturation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SaturationConfig_SoftwareSaturation) GetSoftwareMinAdc() *wrapperspb.Int32Value {
	if x != nil {
		return x.SoftwareMinAdc
	}
	return nil
}

func (x *SaturationConfig_SoftwareSaturation) GetSoftwareMaxAdc() *wrapperspb.Int32Value {
	if x != nil {
		return x.SoftwareMaxAdc
	}
	return nil
}

// User threshold is specified in pico amps
type SaturationConfig_UserThresholdSaturation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to enable or disable software saturation.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The minimum pA value that is not a saturation.
	//
	// If this value is not specified, the previous value is kept.
	UserThresholdMinPa *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=user_threshold_min_pa,json=userThresholdMinPa,proto3" json:"user_threshold_min_pa,omitempty"`
	// The maximum pA value that is not a saturation.
	//
	// If this value is not specified, the previous value is kept.
	UserThresholdMaxPa *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=user_threshold_max_pa,json=userThresholdMaxPa,proto3" json:"user_threshold_max_pa,omitempty"`
}

func (x *SaturationConfig_UserThresholdSaturation) Reset() {
	*x = SaturationConfig_UserThresholdSaturation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_device_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaturationConfig_UserThresholdSaturation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaturationConfig_UserThresholdSaturation) ProtoMessage() {}

func (x *SaturationConfig_UserThresholdSaturation) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_device_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaturationConfig_UserThresholdSaturation.ProtoReflect.Descriptor instead.
func (*SaturationConfig_UserThresholdSaturation) Descriptor() ([]byte, []int) {
	return file_minknow_api_device_proto_rawDescGZIP(), []int{40, 2}
}

func (x *SaturationConfig_UserThresholdSaturation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SaturationConfig_UserThresholdSaturation) GetUserThresholdMinPa() *wrapperspb.FloatValue {
	if x != nil {
		return x.UserThresholdMinPa
	}
	return nil
}

func (x *SaturationConfig_UserThresholdSaturation) GetUserThresholdMaxPa() *wrapperspb.FloatValue {
	if x != nil {
		return x.UserThresholdMaxPa
	}
	return nil
}

var File_minknow_api_device_proto protoreflect.FileDescriptor

var file_minknow_api_device_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1d,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a,
	0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x1c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x6c, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x16, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8e, 0x05, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x65, 0x6c, 0x6c, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x57, 0x65, 0x6c, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x69, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x6f, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x53, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x52, 0x49, 0x44, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x4d,
	0x45, 0x54, 0x48, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4e, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4b, 0x31, 0x43, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x41,
	0x58, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x88, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x66,
	0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x38, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xa3, 0x04, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x77, 0x65, 0x6c, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x69, 0x63, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x69, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24,
	0x0a, 0x22, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x75, 0x78, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d,
	0x75, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x6d, 0x75, 0x78, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x1a, 0x49, 0x0a, 0x09, 0x4d, 0x75, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x68, 0x79, 0x73, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x70, 0x68, 0x79, 0x73, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x68, 0x79, 0x73,
	0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x68, 0x79, 0x73, 0x59, 0x22,
	0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a,
	0x15, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88,
	0xb5, 0x18, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x42, 0x04, 0x88, 0xb5, 0x18,
	0x01, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x42, 0x04, 0x88,
	0xb5, 0x18, 0x01, 0x52, 0x08, 0x70, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x69,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x70, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x76, 0x0a, 0x14, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x77, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x84,
	0x01, 0x0a, 0x1a, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x21, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x95, 0x05, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x49, 0x4f, 0x4e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x49, 0x4f, 0x4e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x49, 0x4f, 0x4e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x68, 0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x49,
	0x4f, 0x4e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a,
	0x14, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65,
	0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a,
	0x13, 0x63, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x41, 0x0a, 0x18, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xa6, 0x01,
	0x0a, 0x0e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a,
	0x0a, 0x18, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x16, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x47, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x3c, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x16, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x72, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a,
	0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x14, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x08, 0x0a, 0x10, 0x53, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a,
	0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x68,
	0x0a, 0x13, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xca, 0x02, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x12, 0x49, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x11,
	0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a,
	0xbc, 0x01, 0x0a, 0x12, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x45, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x64, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x41, 0x64, 0x63, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x64, 0x63, 0x1a, 0xd3,
	0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d,
	0x69, 0x6e, 0x50, 0x61, 0x12, 0x4e, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d,
	0x61, 0x78, 0x50, 0x61, 0x22, 0x64, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65,
	0x74, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x16,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x22, 0x3d, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88,
	0xb5, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x41, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x69, 0x61,
	0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x42,
	0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x62,
	0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x69, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x43, 0x43, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x43, 0x43, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x45, 0x54,
	0x48, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x43, 0x43, 0x4f, 0x4e, 0x5f,
	0x4d, 0x49, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4b, 0x31, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x43, 0x43, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x03, 0x2a,
	0x5d, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x65, 0x6c, 0x6c, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45,
	0x4c, 0x4c, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x33,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x32, 0xcb,
	0x18, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x6b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x6e, 0x0a,
	0x10, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x76, 0x0a,
	0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7a, 0x0a, 0x15, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x97, 0x01,
	0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x77, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x2c,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x7d, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12,
	0x6d, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x73,
	0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x02, 0x12, 0x6d, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x01, 0x12, 0x6d, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x02, 0x12, 0x6d, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x75, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x6e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x22, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x02, 0x12, 0x93, 0x01, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x7a, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x01, 0x12, 0x6b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12,
	0x6b, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x6e, 0x0a, 0x10,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x6e, 0x0a, 0x10,
	0x73, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x42, 0x5c, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x63, 0x68,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75, 0x72,
	0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_minknow_api_device_proto_rawDescOnce sync.Once
	file_minknow_api_device_proto_rawDescData = file_minknow_api_device_proto_rawDesc
)

func file_minknow_api_device_proto_rawDescGZIP() []byte {
	file_minknow_api_device_proto_rawDescOnce.Do(func() {
		file_minknow_api_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_device_proto_rawDescData)
	})
	return file_minknow_api_device_proto_rawDescData
}

var file_minknow_api_device_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_minknow_api_device_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_minknow_api_device_proto_goTypes = []interface{}{
	(FlowCellConnectorType)(0),                               // 0: minknow_api.device.FlowCellConnectorType
	(SelectedWell)(0),                                        // 1: minknow_api.device.SelectedWell
	(GetDeviceInfoResponse_DeviceType)(0),                    // 2: minknow_api.device.GetDeviceInfoResponse.DeviceType
	(GetDeviceStateResponse_DeviceState)(0),                  // 3: minknow_api.device.GetDeviceStateResponse.DeviceState
	(*ChannelConfiguration)(nil),                             // 4: minknow_api.device.ChannelConfiguration
	(*ReturnedChannelConfiguration)(nil),                     // 5: minknow_api.device.ReturnedChannelConfiguration
	(*GetDeviceInfoRequest)(nil),                             // 6: minknow_api.device.GetDeviceInfoRequest
	(*GetDeviceInfoResponse)(nil),                            // 7: minknow_api.device.GetDeviceInfoResponse
	(*GetDeviceStateRequest)(nil),                            // 8: minknow_api.device.GetDeviceStateRequest
	(*GetDeviceStateResponse)(nil),                           // 9: minknow_api.device.GetDeviceStateResponse
	(*StreamDeviceStateRequest)(nil),                         // 10: minknow_api.device.StreamDeviceStateRequest
	(*GetFlowCellInfoRequest)(nil),                           // 11: minknow_api.device.GetFlowCellInfoRequest
	(*GetFlowCellInfoResponse)(nil),                          // 12: minknow_api.device.GetFlowCellInfoResponse
	(*StreamFlowCellInfoRequest)(nil),                        // 13: minknow_api.device.StreamFlowCellInfoRequest
	(*SetUserSpecifiedFlowCellIdRequest)(nil),                // 14: minknow_api.device.SetUserSpecifiedFlowCellIdRequest
	(*SetUserSpecifiedFlowCellIdResponse)(nil),               // 15: minknow_api.device.SetUserSpecifiedFlowCellIdResponse
	(*SetUserSpecifiedProductCodeRequest)(nil),               // 16: minknow_api.device.SetUserSpecifiedProductCodeRequest
	(*SetUserSpecifiedProductCodeResponse)(nil),              // 17: minknow_api.device.SetUserSpecifiedProductCodeResponse
	(*GetChannelsLayoutRequest)(nil),                         // 18: minknow_api.device.GetChannelsLayoutRequest
	(*GetChannelsLayoutResponse)(nil),                        // 19: minknow_api.device.GetChannelsLayoutResponse
	(*ChannelRecord)(nil),                                    // 20: minknow_api.device.ChannelRecord
	(*ResetDeviceSettingsRequest)(nil),                       // 21: minknow_api.device.ResetDeviceSettingsRequest
	(*ResetDeviceSettingsResponse)(nil),                      // 22: minknow_api.device.ResetDeviceSettingsResponse
	(*SetCalibrationRequest)(nil),                            // 23: minknow_api.device.SetCalibrationRequest
	(*SetCalibrationResponse)(nil),                           // 24: minknow_api.device.SetCalibrationResponse
	(*ClearCalibrationRequest)(nil),                          // 25: minknow_api.device.ClearCalibrationRequest
	(*ClearCalibrationResponse)(nil),                         // 26: minknow_api.device.ClearCalibrationResponse
	(*GetCalibrationRequest)(nil),                            // 27: minknow_api.device.GetCalibrationRequest
	(*GetCalibrationResponse)(nil),                           // 28: minknow_api.device.GetCalibrationResponse
	(*SetTemperatureRequest)(nil),                            // 29: minknow_api.device.SetTemperatureRequest
	(*SetTemperatureResponse)(nil),                           // 30: minknow_api.device.SetTemperatureResponse
	(*GetTemperatureRequest)(nil),                            // 31: minknow_api.device.GetTemperatureRequest
	(*GetTemperatureResponse)(nil),                           // 32: minknow_api.device.GetTemperatureResponse
	(*StreamTemperatureRequest)(nil),                         // 33: minknow_api.device.StreamTemperatureRequest
	(*UnblockRequest)(nil),                                   // 34: minknow_api.device.UnblockRequest
	(*UnblockResponse)(nil),                                  // 35: minknow_api.device.UnblockResponse
	(*CancelUnblocksRequest)(nil),                            // 36: minknow_api.device.CancelUnblocksRequest
	(*CancelUnblocksResponse)(nil),                           // 37: minknow_api.device.CancelUnblocksResponse
	(*GetChannelConfigurationRequest)(nil),                   // 38: minknow_api.device.GetChannelConfigurationRequest
	(*GetChannelConfigurationResponse)(nil),                  // 39: minknow_api.device.GetChannelConfigurationResponse
	(*SetChannelConfigurationRequest)(nil),                   // 40: minknow_api.device.SetChannelConfigurationRequest
	(*SetChannelConfigurationResponse)(nil),                  // 41: minknow_api.device.SetChannelConfigurationResponse
	(*SetChannelConfigurationAllRequest)(nil),                // 42: minknow_api.device.SetChannelConfigurationAllRequest
	(*SetChannelConfigurationAllResponse)(nil),               // 43: minknow_api.device.SetChannelConfigurationAllResponse
	(*SaturationConfig)(nil),                                 // 44: minknow_api.device.SaturationConfig
	(*SetSaturationConfigRequest)(nil),                       // 45: minknow_api.device.SetSaturationConfigRequest
	(*SetSaturationConfigResponse)(nil),                      // 46: minknow_api.device.SetSaturationConfigResponse
	(*GetSaturationConfigRequest)(nil),                       // 47: minknow_api.device.GetSaturationConfigRequest
	(*GetSaturationConfigResponse)(nil),                      // 48: minknow_api.device.GetSaturationConfigResponse
	(*GetSampleRateRequest)(nil),                             // 49: minknow_api.device.GetSampleRateRequest
	(*GetSampleRateResponse)(nil),                            // 50: minknow_api.device.GetSampleRateResponse
	(*SetSampleRateRequest)(nil),                             // 51: minknow_api.device.SetSampleRateRequest
	(*SetSampleRateResponse)(nil),                            // 52: minknow_api.device.SetSampleRateResponse
	(*GetBiasVoltageRequest)(nil),                            // 53: minknow_api.device.GetBiasVoltageRequest
	(*GetBiasVoltageResponse)(nil),                           // 54: minknow_api.device.GetBiasVoltageResponse
	(*SetBiasVoltageRequest)(nil),                            // 55: minknow_api.device.SetBiasVoltageRequest
	(*SetBiasVoltageResponse)(nil),                           // 56: minknow_api.device.SetBiasVoltageResponse
	(*GetDeviceInfoResponse_ComponentVersion)(nil),           // 57: minknow_api.device.GetDeviceInfoResponse.ComponentVersion
	(*ChannelRecord_MuxRecord)(nil),                          // 58: minknow_api.device.ChannelRecord.MuxRecord
	(*SetTemperatureRequest_WaitForTemperatureSettings)(nil), // 59: minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings
	(*GetTemperatureResponse_MinIONTemperature)(nil),         // 60: minknow_api.device.GetTemperatureResponse.MinIONTemperature
	(*GetTemperatureResponse_PromethIONTemperature)(nil),     // 61: minknow_api.device.GetTemperatureResponse.PromethIONTemperature
	nil,                                 // 62: minknow_api.device.SetChannelConfigurationRequest.ChannelConfigurationsEntry
	(*SaturationConfig_Thresholds)(nil), // 63: minknow_api.device.SaturationConfig.Thresholds
	(*SaturationConfig_SoftwareSaturation)(nil),      // 64: minknow_api.device.SaturationConfig.SoftwareSaturation
	(*SaturationConfig_UserThresholdSaturation)(nil), // 65: minknow_api.device.SaturationConfig.UserThresholdSaturation
	(*wrapperspb.FloatValue)(nil),                    // 66: google.protobuf.FloatValue
	(*wrapperspb.UInt32Value)(nil),                   // 67: google.protobuf.UInt32Value
	(*wrapperspb.Int32Value)(nil),                    // 68: google.protobuf.Int32Value
}
var file_minknow_api_device_proto_depIdxs = []int32{
	2,  // 0: minknow_api.device.GetDeviceInfoResponse.device_type:type_name -> minknow_api.device.GetDeviceInfoResponse.DeviceType
	57, // 1: minknow_api.device.GetDeviceInfoResponse.firmware_version:type_name -> minknow_api.device.GetDeviceInfoResponse.ComponentVersion
	3,  // 2: minknow_api.device.GetDeviceStateResponse.device_state:type_name -> minknow_api.device.GetDeviceStateResponse.DeviceState
	0,  // 3: minknow_api.device.GetDeviceStateResponse.flow_cell_connector:type_name -> minknow_api.device.FlowCellConnectorType
	20, // 4: minknow_api.device.GetChannelsLayoutResponse.channel_records:type_name -> minknow_api.device.ChannelRecord
	58, // 5: minknow_api.device.ChannelRecord.mux_records:type_name -> minknow_api.device.ChannelRecord.MuxRecord
	59, // 6: minknow_api.device.SetTemperatureRequest.wait_for_temperature:type_name -> minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings
	60, // 7: minknow_api.device.GetTemperatureResponse.minion:type_name -> minknow_api.device.GetTemperatureResponse.MinIONTemperature
	61, // 8: minknow_api.device.GetTemperatureResponse.promethion:type_name -> minknow_api.device.GetTemperatureResponse.PromethIONTemperature
	66, // 9: minknow_api.device.GetTemperatureResponse.target_temperature:type_name -> google.protobuf.FloatValue
	5,  // 10: minknow_api.device.GetChannelConfigurationResponse.channel_configurations:type_name -> minknow_api.device.ReturnedChannelConfiguration
	62, // 11: minknow_api.device.SetChannelConfigurationRequest.channel_configurations:type_name -> minknow_api.device.SetChannelConfigurationRequest.ChannelConfigurationsEntry
	4,  // 12: minknow_api.device.SetChannelConfigurationAllRequest.channel_configuration:type_name -> minknow_api.device.ChannelConfiguration
	63, // 13: minknow_api.device.SaturationConfig.thresholds:type_name -> minknow_api.device.SaturationConfig.Thresholds
	64, // 14: minknow_api.device.SaturationConfig.software_saturation:type_name -> minknow_api.device.SaturationConfig.SoftwareSaturation
	65, // 15: minknow_api.device.SaturationConfig.user_threshold_saturation:type_name -> minknow_api.device.SaturationConfig.UserThresholdSaturation
	44, // 16: minknow_api.device.SetSaturationConfigRequest.settings:type_name -> minknow_api.device.SaturationConfig
	44, // 17: minknow_api.device.GetSaturationConfigResponse.settings:type_name -> minknow_api.device.SaturationConfig
	66, // 18: minknow_api.device.GetTemperatureResponse.MinIONTemperature.asic_temperature:type_name -> google.protobuf.FloatValue
	66, // 19: minknow_api.device.GetTemperatureResponse.MinIONTemperature.heatsink_temperature:type_name -> google.protobuf.FloatValue
	66, // 20: minknow_api.device.GetTemperatureResponse.PromethIONTemperature.flowcell_temperature:type_name -> google.protobuf.FloatValue
	66, // 21: minknow_api.device.GetTemperatureResponse.PromethIONTemperature.chamber_temperature:type_name -> google.protobuf.FloatValue
	4,  // 22: minknow_api.device.SetChannelConfigurationRequest.ChannelConfigurationsEntry.value:type_name -> minknow_api.device.ChannelConfiguration
	67, // 23: minknow_api.device.SaturationConfig.Thresholds.general_threshold:type_name -> google.protobuf.UInt32Value
	67, // 24: minknow_api.device.SaturationConfig.Thresholds.unblock_threshold:type_name -> google.protobuf.UInt32Value
	67, // 25: minknow_api.device.SaturationConfig.Thresholds.user_general_threshold:type_name -> google.protobuf.UInt32Value
	67, // 26: minknow_api.device.SaturationConfig.Thresholds.user_unblock_threshold:type_name -> google.protobuf.UInt32Value
	68, // 27: minknow_api.device.SaturationConfig.SoftwareSaturation.software_min_adc:type_name -> google.protobuf.Int32Value
	68, // 28: minknow_api.device.SaturationConfig.SoftwareSaturation.software_max_adc:type_name -> google.protobuf.Int32Value
	66, // 29: minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_min_pa:type_name -> google.protobuf.FloatValue
	66, // 30: minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_max_pa:type_name -> google.protobuf.FloatValue
	6,  // 31: minknow_api.device.DeviceService.get_device_info:input_type -> minknow_api.device.GetDeviceInfoRequest
	8,  // 32: minknow_api.device.DeviceService.get_device_state:input_type -> minknow_api.device.GetDeviceStateRequest
	10, // 33: minknow_api.device.DeviceService.stream_device_state:input_type -> minknow_api.device.StreamDeviceStateRequest
	11, // 34: minknow_api.device.DeviceService.get_flow_cell_info:input_type -> minknow_api.device.GetFlowCellInfoRequest
	13, // 35: minknow_api.device.DeviceService.stream_flow_cell_info:input_type -> minknow_api.device.StreamFlowCellInfoRequest
	14, // 36: minknow_api.device.DeviceService.set_user_specified_flow_cell_id:input_type -> minknow_api.device.SetUserSpecifiedFlowCellIdRequest
	16, // 37: minknow_api.device.DeviceService.set_user_specified_product_code:input_type -> minknow_api.device.SetUserSpecifiedProductCodeRequest
	18, // 38: minknow_api.device.DeviceService.get_channels_layout:input_type -> minknow_api.device.GetChannelsLayoutRequest
	21, // 39: minknow_api.device.DeviceService.reset_device_settings:input_type -> minknow_api.device.ResetDeviceSettingsRequest
	23, // 40: minknow_api.device.DeviceService.set_calibration:input_type -> minknow_api.device.SetCalibrationRequest
	25, // 41: minknow_api.device.DeviceService.clear_calibration:input_type -> minknow_api.device.ClearCalibrationRequest
	27, // 42: minknow_api.device.DeviceService.get_calibration:input_type -> minknow_api.device.GetCalibrationRequest
	29, // 43: minknow_api.device.DeviceService.set_temperature:input_type -> minknow_api.device.SetTemperatureRequest
	31, // 44: minknow_api.device.DeviceService.get_temperature:input_type -> minknow_api.device.GetTemperatureRequest
	33, // 45: minknow_api.device.DeviceService.stream_temperature:input_type -> minknow_api.device.StreamTemperatureRequest
	34, // 46: minknow_api.device.DeviceService.unblock:input_type -> minknow_api.device.UnblockRequest
	36, // 47: minknow_api.device.DeviceService.cancel_unblocks:input_type -> minknow_api.device.CancelUnblocksRequest
	38, // 48: minknow_api.device.DeviceService.get_channel_configuration:input_type -> minknow_api.device.GetChannelConfigurationRequest
	40, // 49: minknow_api.device.DeviceService.set_channel_configuration:input_type -> minknow_api.device.SetChannelConfigurationRequest
	42, // 50: minknow_api.device.DeviceService.set_channel_configuration_all:input_type -> minknow_api.device.SetChannelConfigurationAllRequest
	45, // 51: minknow_api.device.DeviceService.set_saturation_config:input_type -> minknow_api.device.SetSaturationConfigRequest
	47, // 52: minknow_api.device.DeviceService.get_saturation_config:input_type -> minknow_api.device.GetSaturationConfigRequest
	49, // 53: minknow_api.device.DeviceService.get_sample_rate:input_type -> minknow_api.device.GetSampleRateRequest
	51, // 54: minknow_api.device.DeviceService.set_sample_rate:input_type -> minknow_api.device.SetSampleRateRequest
	53, // 55: minknow_api.device.DeviceService.get_bias_voltage:input_type -> minknow_api.device.GetBiasVoltageRequest
	55, // 56: minknow_api.device.DeviceService.set_bias_voltage:input_type -> minknow_api.device.SetBiasVoltageRequest
	7,  // 57: minknow_api.device.DeviceService.get_device_info:output_type -> minknow_api.device.GetDeviceInfoResponse
	9,  // 58: minknow_api.device.DeviceService.get_device_state:output_type -> minknow_api.device.GetDeviceStateResponse
	9,  // 59: minknow_api.device.DeviceService.stream_device_state:output_type -> minknow_api.device.GetDeviceStateResponse
	12, // 60: minknow_api.device.DeviceService.get_flow_cell_info:output_type -> minknow_api.device.GetFlowCellInfoResponse
	12, // 61: minknow_api.device.DeviceService.stream_flow_cell_info:output_type -> minknow_api.device.GetFlowCellInfoResponse
	15, // 62: minknow_api.device.DeviceService.set_user_specified_flow_cell_id:output_type -> minknow_api.device.SetUserSpecifiedFlowCellIdResponse
	17, // 63: minknow_api.device.DeviceService.set_user_specified_product_code:output_type -> minknow_api.device.SetUserSpecifiedProductCodeResponse
	19, // 64: minknow_api.device.DeviceService.get_channels_layout:output_type -> minknow_api.device.GetChannelsLayoutResponse
	22, // 65: minknow_api.device.DeviceService.reset_device_settings:output_type -> minknow_api.device.ResetDeviceSettingsResponse
	24, // 66: minknow_api.device.DeviceService.set_calibration:output_type -> minknow_api.device.SetCalibrationResponse
	26, // 67: minknow_api.device.DeviceService.clear_calibration:output_type -> minknow_api.device.ClearCalibrationResponse
	28, // 68: minknow_api.device.DeviceService.get_calibration:output_type -> minknow_api.device.GetCalibrationResponse
	30, // 69: minknow_api.device.DeviceService.set_temperature:output_type -> minknow_api.device.SetTemperatureResponse
	32, // 70: minknow_api.device.DeviceService.get_temperature:output_type -> minknow_api.device.GetTemperatureResponse
	32, // 71: minknow_api.device.DeviceService.stream_temperature:output_type -> minknow_api.device.GetTemperatureResponse
	35, // 72: minknow_api.device.DeviceService.unblock:output_type -> minknow_api.device.UnblockResponse
	37, // 73: minknow_api.device.DeviceService.cancel_unblocks:output_type -> minknow_api.device.CancelUnblocksResponse
	39, // 74: minknow_api.device.DeviceService.get_channel_configuration:output_type -> minknow_api.device.GetChannelConfigurationResponse
	41, // 75: minknow_api.device.DeviceService.set_channel_configuration:output_type -> minknow_api.device.SetChannelConfigurationResponse
	43, // 76: minknow_api.device.DeviceService.set_channel_configuration_all:output_type -> minknow_api.device.SetChannelConfigurationAllResponse
	46, // 77: minknow_api.device.DeviceService.set_saturation_config:output_type -> minknow_api.device.SetSaturationConfigResponse
	48, // 78: minknow_api.device.DeviceService.get_saturation_config:output_type -> minknow_api.device.GetSaturationConfigResponse
	50, // 79: minknow_api.device.DeviceService.get_sample_rate:output_type -> minknow_api.device.GetSampleRateResponse
	52, // 80: minknow_api.device.DeviceService.set_sample_rate:output_type -> minknow_api.device.SetSampleRateResponse
	54, // 81: minknow_api.device.DeviceService.get_bias_voltage:output_type -> minknow_api.device.GetBiasVoltageResponse
	56, // 82: minknow_api.device.DeviceService.set_bias_voltage:output_type -> minknow_api.device.SetBiasVoltageResponse
	57, // [57:83] is the sub-list for method output_type
	31, // [31:57] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_minknow_api_device_proto_init() }
func file_minknow_api_device_proto_init() {
	if File_minknow_api_device_proto != nil {
		return
	}
	file_minknow_api_rpc_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnedChannelConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDeviceStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowCellInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowCellInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFlowCellInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserSpecifiedFlowCellIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserSpecifiedFlowCellIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserSpecifiedProductCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserSpecifiedProductCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelsLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelsLayoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetDeviceSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetDeviceSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCalibrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCalibrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearCalibrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearCalibrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalibrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalibrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTemperatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemperatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelUnblocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelUnblocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelConfigurationAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelConfigurationAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaturationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSaturationConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSaturationConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSaturationConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSaturationConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSampleRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSampleRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSampleRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBiasVoltageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBiasVoltageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBiasVoltageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBiasVoltageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoResponse_ComponentVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRecord_MuxRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTemperatureRequest_WaitForTemperatureSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemperatureResponse_MinIONTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemperatureResponse_PromethIONTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaturationConfig_Thresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaturationConfig_SoftwareSaturation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_device_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaturationConfig_UserThresholdSaturation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minknow_api_device_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GetFlowCellInfoResponse_TemperatureOffset)(nil),
	}
	file_minknow_api_device_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*GetTemperatureResponse_Minion)(nil),
		(*GetTemperatureResponse_Promethion)(nil),
	}
	file_minknow_api_device_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*UnblockRequest_DurationInSeconds)(nil),
		(*UnblockRequest_DurationInMilliseconds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_device_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_device_proto_goTypes,
		DependencyIndexes: file_minknow_api_device_proto_depIdxs,
		EnumInfos:         file_minknow_api_device_proto_enumTypes,
		MessageInfos:      file_minknow_api_device_proto_msgTypes,
	}.Build()
	File_minknow_api_device_proto = out.File
	file_minknow_api_device_proto_rawDesc = nil
	file_minknow_api_device_proto_goTypes = nil
	file_minknow_api_device_proto_depIdxs = nil
}
