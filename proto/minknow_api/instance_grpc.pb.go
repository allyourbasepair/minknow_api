// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minknow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstanceServiceClient is the client API for InstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceServiceClient interface {
	// Current version information includes:
	// - Minknow version
	// - Protocols version
	// - Distribution version
	GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error)
	// Returns various directory locations where minknow is outputting data. The paths are absolute paths,
	// local to the machine where minknow is installed
	//
	// the `output` base directory can be changed internally
	// the `logs` directory will not be changed and can be stored
	// the `reads` directory is determined  by the read writer config
	GetOutputDirectories(ctx context.Context, in *GetOutputDirectoriesRequest, opts ...grpc.CallOption) (*OutputDirectories, error)
	// See `get_output_directories`, but this will always return the paths that are defined in the config when the instance
	// of minknow has started
	//
	// Since 1.11
	GetDefaultOutputDirectories(ctx context.Context, in *GetDefaultOutputDirectoriesRequest, opts ...grpc.CallOption) (*OutputDirectories, error)
	// Set the base directory to where all data will be output. Must be an absolute directory
	//
	// Fails with INVALID_ARGUMENT if `value` is not absolute.
	// Fails with FAILED_PRECONDITION if this is called during acquisition
	//
	// Since 1.11
	SetOutputDirectory(ctx context.Context, in *SetOutputDirectoryRequest, opts ...grpc.CallOption) (*SetOutputDirectoryResponse, error)
	// Set the reads directory where read files (hdf5, fastq, protobuf) will be output
	//
	// Fails with INVALID_ARGUMENT if `value` is not absolute.
	// Fails with FAILED_PRECONDITION if this is called during acquisition
	//
	// Since 1.12
	SetReadsDirectory(ctx context.Context, in *SetReadsDirectoryRequest, opts ...grpc.CallOption) (*SetReadsDirectoryResponse, error)
	// Returns information about the amount of disk space available, how much
	// space is needed to stop an experiment cleanly and if MinKNOW thinks
	// that the free disk-space is approaching or past this limit
	//
	// Since 1.11
	GetDiskSpaceInfo(ctx context.Context, in *GetDiskSpaceInfoRequest, opts ...grpc.CallOption) (*GetDiskSpaceInfoResponse, error)
	// Stream information about the amount of disk space available, how quickly
	// it is being used, how much space is needed to stop an experiment cleanly
	// and if MinKNOW thinks that the free disk-space is approaching or past
	// this limit
	//
	// Since 4.0
	StreamDiskSpaceInfo(ctx context.Context, in *StreamDiskSpaceInfoRequest, opts ...grpc.CallOption) (InstanceService_StreamDiskSpaceInfoClient, error)
	// Find the machine id MinKNOW uses for this machine.
	//
	// This is expected to be a descriptive string for the machine, MinKNOW currently uses the network hostname.
	//
	// note: This is the identifier used when sending telemetry data for this instance.
	//
	// Since 1.11
	GetMachineId(ctx context.Context, in *GetMachineIdRequest, opts ...grpc.CallOption) (*GetMachineIdResponse, error)
	// Find a summary of activity on the instance.
	//
	// The information available from this request is also available from other rpc's - this call is intended
	// as a performance improvement for users who watch a large number of streams (specifically over
	// web socket transport).
	//
	// Use this request to find information about the current device, flow cell, protocol and acquisition state.
	//
	// Since 3.2
	StreamInstanceActivity(ctx context.Context, in *StreamInstanceActivityRequest, opts ...grpc.CallOption) (InstanceService_StreamInstanceActivityClient, error)
}

type instanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceServiceClient(cc grpc.ClientConnInterface) InstanceServiceClient {
	return &instanceServiceClient{cc}
}

func (c *instanceServiceClient) GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error) {
	out := new(GetVersionInfoResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.instance.InstanceService/get_version_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) GetOutputDirectories(ctx context.Context, in *GetOutputDirectoriesRequest, opts ...grpc.CallOption) (*OutputDirectories, error) {
	out := new(OutputDirectories)
	err := c.cc.Invoke(ctx, "/minknow_api.instance.InstanceService/get_output_directories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) GetDefaultOutputDirectories(ctx context.Context, in *GetDefaultOutputDirectoriesRequest, opts ...grpc.CallOption) (*OutputDirectories, error) {
	out := new(OutputDirectories)
	err := c.cc.Invoke(ctx, "/minknow_api.instance.InstanceService/get_default_output_directories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) SetOutputDirectory(ctx context.Context, in *SetOutputDirectoryRequest, opts ...grpc.CallOption) (*SetOutputDirectoryResponse, error) {
	out := new(SetOutputDirectoryResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.instance.InstanceService/set_output_directory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) SetReadsDirectory(ctx context.Context, in *SetReadsDirectoryRequest, opts ...grpc.CallOption) (*SetReadsDirectoryResponse, error) {
	out := new(SetReadsDirectoryResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.instance.InstanceService/set_reads_directory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) GetDiskSpaceInfo(ctx context.Context, in *GetDiskSpaceInfoRequest, opts ...grpc.CallOption) (*GetDiskSpaceInfoResponse, error) {
	out := new(GetDiskSpaceInfoResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.instance.InstanceService/get_disk_space_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) StreamDiskSpaceInfo(ctx context.Context, in *StreamDiskSpaceInfoRequest, opts ...grpc.CallOption) (InstanceService_StreamDiskSpaceInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &InstanceService_ServiceDesc.Streams[0], "/minknow_api.instance.InstanceService/stream_disk_space_info", opts...)
	if err != nil {
		return nil, err
	}
	x := &instanceServiceStreamDiskSpaceInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstanceService_StreamDiskSpaceInfoClient interface {
	Recv() (*GetDiskSpaceInfoResponse, error)
	grpc.ClientStream
}

type instanceServiceStreamDiskSpaceInfoClient struct {
	grpc.ClientStream
}

func (x *instanceServiceStreamDiskSpaceInfoClient) Recv() (*GetDiskSpaceInfoResponse, error) {
	m := new(GetDiskSpaceInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *instanceServiceClient) GetMachineId(ctx context.Context, in *GetMachineIdRequest, opts ...grpc.CallOption) (*GetMachineIdResponse, error) {
	out := new(GetMachineIdResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.instance.InstanceService/get_machine_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) StreamInstanceActivity(ctx context.Context, in *StreamInstanceActivityRequest, opts ...grpc.CallOption) (InstanceService_StreamInstanceActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &InstanceService_ServiceDesc.Streams[1], "/minknow_api.instance.InstanceService/stream_instance_activity", opts...)
	if err != nil {
		return nil, err
	}
	x := &instanceServiceStreamInstanceActivityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstanceService_StreamInstanceActivityClient interface {
	Recv() (*StreamInstanceActivityResponse, error)
	grpc.ClientStream
}

type instanceServiceStreamInstanceActivityClient struct {
	grpc.ClientStream
}

func (x *instanceServiceStreamInstanceActivityClient) Recv() (*StreamInstanceActivityResponse, error) {
	m := new(StreamInstanceActivityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InstanceServiceServer is the server API for InstanceService service.
// All implementations must embed UnimplementedInstanceServiceServer
// for forward compatibility
type InstanceServiceServer interface {
	// Current version information includes:
	// - Minknow version
	// - Protocols version
	// - Distribution version
	GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error)
	// Returns various directory locations where minknow is outputting data. The paths are absolute paths,
	// local to the machine where minknow is installed
	//
	// the `output` base directory can be changed internally
	// the `logs` directory will not be changed and can be stored
	// the `reads` directory is determined  by the read writer config
	GetOutputDirectories(context.Context, *GetOutputDirectoriesRequest) (*OutputDirectories, error)
	// See `get_output_directories`, but this will always return the paths that are defined in the config when the instance
	// of minknow has started
	//
	// Since 1.11
	GetDefaultOutputDirectories(context.Context, *GetDefaultOutputDirectoriesRequest) (*OutputDirectories, error)
	// Set the base directory to where all data will be output. Must be an absolute directory
	//
	// Fails with INVALID_ARGUMENT if `value` is not absolute.
	// Fails with FAILED_PRECONDITION if this is called during acquisition
	//
	// Since 1.11
	SetOutputDirectory(context.Context, *SetOutputDirectoryRequest) (*SetOutputDirectoryResponse, error)
	// Set the reads directory where read files (hdf5, fastq, protobuf) will be output
	//
	// Fails with INVALID_ARGUMENT if `value` is not absolute.
	// Fails with FAILED_PRECONDITION if this is called during acquisition
	//
	// Since 1.12
	SetReadsDirectory(context.Context, *SetReadsDirectoryRequest) (*SetReadsDirectoryResponse, error)
	// Returns information about the amount of disk space available, how much
	// space is needed to stop an experiment cleanly and if MinKNOW thinks
	// that the free disk-space is approaching or past this limit
	//
	// Since 1.11
	GetDiskSpaceInfo(context.Context, *GetDiskSpaceInfoRequest) (*GetDiskSpaceInfoResponse, error)
	// Stream information about the amount of disk space available, how quickly
	// it is being used, how much space is needed to stop an experiment cleanly
	// and if MinKNOW thinks that the free disk-space is approaching or past
	// this limit
	//
	// Since 4.0
	StreamDiskSpaceInfo(*StreamDiskSpaceInfoRequest, InstanceService_StreamDiskSpaceInfoServer) error
	// Find the machine id MinKNOW uses for this machine.
	//
	// This is expected to be a descriptive string for the machine, MinKNOW currently uses the network hostname.
	//
	// note: This is the identifier used when sending telemetry data for this instance.
	//
	// Since 1.11
	GetMachineId(context.Context, *GetMachineIdRequest) (*GetMachineIdResponse, error)
	// Find a summary of activity on the instance.
	//
	// The information available from this request is also available from other rpc's - this call is intended
	// as a performance improvement for users who watch a large number of streams (specifically over
	// web socket transport).
	//
	// Use this request to find information about the current device, flow cell, protocol and acquisition state.
	//
	// Since 3.2
	StreamInstanceActivity(*StreamInstanceActivityRequest, InstanceService_StreamInstanceActivityServer) error
	mustEmbedUnimplementedInstanceServiceServer()
}

// UnimplementedInstanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceServiceServer struct {
}

func (UnimplementedInstanceServiceServer) GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionInfo not implemented")
}
func (UnimplementedInstanceServiceServer) GetOutputDirectories(context.Context, *GetOutputDirectoriesRequest) (*OutputDirectories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputDirectories not implemented")
}
func (UnimplementedInstanceServiceServer) GetDefaultOutputDirectories(context.Context, *GetDefaultOutputDirectoriesRequest) (*OutputDirectories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultOutputDirectories not implemented")
}
func (UnimplementedInstanceServiceServer) SetOutputDirectory(context.Context, *SetOutputDirectoryRequest) (*SetOutputDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOutputDirectory not implemented")
}
func (UnimplementedInstanceServiceServer) SetReadsDirectory(context.Context, *SetReadsDirectoryRequest) (*SetReadsDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReadsDirectory not implemented")
}
func (UnimplementedInstanceServiceServer) GetDiskSpaceInfo(context.Context, *GetDiskSpaceInfoRequest) (*GetDiskSpaceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskSpaceInfo not implemented")
}
func (UnimplementedInstanceServiceServer) StreamDiskSpaceInfo(*StreamDiskSpaceInfoRequest, InstanceService_StreamDiskSpaceInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDiskSpaceInfo not implemented")
}
func (UnimplementedInstanceServiceServer) GetMachineId(context.Context, *GetMachineIdRequest) (*GetMachineIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineId not implemented")
}
func (UnimplementedInstanceServiceServer) StreamInstanceActivity(*StreamInstanceActivityRequest, InstanceService_StreamInstanceActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInstanceActivity not implemented")
}
func (UnimplementedInstanceServiceServer) mustEmbedUnimplementedInstanceServiceServer() {}

// UnsafeInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceServiceServer will
// result in compilation errors.
type UnsafeInstanceServiceServer interface {
	mustEmbedUnimplementedInstanceServiceServer()
}

func RegisterInstanceServiceServer(s grpc.ServiceRegistrar, srv InstanceServiceServer) {
	s.RegisterService(&InstanceService_ServiceDesc, srv)
}

func _InstanceService_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.instance.InstanceService/get_version_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).GetVersionInfo(ctx, req.(*GetVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_GetOutputDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputDirectoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).GetOutputDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.instance.InstanceService/get_output_directories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).GetOutputDirectories(ctx, req.(*GetOutputDirectoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_GetDefaultOutputDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultOutputDirectoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).GetDefaultOutputDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.instance.InstanceService/get_default_output_directories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).GetDefaultOutputDirectories(ctx, req.(*GetDefaultOutputDirectoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_SetOutputDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOutputDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).SetOutputDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.instance.InstanceService/set_output_directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).SetOutputDirectory(ctx, req.(*SetOutputDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_SetReadsDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReadsDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).SetReadsDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.instance.InstanceService/set_reads_directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).SetReadsDirectory(ctx, req.(*SetReadsDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_GetDiskSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskSpaceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).GetDiskSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.instance.InstanceService/get_disk_space_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).GetDiskSpaceInfo(ctx, req.(*GetDiskSpaceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_StreamDiskSpaceInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDiskSpaceInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstanceServiceServer).StreamDiskSpaceInfo(m, &instanceServiceStreamDiskSpaceInfoServer{stream})
}

type InstanceService_StreamDiskSpaceInfoServer interface {
	Send(*GetDiskSpaceInfoResponse) error
	grpc.ServerStream
}

type instanceServiceStreamDiskSpaceInfoServer struct {
	grpc.ServerStream
}

func (x *instanceServiceStreamDiskSpaceInfoServer) Send(m *GetDiskSpaceInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InstanceService_GetMachineId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).GetMachineId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.instance.InstanceService/get_machine_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).GetMachineId(ctx, req.(*GetMachineIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_StreamInstanceActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamInstanceActivityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstanceServiceServer).StreamInstanceActivity(m, &instanceServiceStreamInstanceActivityServer{stream})
}

type InstanceService_StreamInstanceActivityServer interface {
	Send(*StreamInstanceActivityResponse) error
	grpc.ServerStream
}

type instanceServiceStreamInstanceActivityServer struct {
	grpc.ServerStream
}

func (x *instanceServiceStreamInstanceActivityServer) Send(m *StreamInstanceActivityResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InstanceService_ServiceDesc is the grpc.ServiceDesc for InstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minknow_api.instance.InstanceService",
	HandlerType: (*InstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_version_info",
			Handler:    _InstanceService_GetVersionInfo_Handler,
		},
		{
			MethodName: "get_output_directories",
			Handler:    _InstanceService_GetOutputDirectories_Handler,
		},
		{
			MethodName: "get_default_output_directories",
			Handler:    _InstanceService_GetDefaultOutputDirectories_Handler,
		},
		{
			MethodName: "set_output_directory",
			Handler:    _InstanceService_SetOutputDirectory_Handler,
		},
		{
			MethodName: "set_reads_directory",
			Handler:    _InstanceService_SetReadsDirectory_Handler,
		},
		{
			MethodName: "get_disk_space_info",
			Handler:    _InstanceService_GetDiskSpaceInfo_Handler,
		},
		{
			MethodName: "get_machine_id",
			Handler:    _InstanceService_GetMachineId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream_disk_space_info",
			Handler:       _InstanceService_StreamDiskSpaceInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_instance_activity",
			Handler:       _InstanceService_StreamInstanceActivity_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow_api/instance.proto",
}
