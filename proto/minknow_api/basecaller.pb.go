// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/basecaller.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State int32

const (
	// Basecalling is running.
	State_STATE_RUNNING State = 0
	// Basecalling has finished with no errors.
	State_STATE_SUCCESS State = 1
	// Basecalling has stopped due to errors.
	//
	// Note that not being able to basecall a read is not necessarily considered an error (eg: if it
	// could not be basecalled because of poor data quality).
	State_STATE_ERROR State = 2
	// Basecalling was cancelled via a call to cancel().
	State_STATE_CANCELLED State = 3
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_RUNNING",
		1: "STATE_SUCCESS",
		2: "STATE_ERROR",
		3: "STATE_CANCELLED",
	}
	State_value = map[string]int32{
		"STATE_RUNNING":   0,
		"STATE_SUCCESS":   1,
		"STATE_ERROR":     2,
		"STATE_CANCELLED": 3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_basecaller_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_minknow_api_basecaller_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{0}
}

type SelectionPreset int32

const (
	// Return all currently-running basecall runs.
	SelectionPreset_PRESET_ALL_RUNNING SelectionPreset = 0
	// Return only the most recently-started run.
	SelectionPreset_PRESET_MOST_RECENTLY_STARTED SelectionPreset = 1
	// Return all basecall runs.
	SelectionPreset_PRESET_ALL SelectionPreset = 2
)

// Enum value maps for SelectionPreset.
var (
	SelectionPreset_name = map[int32]string{
		0: "PRESET_ALL_RUNNING",
		1: "PRESET_MOST_RECENTLY_STARTED",
		2: "PRESET_ALL",
	}
	SelectionPreset_value = map[string]int32{
		"PRESET_ALL_RUNNING":           0,
		"PRESET_MOST_RECENTLY_STARTED": 1,
		"PRESET_ALL":                   2,
	}
)

func (x SelectionPreset) Enum() *SelectionPreset {
	p := new(SelectionPreset)
	*p = x
	return p
}

func (x SelectionPreset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectionPreset) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_basecaller_proto_enumTypes[1].Descriptor()
}

func (SelectionPreset) Type() protoreflect.EnumType {
	return &file_minknow_api_basecaller_proto_enumTypes[1]
}

func (x SelectionPreset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectionPreset.Descriptor instead.
func (SelectionPreset) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{1}
}

type ListConfigsByKitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConfigsByKitRequest) Reset() {
	*x = ListConfigsByKitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigsByKitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigsByKitRequest) ProtoMessage() {}

func (x *ListConfigsByKitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigsByKitRequest.ProtoReflect.Descriptor instead.
func (*ListConfigsByKitRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{0}
}

type ListConfigsByKitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key: flow cell type (eg: "FLO-MIN107")
	// Value: FlowCellConfigs describing configurations available for that flow cell.
	FlowCellConfigs map[string]*ListConfigsByKitResponse_PerFlowCell `protobuf:"bytes,1,rep,name=flow_cell_configs,json=flowCellConfigs,proto3" json:"flow_cell_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListConfigsByKitResponse) Reset() {
	*x = ListConfigsByKitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigsByKitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigsByKitResponse) ProtoMessage() {}

func (x *ListConfigsByKitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigsByKitResponse.ProtoReflect.Descriptor instead.
func (*ListConfigsByKitResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{1}
}

func (x *ListConfigsByKitResponse) GetFlowCellConfigs() map[string]*ListConfigsByKitResponse_PerFlowCell {
	if x != nil {
		return x.FlowCellConfigs
	}
	return nil
}

type StartBasecallingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User specified name to identify the basecall run.
	Name string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Input directories to search for reads to be basecalled.
	//
	// Currently, only one directory can be specified, but this definition allows for multiple in
	// the future without breaking compatibility.
	InputReadsDirectories []string `protobuf:"bytes,1,rep,name=input_reads_directories,json=inputReadsDirectories,proto3" json:"input_reads_directories,omitempty"`
	// Output directory where called reads will be placed.
	//
	// Reads will be sorted into subdirectories based on the sequencing run they came from.
	OutputReadsDirectory string `protobuf:"bytes,2,opt,name=output_reads_directory,json=outputReadsDirectory,proto3" json:"output_reads_directory,omitempty"`
	// The name of the basecalling configuration to use.
	Configuration string `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Enable output of .fast5 files containing original raw reads, event data/trace table from
	// basecall and basecall result sequence.
	//
	// This causes .fast5 files to be output in addition to FASTQ files.
	Fast5Out bool `protobuf:"varint,4,opt,name=fast5_out,json=fast5Out,proto3" json:"fast5_out,omitempty"`
	// Enable gzip compression of output FASTQ files.
	CompressFastq bool `protobuf:"varint,5,opt,name=compress_fastq,json=compressFastq,proto3" json:"compress_fastq,omitempty"`
	// Prevent events / trace tables being written to .fast5 files.
	//
	// If event tables are not required for downstream processing (eg: for 1d^2) then it is more
	// efficient (and produces smaller files) to disable them.
	//
	// This has no effect if ``fast5_out`` is not enabled.
	DisableEvents bool `protobuf:"varint,6,opt,name=disable_events,json=disableEvents,proto3" json:"disable_events,omitempty"`
	// Recursively find fast5 files to basecall in the `input_reads_directories`.
	//
	// If False, only the fast5 files directly in one of the `input_reads_directories` will be
	// basecalled. If True, subdirectories of those directories will also be searched recursively.
	Recursive bool `protobuf:"varint,7,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// Options to control barcoding performed once basecalling reads is complete.
	BarcodingConfiguration *BarcodingConfiguration `protobuf:"bytes,10,opt,name=barcoding_configuration,json=barcodingConfiguration,proto3" json:"barcoding_configuration,omitempty"`
	// Options to control alignment performed once basecalling reads is complete.
	AlignmentConfiguration *AlignmentConfiguration `protobuf:"bytes,11,opt,name=alignment_configuration,json=alignmentConfiguration,proto3" json:"alignment_configuration,omitempty"`
}

func (x *StartBasecallingRequest) Reset() {
	*x = StartBasecallingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBasecallingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBasecallingRequest) ProtoMessage() {}

func (x *StartBasecallingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBasecallingRequest.ProtoReflect.Descriptor instead.
func (*StartBasecallingRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{2}
}

func (x *StartBasecallingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartBasecallingRequest) GetInputReadsDirectories() []string {
	if x != nil {
		return x.InputReadsDirectories
	}
	return nil
}

func (x *StartBasecallingRequest) GetOutputReadsDirectory() string {
	if x != nil {
		return x.OutputReadsDirectory
	}
	return ""
}

func (x *StartBasecallingRequest) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

func (x *StartBasecallingRequest) GetFast5Out() bool {
	if x != nil {
		return x.Fast5Out
	}
	return false
}

func (x *StartBasecallingRequest) GetCompressFastq() bool {
	if x != nil {
		return x.CompressFastq
	}
	return false
}

func (x *StartBasecallingRequest) GetDisableEvents() bool {
	if x != nil {
		return x.DisableEvents
	}
	return false
}

func (x *StartBasecallingRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *StartBasecallingRequest) GetBarcodingConfiguration() *BarcodingConfiguration {
	if x != nil {
		return x.BarcodingConfiguration
	}
	return nil
}

func (x *StartBasecallingRequest) GetAlignmentConfiguration() *AlignmentConfiguration {
	if x != nil {
		return x.AlignmentConfiguration
	}
	return nil
}

type StartBasecallingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for the basecalling run that was started. This can be used to monitor or cancel
	// the run.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartBasecallingResponse) Reset() {
	*x = StartBasecallingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBasecallingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBasecallingResponse) ProtoMessage() {}

func (x *StartBasecallingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBasecallingResponse.ProtoReflect.Descriptor instead.
func (*StartBasecallingResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{3}
}

func (x *StartBasecallingResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartBarcodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User specified name to identify the barcoding run.
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Input directories to search for reads to be basecalled.
	//
	// Currently, only one directory can be specified, but this definition allows for multiple in
	// the future without breaking compatibility.
	InputReadsDirectories []string `protobuf:"bytes,1,rep,name=input_reads_directories,json=inputReadsDirectories,proto3" json:"input_reads_directories,omitempty"`
	// Output directory where called reads will be placed.
	//
	// Reads will be sorted into subdirectories based on the sequencing run they came from.
	OutputReadsDirectory string `protobuf:"bytes,2,opt,name=output_reads_directory,json=outputReadsDirectory,proto3" json:"output_reads_directory,omitempty"`
	// Enable gzip compression of output FASTQ files.
	CompressFastq bool `protobuf:"varint,4,opt,name=compress_fastq,json=compressFastq,proto3" json:"compress_fastq,omitempty"`
	// Recursively find fast5 files to basecall in the `input_reads_directories`.
	//
	// If False, only the fast5 files directly in one of the `input_reads_directories` will be
	// basecalled. If True, subdirectories of those directories will also be searched recursively.
	Recursive bool `protobuf:"varint,5,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// Options to control barcoding performed once basecalling reads is complete.
	BarcodingConfiguration *BarcodingConfiguration `protobuf:"bytes,10,opt,name=barcoding_configuration,json=barcodingConfiguration,proto3" json:"barcoding_configuration,omitempty"`
}

func (x *StartBarcodingRequest) Reset() {
	*x = StartBarcodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBarcodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBarcodingRequest) ProtoMessage() {}

func (x *StartBarcodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBarcodingRequest.ProtoReflect.Descriptor instead.
func (*StartBarcodingRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{4}
}

func (x *StartBarcodingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartBarcodingRequest) GetInputReadsDirectories() []string {
	if x != nil {
		return x.InputReadsDirectories
	}
	return nil
}

func (x *StartBarcodingRequest) GetOutputReadsDirectory() string {
	if x != nil {
		return x.OutputReadsDirectory
	}
	return ""
}

func (x *StartBarcodingRequest) GetCompressFastq() bool {
	if x != nil {
		return x.CompressFastq
	}
	return false
}

func (x *StartBarcodingRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *StartBarcodingRequest) GetBarcodingConfiguration() *BarcodingConfiguration {
	if x != nil {
		return x.BarcodingConfiguration
	}
	return nil
}

type StartBarcodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for the basecalling run that was started. This can be used to monitor or cancel
	// the run.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartBarcodingResponse) Reset() {
	*x = StartBarcodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBarcodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBarcodingResponse) ProtoMessage() {}

func (x *StartBarcodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBarcodingResponse.ProtoReflect.Descriptor instead.
func (*StartBarcodingResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{5}
}

func (x *StartBarcodingResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartAlignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User specified name to identify the alignment run.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// Input directories to search for reads to be aligned.
	//
	// Currently, only one directory can be specified, but this definition allows for multiple in
	// the future without breaking compatibility.
	InputReadsDirectories []string `protobuf:"bytes,1,rep,name=input_reads_directories,json=inputReadsDirectories,proto3" json:"input_reads_directories,omitempty"`
	// Output directory where aligned reads will be placed.
	OutputReadsDirectory string `protobuf:"bytes,2,opt,name=output_reads_directory,json=outputReadsDirectory,proto3" json:"output_reads_directory,omitempty"`
	// Recursively find fast5 files to align in the `input_reads_directories`.
	//
	// If False, only the fast5 files directly in one of the `input_reads_directories` will be
	// aligned. If True, subdirectories of those directories will also be searched recursively.
	Recursive bool `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// Options to control alignment performed once basecalling reads is complete.
	AlignmentConfiguration *AlignmentConfiguration `protobuf:"bytes,6,opt,name=alignment_configuration,json=alignmentConfiguration,proto3" json:"alignment_configuration,omitempty"`
}

func (x *StartAlignmentRequest) Reset() {
	*x = StartAlignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAlignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAlignmentRequest) ProtoMessage() {}

func (x *StartAlignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAlignmentRequest.ProtoReflect.Descriptor instead.
func (*StartAlignmentRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{6}
}

func (x *StartAlignmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartAlignmentRequest) GetInputReadsDirectories() []string {
	if x != nil {
		return x.InputReadsDirectories
	}
	return nil
}

func (x *StartAlignmentRequest) GetOutputReadsDirectory() string {
	if x != nil {
		return x.OutputReadsDirectory
	}
	return ""
}

func (x *StartAlignmentRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *StartAlignmentRequest) GetAlignmentConfiguration() *AlignmentConfiguration {
	if x != nil {
		return x.AlignmentConfiguration
	}
	return nil
}

type StartAlignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for the alignment run that was started. This can be used to monitor or cancel
	// the run.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartAlignmentResponse) Reset() {
	*x = StartAlignmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAlignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAlignmentResponse) ProtoMessage() {}

func (x *StartAlignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAlignmentResponse.ProtoReflect.Descriptor instead.
func (*StartAlignmentResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{7}
}

func (x *StartAlignmentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier as returned from a call to start() or list().
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{8}
}

func (x *CancelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelResponse) Reset() {
	*x = CancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelResponse) ProtoMessage() {}

func (x *CancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelResponse.ProtoReflect.Descriptor instead.
func (*CancelResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{9}
}

type RunInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the run, as returned by start().
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The original message used to start the run.
	//
	// Types that are assignable to StartRequestOneof:
	//	*RunInfo_StartBasecallingRequest
	//	*RunInfo_StartBarcodingRequest
	//	*RunInfo_StartAlignmentRequest
	StartRequestOneof isRunInfo_StartRequestOneof `protobuf_oneof:"start_request_oneof"`
	// What state the run is in.
	//
	// While the basecalling is running the state field will be ``STATE_RUNNING``.
	State State `protobuf:"varint,3,opt,name=state,proto3,enum=minknow_api.basecaller.State" json:"state,omitempty"`
	// If state is STATE_ERROR, this will contain (some of) the errors encountered.
	//
	// Note that if there are a lot of errors, only some may be returned.
	Errors []string `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	// The number of files selected for input.
	FilesDiscovered int32 `protobuf:"varint,5,opt,name=files_discovered,json=filesDiscovered,proto3" json:"files_discovered,omitempty"`
	// The current basecalling progress (with respect to progress_total).
	//
	// This is intended to be an estimate of how close to completion the basecalling run is. The
	// numbers have no particular meaning other than as a proportion of progress_total.
	//
	// Note that this only really has useful meaning while state is STATE_RUNNING. On STATE_SUCCESS,
	// it will always be the same as progress_total. On STATE_ERROR or STATE_CANCELLED, it may give
	// some indication of how far through basecalling was when it failed or was cancelled.
	ProgressCurrent int32 `protobuf:"varint,6,opt,name=progress_current,json=progressCurrent,proto3" json:"progress_current,omitempty"`
	// The maximum value of progress_current.
	//
	// (progress_current / progress_total) * 100 will give a percentage completion.
	//
	// If this is 0, it should be interpreted as "unknown progress".
	ProgressTotal int32 `protobuf:"varint,7,opt,name=progress_total,json=progressTotal,proto3" json:"progress_total,omitempty"`
	// When basecalling was started (UTC).
	StartTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// When basecalling ended (UTC).
	//
	// Unset if basecalling is still running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// An estimate for when basecalling will end (UTC).
	//
	// Unset if basecalling has finished, or if an estimate cannot be calculated
	// (eg: because the baescalling software does not support it).
	//
	// Since 3.6.
	EstimatedEndTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=estimated_end_time,json=estimatedEndTime,proto3" json:"estimated_end_time,omitempty"`
}

func (x *RunInfo) Reset() {
	*x = RunInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInfo) ProtoMessage() {}

func (x *RunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInfo.ProtoReflect.Descriptor instead.
func (*RunInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{10}
}

func (x *RunInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *RunInfo) GetStartRequestOneof() isRunInfo_StartRequestOneof {
	if m != nil {
		return m.StartRequestOneof
	}
	return nil
}

func (x *RunInfo) GetStartBasecallingRequest() *StartBasecallingRequest {
	if x, ok := x.GetStartRequestOneof().(*RunInfo_StartBasecallingRequest); ok {
		return x.StartBasecallingRequest
	}
	return nil
}

func (x *RunInfo) GetStartBarcodingRequest() *StartBarcodingRequest {
	if x, ok := x.GetStartRequestOneof().(*RunInfo_StartBarcodingRequest); ok {
		return x.StartBarcodingRequest
	}
	return nil
}

func (x *RunInfo) GetStartAlignmentRequest() *StartAlignmentRequest {
	if x, ok := x.GetStartRequestOneof().(*RunInfo_StartAlignmentRequest); ok {
		return x.StartAlignmentRequest
	}
	return nil
}

func (x *RunInfo) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_RUNNING
}

func (x *RunInfo) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *RunInfo) GetFilesDiscovered() int32 {
	if x != nil {
		return x.FilesDiscovered
	}
	return 0
}

func (x *RunInfo) GetProgressCurrent() int32 {
	if x != nil {
		return x.ProgressCurrent
	}
	return 0
}

func (x *RunInfo) GetProgressTotal() int32 {
	if x != nil {
		return x.ProgressTotal
	}
	return 0
}

func (x *RunInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RunInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *RunInfo) GetEstimatedEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedEndTime
	}
	return nil
}

type isRunInfo_StartRequestOneof interface {
	isRunInfo_StartRequestOneof()
}

type RunInfo_StartBasecallingRequest struct {
	// Set if basecalling reads
	StartBasecallingRequest *StartBasecallingRequest `protobuf:"bytes,2,opt,name=start_basecalling_request,json=startBasecallingRequest,proto3,oneof"`
}

type RunInfo_StartBarcodingRequest struct {
	// Set if barcoding reads
	StartBarcodingRequest *StartBarcodingRequest `protobuf:"bytes,11,opt,name=start_barcoding_request,json=startBarcodingRequest,proto3,oneof"`
}

type RunInfo_StartAlignmentRequest struct {
	// Set if aligning reads
	StartAlignmentRequest *StartAlignmentRequest `protobuf:"bytes,12,opt,name=start_alignment_request,json=startAlignmentRequest,proto3,oneof"`
}

func (*RunInfo_StartBasecallingRequest) isRunInfo_StartRequestOneof() {}

func (*RunInfo_StartBarcodingRequest) isRunInfo_StartRequestOneof() {}

func (*RunInfo_StartAlignmentRequest) isRunInfo_StartRequestOneof() {}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The selection of runs to return information about.
	//
	// If no selection is provided, the call will return all currently-running basecall runs (as
	// though PRESET_ALL_RUNNING were selected).
	//
	// Types that are assignable to Selection:
	//	*GetInfoRequest_Preset
	//	*GetInfoRequest_Id
	//	*GetInfoRequest_List
	Selection isGetInfoRequest_Selection `protobuf_oneof:"selection"`
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{11}
}

func (m *GetInfoRequest) GetSelection() isGetInfoRequest_Selection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (x *GetInfoRequest) GetPreset() SelectionPreset {
	if x, ok := x.GetSelection().(*GetInfoRequest_Preset); ok {
		return x.Preset
	}
	return SelectionPreset_PRESET_ALL_RUNNING
}

func (x *GetInfoRequest) GetId() string {
	if x, ok := x.GetSelection().(*GetInfoRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetInfoRequest) GetList() *GetInfoRequest_IdList {
	if x, ok := x.GetSelection().(*GetInfoRequest_List); ok {
		return x.List
	}
	return nil
}

type isGetInfoRequest_Selection interface {
	isGetInfoRequest_Selection()
}

type GetInfoRequest_Preset struct {
	// A pre-determined selection of runs.
	Preset SelectionPreset `protobuf:"varint,1,opt,name=preset,proto3,enum=minknow_api.basecaller.SelectionPreset,oneof"`
}

type GetInfoRequest_Id struct {
	// An identifier, as returned by start().
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type GetInfoRequest_List struct {
	// A list of identifiers, as returned by start().
	List *GetInfoRequest_IdList `protobuf:"bytes,3,opt,name=list,proto3,oneof"`
}

func (*GetInfoRequest_Preset) isGetInfoRequest_Selection() {}

func (*GetInfoRequest_Id) isGetInfoRequest_Selection() {}

func (*GetInfoRequest_List) isGetInfoRequest_Selection() {}

type GetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the requested runs.
	Runs []*RunInfo `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{12}
}

func (x *GetInfoResponse) GetRuns() []*RunInfo {
	if x != nil {
		return x.Runs
	}
	return nil
}

type WatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// By default, no information will be sent about runs that were already finished when this call
	// was made. Setting this to true will cause the state of already-finished runs to be returned.
	SendFinishedRuns bool `protobuf:"varint,1,opt,name=send_finished_runs,json=sendFinishedRuns,proto3" json:"send_finished_runs,omitempty"`
}

func (x *WatchRequest) Reset() {
	*x = WatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequest) ProtoMessage() {}

func (x *WatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequest.ProtoReflect.Descriptor instead.
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{13}
}

func (x *WatchRequest) GetSendFinishedRuns() bool {
	if x != nil {
		return x.SendFinishedRuns
	}
	return false
}

type WatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current state of some of the runs.
	Runs []*RunInfo `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *WatchResponse) Reset() {
	*x = WatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchResponse) ProtoMessage() {}

func (x *WatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchResponse.ProtoReflect.Descriptor instead.
func (*WatchResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{14}
}

func (x *WatchResponse) GetRuns() []*RunInfo {
	if x != nil {
		return x.Runs
	}
	return nil
}

type MakeAlignmentIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input fasta reference to use for building the index.
	InputAlignmentReference string `protobuf:"bytes,1,opt,name=input_alignment_reference,json=inputAlignmentReference,proto3" json:"input_alignment_reference,omitempty"`
	// Output file path to write index (mmi file) to.
	//
	// Must have a ".mmi" extension, and the paths parent directory must exist.
	OutputAlignmentIndex string `protobuf:"bytes,2,opt,name=output_alignment_index,json=outputAlignmentIndex,proto3" json:"output_alignment_index,omitempty"`
}

func (x *MakeAlignmentIndexRequest) Reset() {
	*x = MakeAlignmentIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeAlignmentIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeAlignmentIndexRequest) ProtoMessage() {}

func (x *MakeAlignmentIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeAlignmentIndexRequest.ProtoReflect.Descriptor instead.
func (*MakeAlignmentIndexRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{15}
}

func (x *MakeAlignmentIndexRequest) GetInputAlignmentReference() string {
	if x != nil {
		return x.InputAlignmentReference
	}
	return ""
}

func (x *MakeAlignmentIndexRequest) GetOutputAlignmentIndex() string {
	if x != nil {
		return x.OutputAlignmentIndex
	}
	return ""
}

type MakeAlignmentIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MakeAlignmentIndexResponse) Reset() {
	*x = MakeAlignmentIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeAlignmentIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeAlignmentIndexResponse) ProtoMessage() {}

func (x *MakeAlignmentIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeAlignmentIndexResponse.ProtoReflect.Descriptor instead.
func (*MakeAlignmentIndexResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{16}
}

type ListConfigsByKitResponse_ConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of configuration names, to be used in ``StartRequest.configuration``
	Configs []string `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *ListConfigsByKitResponse_ConfigList) Reset() {
	*x = ListConfigsByKitResponse_ConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigsByKitResponse_ConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigsByKitResponse_ConfigList) ProtoMessage() {}

func (x *ListConfigsByKitResponse_ConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigsByKitResponse_ConfigList.ProtoReflect.Descriptor instead.
func (*ListConfigsByKitResponse_ConfigList) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListConfigsByKitResponse_ConfigList) GetConfigs() []string {
	if x != nil {
		return x.Configs
	}
	return nil
}

type ListConfigsByKitResponse_PerFlowCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key: kit name (eg: "SQK-LSK109")
	// Value: list of configuration names
	KitConfigs map[string]*ListConfigsByKitResponse_ConfigList `protobuf:"bytes,1,rep,name=kit_configs,json=kitConfigs,proto3" json:"kit_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListConfigsByKitResponse_PerFlowCell) Reset() {
	*x = ListConfigsByKitResponse_PerFlowCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigsByKitResponse_PerFlowCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigsByKitResponse_PerFlowCell) ProtoMessage() {}

func (x *ListConfigsByKitResponse_PerFlowCell) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigsByKitResponse_PerFlowCell.ProtoReflect.Descriptor instead.
func (*ListConfigsByKitResponse_PerFlowCell) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ListConfigsByKitResponse_PerFlowCell) GetKitConfigs() map[string]*ListConfigsByKitResponse_ConfigList {
	if x != nil {
		return x.KitConfigs
	}
	return nil
}

type GetInfoRequest_IdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetInfoRequest_IdList) Reset() {
	*x = GetInfoRequest_IdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_basecaller_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest_IdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest_IdList) ProtoMessage() {}

func (x *GetInfoRequest_IdList) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_basecaller_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest_IdList.ProtoReflect.Descriptor instead.
func (*GetInfoRequest_IdList) Descriptor() ([]byte, []int) {
	return file_minknow_api_basecaller_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetInfoRequest_IdList) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_minknow_api_basecaller_proto protoreflect.FileDescriptor

var file_minknow_api_basecaller_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x42, 0x79, 0x4b, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x04, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x4b, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x11, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x4b, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x26, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x1a, 0xf8, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x65, 0x6c, 0x6c, 0x12, 0x6d, 0x0a, 0x0b, 0x6b, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79,
	0x4b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x2e, 0x4b, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6b, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x1a, 0x7a, 0x0a, 0x0f, 0x4b, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x4b, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x80, 0x01, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79,
	0x4b, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb4, 0x04, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x35, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x35,
	0x4f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x66, 0x61, 0x73, 0x74, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x73, 0x74, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x73, 0x0a, 0x17, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x17, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x18, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61,
	0x73, 0x74, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x61, 0x73, 0x74, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x73, 0x0a, 0x17, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x73, 0x0a, 0x17, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f,
	0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x10, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf7, 0x05, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6d, 0x0a,
	0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x17,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xd3, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x1a, 0x0a, 0x06, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x19, 0x4d, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x1c, 0x0a,
	0x1a, 0x4d, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x53, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x5b, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e,
	0x54, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x32, 0x8d, 0x07,
	0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x13,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x6b, 0x69, 0x74, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x4b, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x4b, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x78, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x62, 0x0a, 0x08, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12,
	0x5b, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x14,
	0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x6b, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5c, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x63,
	0x68, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75,
	0x72, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_minknow_api_basecaller_proto_rawDescOnce sync.Once
	file_minknow_api_basecaller_proto_rawDescData = file_minknow_api_basecaller_proto_rawDesc
)

func file_minknow_api_basecaller_proto_rawDescGZIP() []byte {
	file_minknow_api_basecaller_proto_rawDescOnce.Do(func() {
		file_minknow_api_basecaller_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_basecaller_proto_rawDescData)
	})
	return file_minknow_api_basecaller_proto_rawDescData
}

var file_minknow_api_basecaller_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_minknow_api_basecaller_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_minknow_api_basecaller_proto_goTypes = []interface{}{
	(State)(0),                                   // 0: minknow_api.basecaller.State
	(SelectionPreset)(0),                         // 1: minknow_api.basecaller.SelectionPreset
	(*ListConfigsByKitRequest)(nil),              // 2: minknow_api.basecaller.ListConfigsByKitRequest
	(*ListConfigsByKitResponse)(nil),             // 3: minknow_api.basecaller.ListConfigsByKitResponse
	(*StartBasecallingRequest)(nil),              // 4: minknow_api.basecaller.StartBasecallingRequest
	(*StartBasecallingResponse)(nil),             // 5: minknow_api.basecaller.StartBasecallingResponse
	(*StartBarcodingRequest)(nil),                // 6: minknow_api.basecaller.StartBarcodingRequest
	(*StartBarcodingResponse)(nil),               // 7: minknow_api.basecaller.StartBarcodingResponse
	(*StartAlignmentRequest)(nil),                // 8: minknow_api.basecaller.StartAlignmentRequest
	(*StartAlignmentResponse)(nil),               // 9: minknow_api.basecaller.StartAlignmentResponse
	(*CancelRequest)(nil),                        // 10: minknow_api.basecaller.CancelRequest
	(*CancelResponse)(nil),                       // 11: minknow_api.basecaller.CancelResponse
	(*RunInfo)(nil),                              // 12: minknow_api.basecaller.RunInfo
	(*GetInfoRequest)(nil),                       // 13: minknow_api.basecaller.GetInfoRequest
	(*GetInfoResponse)(nil),                      // 14: minknow_api.basecaller.GetInfoResponse
	(*WatchRequest)(nil),                         // 15: minknow_api.basecaller.WatchRequest
	(*WatchResponse)(nil),                        // 16: minknow_api.basecaller.WatchResponse
	(*MakeAlignmentIndexRequest)(nil),            // 17: minknow_api.basecaller.MakeAlignmentIndexRequest
	(*MakeAlignmentIndexResponse)(nil),           // 18: minknow_api.basecaller.MakeAlignmentIndexResponse
	(*ListConfigsByKitResponse_ConfigList)(nil),  // 19: minknow_api.basecaller.ListConfigsByKitResponse.ConfigList
	(*ListConfigsByKitResponse_PerFlowCell)(nil), // 20: minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell
	nil,                            // 21: minknow_api.basecaller.ListConfigsByKitResponse.FlowCellConfigsEntry
	nil,                            // 22: minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell.KitConfigsEntry
	(*GetInfoRequest_IdList)(nil),  // 23: minknow_api.basecaller.GetInfoRequest.IdList
	(*BarcodingConfiguration)(nil), // 24: minknow_api.analysis_configuration.BarcodingConfiguration
	(*AlignmentConfiguration)(nil), // 25: minknow_api.analysis_configuration.AlignmentConfiguration
	(*timestamppb.Timestamp)(nil),  // 26: google.protobuf.Timestamp
}
var file_minknow_api_basecaller_proto_depIdxs = []int32{
	21, // 0: minknow_api.basecaller.ListConfigsByKitResponse.flow_cell_configs:type_name -> minknow_api.basecaller.ListConfigsByKitResponse.FlowCellConfigsEntry
	24, // 1: minknow_api.basecaller.StartBasecallingRequest.barcoding_configuration:type_name -> minknow_api.analysis_configuration.BarcodingConfiguration
	25, // 2: minknow_api.basecaller.StartBasecallingRequest.alignment_configuration:type_name -> minknow_api.analysis_configuration.AlignmentConfiguration
	24, // 3: minknow_api.basecaller.StartBarcodingRequest.barcoding_configuration:type_name -> minknow_api.analysis_configuration.BarcodingConfiguration
	25, // 4: minknow_api.basecaller.StartAlignmentRequest.alignment_configuration:type_name -> minknow_api.analysis_configuration.AlignmentConfiguration
	4,  // 5: minknow_api.basecaller.RunInfo.start_basecalling_request:type_name -> minknow_api.basecaller.StartBasecallingRequest
	6,  // 6: minknow_api.basecaller.RunInfo.start_barcoding_request:type_name -> minknow_api.basecaller.StartBarcodingRequest
	8,  // 7: minknow_api.basecaller.RunInfo.start_alignment_request:type_name -> minknow_api.basecaller.StartAlignmentRequest
	0,  // 8: minknow_api.basecaller.RunInfo.state:type_name -> minknow_api.basecaller.State
	26, // 9: minknow_api.basecaller.RunInfo.start_time:type_name -> google.protobuf.Timestamp
	26, // 10: minknow_api.basecaller.RunInfo.end_time:type_name -> google.protobuf.Timestamp
	26, // 11: minknow_api.basecaller.RunInfo.estimated_end_time:type_name -> google.protobuf.Timestamp
	1,  // 12: minknow_api.basecaller.GetInfoRequest.preset:type_name -> minknow_api.basecaller.SelectionPreset
	23, // 13: minknow_api.basecaller.GetInfoRequest.list:type_name -> minknow_api.basecaller.GetInfoRequest.IdList
	12, // 14: minknow_api.basecaller.GetInfoResponse.runs:type_name -> minknow_api.basecaller.RunInfo
	12, // 15: minknow_api.basecaller.WatchResponse.runs:type_name -> minknow_api.basecaller.RunInfo
	22, // 16: minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell.kit_configs:type_name -> minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell.KitConfigsEntry
	20, // 17: minknow_api.basecaller.ListConfigsByKitResponse.FlowCellConfigsEntry.value:type_name -> minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell
	19, // 18: minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell.KitConfigsEntry.value:type_name -> minknow_api.basecaller.ListConfigsByKitResponse.ConfigList
	2,  // 19: minknow_api.basecaller.Basecaller.list_configs_by_kit:input_type -> minknow_api.basecaller.ListConfigsByKitRequest
	4,  // 20: minknow_api.basecaller.Basecaller.start_basecalling:input_type -> minknow_api.basecaller.StartBasecallingRequest
	6,  // 21: minknow_api.basecaller.Basecaller.start_barcoding:input_type -> minknow_api.basecaller.StartBarcodingRequest
	8,  // 22: minknow_api.basecaller.Basecaller.start_alignment:input_type -> minknow_api.basecaller.StartAlignmentRequest
	10, // 23: minknow_api.basecaller.Basecaller.cancel:input_type -> minknow_api.basecaller.CancelRequest
	13, // 24: minknow_api.basecaller.Basecaller.get_info:input_type -> minknow_api.basecaller.GetInfoRequest
	15, // 25: minknow_api.basecaller.Basecaller.watch:input_type -> minknow_api.basecaller.WatchRequest
	17, // 26: minknow_api.basecaller.Basecaller.make_alignment_index:input_type -> minknow_api.basecaller.MakeAlignmentIndexRequest
	3,  // 27: minknow_api.basecaller.Basecaller.list_configs_by_kit:output_type -> minknow_api.basecaller.ListConfigsByKitResponse
	5,  // 28: minknow_api.basecaller.Basecaller.start_basecalling:output_type -> minknow_api.basecaller.StartBasecallingResponse
	7,  // 29: minknow_api.basecaller.Basecaller.start_barcoding:output_type -> minknow_api.basecaller.StartBarcodingResponse
	9,  // 30: minknow_api.basecaller.Basecaller.start_alignment:output_type -> minknow_api.basecaller.StartAlignmentResponse
	11, // 31: minknow_api.basecaller.Basecaller.cancel:output_type -> minknow_api.basecaller.CancelResponse
	14, // 32: minknow_api.basecaller.Basecaller.get_info:output_type -> minknow_api.basecaller.GetInfoResponse
	16, // 33: minknow_api.basecaller.Basecaller.watch:output_type -> minknow_api.basecaller.WatchResponse
	18, // 34: minknow_api.basecaller.Basecaller.make_alignment_index:output_type -> minknow_api.basecaller.MakeAlignmentIndexResponse
	27, // [27:35] is the sub-list for method output_type
	19, // [19:27] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_minknow_api_basecaller_proto_init() }
func file_minknow_api_basecaller_proto_init() {
	if File_minknow_api_basecaller_proto != nil {
		return
	}
	file_minknow_api_analysis_configuration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_basecaller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigsByKitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigsByKitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBasecallingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBasecallingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBarcodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBarcodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAlignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAlignmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeAlignmentIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeAlignmentIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigsByKitResponse_ConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigsByKitResponse_PerFlowCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_basecaller_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest_IdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minknow_api_basecaller_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RunInfo_StartBasecallingRequest)(nil),
		(*RunInfo_StartBarcodingRequest)(nil),
		(*RunInfo_StartAlignmentRequest)(nil),
	}
	file_minknow_api_basecaller_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GetInfoRequest_Preset)(nil),
		(*GetInfoRequest_Id)(nil),
		(*GetInfoRequest_List)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_basecaller_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_basecaller_proto_goTypes,
		DependencyIndexes: file_minknow_api_basecaller_proto_depIdxs,
		EnumInfos:         file_minknow_api_basecaller_proto_enumTypes,
		MessageInfos:      file_minknow_api_basecaller_proto_msgTypes,
	}.Build()
	File_minknow_api_basecaller_proto = out.File
	file_minknow_api_basecaller_proto_rawDesc = nil
	file_minknow_api_basecaller_proto_goTypes = nil
	file_minknow_api_basecaller_proto_depIdxs = nil
}
