// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minknow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyStoreServiceClient is the client API for KeyStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyStoreServiceClient interface {
	// Store one or more values.
	//
	// Anyone watching those values will be notified of the change. If they are watching several of
	// the values in a single watch() call, all the updates will be sent in a single message.
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	// Remove a value from the store.
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Get a single value.
	//
	// This is a convenient alternative to get() when you only want a single value. If you want
	// multiple values, it is more efficient to request them all in a single get() call.
	//
	// If the requested value is not in the store, this will return an error.
	GetOne(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*GetOneResponse, error)
	// Get any number of values.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Watch for values being updates.
	//
	// On calling this, you will get a message containing the current values, and then messages with
	// updates as and when store() is called. The updates will only contain those values that
	// changed.
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (KeyStoreService_WatchClient, error)
}

type keyStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyStoreServiceClient(cc grpc.ClientConnInterface) KeyStoreServiceClient {
	return &keyStoreServiceClient{cc}
}

func (c *keyStoreServiceClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.keystore.KeyStoreService/store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyStoreServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.keystore.KeyStoreService/remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyStoreServiceClient) GetOne(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*GetOneResponse, error) {
	out := new(GetOneResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.keystore.KeyStoreService/get_one", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyStoreServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.keystore.KeyStoreService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyStoreServiceClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (KeyStoreService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &KeyStoreService_ServiceDesc.Streams[0], "/minknow_api.keystore.KeyStoreService/watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyStoreServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyStoreService_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type keyStoreServiceWatchClient struct {
	grpc.ClientStream
}

func (x *keyStoreServiceWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeyStoreServiceServer is the server API for KeyStoreService service.
// All implementations must embed UnimplementedKeyStoreServiceServer
// for forward compatibility
type KeyStoreServiceServer interface {
	// Store one or more values.
	//
	// Anyone watching those values will be notified of the change. If they are watching several of
	// the values in a single watch() call, all the updates will be sent in a single message.
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	// Remove a value from the store.
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	// Get a single value.
	//
	// This is a convenient alternative to get() when you only want a single value. If you want
	// multiple values, it is more efficient to request them all in a single get() call.
	//
	// If the requested value is not in the store, this will return an error.
	GetOne(context.Context, *GetOneRequest) (*GetOneResponse, error)
	// Get any number of values.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Watch for values being updates.
	//
	// On calling this, you will get a message containing the current values, and then messages with
	// updates as and when store() is called. The updates will only contain those values that
	// changed.
	Watch(*WatchRequest, KeyStoreService_WatchServer) error
	mustEmbedUnimplementedKeyStoreServiceServer()
}

// UnimplementedKeyStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyStoreServiceServer struct {
}

func (UnimplementedKeyStoreServiceServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedKeyStoreServiceServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedKeyStoreServiceServer) GetOne(context.Context, *GetOneRequest) (*GetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedKeyStoreServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKeyStoreServiceServer) Watch(*WatchRequest, KeyStoreService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedKeyStoreServiceServer) mustEmbedUnimplementedKeyStoreServiceServer() {}

// UnsafeKeyStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyStoreServiceServer will
// result in compilation errors.
type UnsafeKeyStoreServiceServer interface {
	mustEmbedUnimplementedKeyStoreServiceServer()
}

func RegisterKeyStoreServiceServer(s grpc.ServiceRegistrar, srv KeyStoreServiceServer) {
	s.RegisterService(&KeyStoreService_ServiceDesc, srv)
}

func _KeyStoreService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyStoreServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.keystore.KeyStoreService/store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyStoreServiceServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyStoreService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyStoreServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.keystore.KeyStoreService/remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyStoreServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyStoreService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyStoreServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.keystore.KeyStoreService/get_one",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyStoreServiceServer).GetOne(ctx, req.(*GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyStoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyStoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.keystore.KeyStoreService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyStoreServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyStoreService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyStoreServiceServer).Watch(m, &keyStoreServiceWatchServer{stream})
}

type KeyStoreService_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type keyStoreServiceWatchServer struct {
	grpc.ServerStream
}

func (x *keyStoreServiceWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KeyStoreService_ServiceDesc is the grpc.ServiceDesc for KeyStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minknow_api.keystore.KeyStoreService",
	HandlerType: (*KeyStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "store",
			Handler:    _KeyStoreService_Store_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _KeyStoreService_Remove_Handler,
		},
		{
			MethodName: "get_one",
			Handler:    _KeyStoreService_GetOne_Handler,
		},
		{
			MethodName: "get",
			Handler:    _KeyStoreService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch",
			Handler:       _KeyStoreService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow_api/keystore.proto",
}
