// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minknow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalysisConfigurationServiceClient is the client API for AnalysisConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalysisConfigurationServiceClient interface {
	// Get the analysis configuration
	GetAnalysisConfiguration(ctx context.Context, in *GetAnalysisConfigurationRequest, opts ...grpc.CallOption) (*AnalysisConfiguration, error)
	// Sets the analysis configuration
	//
	// This sets the whole configuration as-is, so you have to specify the whole analysis configuration as any fields
	// there previously will be overwritten. To preserve the current analysis configuration, use a get-modify-set
	// approach. Use get_analysis_configuration to retrieve the current config and modify the fields on that copy.
	// Then use this call to set the modified version.
	//
	// The AnalysisConfiguration message is converted to/from json in Minknow, but this will be removed from later
	// versions of MinKNOW. The basecaller params are the first ones to move away from the jsn format. The old structure
	// has been kept for backwards compatibility, but it will be removed.
	//
	// The AnalysisConfiguration message is intended to be used to convert easily from protobuf to json and back again.
	// To convert from json to a protobuf message (assuming 'analysis_conf_json' holds the json data:
	//
	// >>> import minknow_api
	// >>> from google.protobuf import json_format
	// >>>
	// >>> analysis_conf_pb = minknow_api.analysis_configuration_service.AnalysisConfiguration()
	// >>> json_format.Parse(json.dumps(analysis_conf_json), analysis_conf_pb)
	//
	// To convert from a protobuf message to json:
	//
	// >>> json_data = json_format.MessageToJson(analysis_conf_resp, preserving_proto_field_name=True, including_default_value_fields=True)
	//
	// 'preserving_proto_field_name' is needed because json_format will try convert keys to json-standard(?) format, like converting
	// my_key to myKey, and the key names as seen in the protobuf file are important to minknow
	//
	// 'including_default_value_fields' is needed because in proto3, primitive values that are default initialised (like a uint32 with value 0)
	// will not be sent on the wire, so the value wouldn't appear when converting to json. In practice, most values are wrapper types and this
	// field won't have an affect in wrapper types, but it does affect enum types as the default initailised value is the 0th enum.
	//
	// NOTE: if the analysis configuration was set using the new parameters (with the filename for albacore config files), the old parameters
	// from jsn will be ignored. So set_analysis_configuration must be used with either the old protobuf message for the basecaller parameters,
	// or with the new one, but it cannot be used interleaved!
	SetAnalysisConfiguration(ctx context.Context, in *AnalysisConfiguration, opts ...grpc.CallOption) (*SetAnalysisConfigurationResponse, error)
	// Reset the analysis configuration
	//
	// The configuration will be set to the initial default configuration that was set on boot
	//
	// Since 3.0
	ResetAnalysisConfiguration(ctx context.Context, in *ResetAnalysisConfigurationRequest, opts ...grpc.CallOption) (*ResetAnalysisConfigurationResponse, error)
	// Enable or disable analysis entirely.
	SetAnalysisEnabledState(ctx context.Context, in *SetAnalysisEnabledStateRequest, opts ...grpc.CallOption) (*SetAnalysisEnabledStateResponse, error)
	// Get a description of the possible channel states.
	//
	// This is a subset of the information included in the channel states section of the analysis
	// configuration. It will change when the analysis configuration changes.
	GetChannelStatesDesc(ctx context.Context, in *GetChannelStatesDescRequest, opts ...grpc.CallOption) (*GetChannelStatesDescResponse, error)
	// Get a brief summary of the analysis configuration.
	//
	// This is a high-level overview of what major parts of the analysis pipeline are enabled.
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
	// Configure the basecaller which will run during acquisition.
	//
	// This rpc will result in an error if invoked during acquisition.
	//
	// By default no basecalling is performed (enable = false).
	//
	// Since 3.0
	SetBasecallerConfiguration(ctx context.Context, in *SetBasecallerConfigurationRequest, opts ...grpc.CallOption) (*SetBasecallerConfigurationResponse, error)
	// Inform MinKNOW the passed basecall configuration will be used at some point in the future, and could be loaded now
	// to reduce wait time in the future.
	//
	// This rpc will result in an error if invoked during acquisition.
	//
	// The call will block until any previous call to preload configs is complete, but does not block while the config
	// is loaded, no errors are reported to the caller if the config is invalid.
	//
	// Since 4.1
	PreloadBasecallerConfiguration(ctx context.Context, in *SetBasecallerConfigurationRequest, opts ...grpc.CallOption) (*SetBasecallerConfigurationResponse, error)
	// Find the current basecaller configuration (see #set_basecaller_configuration)
	//
	// Since 3.0
	GetBasecallerConfiguration(ctx context.Context, in *GetBasecallerConfigurationRequest, opts ...grpc.CallOption) (*BasecallerConfiguration, error)
	// Get the pore type configuration
	//
	// Since 3.2
	GetPoreTypeConfiguration(ctx context.Context, in *GetPoreTypeConfigurationRequest, opts ...grpc.CallOption) (*PoreTypeConfiguration, error)
	// Set the pore type configuration
	//
	// By default, the configuration for all wells is "not_set"
	// (global_pore_type set to "not_set")
	//
	// This rpc will result in an error if new pore types are defined during acquisition.
	// The pore type which is active on specific channel/well may be changed during acquisition.
	//
	// If an invalid PoreTypeConfiguration is supplied, an error will be returned
	// Invalid PoreTypeConfiguration include those where:
	//
	//  - No pore_type_config is set
	//  - A pore type is set to an empty string
	//  - A pore type is set to "invalid"
	//
	// If an error is returned, the pore type configuration is not updated.
	//
	// Since 3.2
	SetPoreTypeConfiguration(ctx context.Context, in *PoreTypeConfiguration, opts ...grpc.CallOption) (*SetPoreTypeConfigurationResponse, error)
	// Set the writer configuration.
	//
	// Note: Calling this method overrides any previous settings stored for the writers.
	// In order to preserve settings, you should call #get_writer_configuration, mutate
	// the config, then call this method.
	//
	// Will fail with FAILED_PRECONDITION if acquisition is running.
	//
	// The default writer config is to write nothing to disk.
	//
	// Since 3.3
	SetWriterConfiguration(ctx context.Context, in *WriterConfiguration, opts ...grpc.CallOption) (*SetWriterConfigurationResponse, error)
	// Get the currently active writer configuration.
	//
	// Since 3.3
	GetWriterConfiguration(ctx context.Context, in *GetWriterConfigurationRequest, opts ...grpc.CallOption) (*WriterConfiguration, error)
	// Get a map of read classifications mapped to id (used internally in analysis).
	//
	// This will change when the analysis configuration changes.
	GetReadClassifications(ctx context.Context, in *GetReadClassificationsRequest, opts ...grpc.CallOption) (*GetReadClassificationsResponse, error)
}

type analysisConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisConfigurationServiceClient(cc grpc.ClientConnInterface) AnalysisConfigurationServiceClient {
	return &analysisConfigurationServiceClient{cc}
}

func (c *analysisConfigurationServiceClient) GetAnalysisConfiguration(ctx context.Context, in *GetAnalysisConfigurationRequest, opts ...grpc.CallOption) (*AnalysisConfiguration, error) {
	out := new(AnalysisConfiguration)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_analysis_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) SetAnalysisConfiguration(ctx context.Context, in *AnalysisConfiguration, opts ...grpc.CallOption) (*SetAnalysisConfigurationResponse, error) {
	out := new(SetAnalysisConfigurationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_analysis_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) ResetAnalysisConfiguration(ctx context.Context, in *ResetAnalysisConfigurationRequest, opts ...grpc.CallOption) (*ResetAnalysisConfigurationResponse, error) {
	out := new(ResetAnalysisConfigurationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/reset_analysis_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) SetAnalysisEnabledState(ctx context.Context, in *SetAnalysisEnabledStateRequest, opts ...grpc.CallOption) (*SetAnalysisEnabledStateResponse, error) {
	out := new(SetAnalysisEnabledStateResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_analysis_enabled_state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) GetChannelStatesDesc(ctx context.Context, in *GetChannelStatesDescRequest, opts ...grpc.CallOption) (*GetChannelStatesDescResponse, error) {
	out := new(GetChannelStatesDescResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_channel_states_desc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_summary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) SetBasecallerConfiguration(ctx context.Context, in *SetBasecallerConfigurationRequest, opts ...grpc.CallOption) (*SetBasecallerConfigurationResponse, error) {
	out := new(SetBasecallerConfigurationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_basecaller_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) PreloadBasecallerConfiguration(ctx context.Context, in *SetBasecallerConfigurationRequest, opts ...grpc.CallOption) (*SetBasecallerConfigurationResponse, error) {
	out := new(SetBasecallerConfigurationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/preload_basecaller_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) GetBasecallerConfiguration(ctx context.Context, in *GetBasecallerConfigurationRequest, opts ...grpc.CallOption) (*BasecallerConfiguration, error) {
	out := new(BasecallerConfiguration)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_basecaller_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) GetPoreTypeConfiguration(ctx context.Context, in *GetPoreTypeConfigurationRequest, opts ...grpc.CallOption) (*PoreTypeConfiguration, error) {
	out := new(PoreTypeConfiguration)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_pore_type_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) SetPoreTypeConfiguration(ctx context.Context, in *PoreTypeConfiguration, opts ...grpc.CallOption) (*SetPoreTypeConfigurationResponse, error) {
	out := new(SetPoreTypeConfigurationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_pore_type_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) SetWriterConfiguration(ctx context.Context, in *WriterConfiguration, opts ...grpc.CallOption) (*SetWriterConfigurationResponse, error) {
	out := new(SetWriterConfigurationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_writer_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) GetWriterConfiguration(ctx context.Context, in *GetWriterConfigurationRequest, opts ...grpc.CallOption) (*WriterConfiguration, error) {
	out := new(WriterConfiguration)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_writer_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisConfigurationServiceClient) GetReadClassifications(ctx context.Context, in *GetReadClassificationsRequest, opts ...grpc.CallOption) (*GetReadClassificationsResponse, error) {
	out := new(GetReadClassificationsResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_read_classifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysisConfigurationServiceServer is the server API for AnalysisConfigurationService service.
// All implementations must embed UnimplementedAnalysisConfigurationServiceServer
// for forward compatibility
type AnalysisConfigurationServiceServer interface {
	// Get the analysis configuration
	GetAnalysisConfiguration(context.Context, *GetAnalysisConfigurationRequest) (*AnalysisConfiguration, error)
	// Sets the analysis configuration
	//
	// This sets the whole configuration as-is, so you have to specify the whole analysis configuration as any fields
	// there previously will be overwritten. To preserve the current analysis configuration, use a get-modify-set
	// approach. Use get_analysis_configuration to retrieve the current config and modify the fields on that copy.
	// Then use this call to set the modified version.
	//
	// The AnalysisConfiguration message is converted to/from json in Minknow, but this will be removed from later
	// versions of MinKNOW. The basecaller params are the first ones to move away from the jsn format. The old structure
	// has been kept for backwards compatibility, but it will be removed.
	//
	// The AnalysisConfiguration message is intended to be used to convert easily from protobuf to json and back again.
	// To convert from json to a protobuf message (assuming 'analysis_conf_json' holds the json data:
	//
	// >>> import minknow_api
	// >>> from google.protobuf import json_format
	// >>>
	// >>> analysis_conf_pb = minknow_api.analysis_configuration_service.AnalysisConfiguration()
	// >>> json_format.Parse(json.dumps(analysis_conf_json), analysis_conf_pb)
	//
	// To convert from a protobuf message to json:
	//
	// >>> json_data = json_format.MessageToJson(analysis_conf_resp, preserving_proto_field_name=True, including_default_value_fields=True)
	//
	// 'preserving_proto_field_name' is needed because json_format will try convert keys to json-standard(?) format, like converting
	// my_key to myKey, and the key names as seen in the protobuf file are important to minknow
	//
	// 'including_default_value_fields' is needed because in proto3, primitive values that are default initialised (like a uint32 with value 0)
	// will not be sent on the wire, so the value wouldn't appear when converting to json. In practice, most values are wrapper types and this
	// field won't have an affect in wrapper types, but it does affect enum types as the default initailised value is the 0th enum.
	//
	// NOTE: if the analysis configuration was set using the new parameters (with the filename for albacore config files), the old parameters
	// from jsn will be ignored. So set_analysis_configuration must be used with either the old protobuf message for the basecaller parameters,
	// or with the new one, but it cannot be used interleaved!
	SetAnalysisConfiguration(context.Context, *AnalysisConfiguration) (*SetAnalysisConfigurationResponse, error)
	// Reset the analysis configuration
	//
	// The configuration will be set to the initial default configuration that was set on boot
	//
	// Since 3.0
	ResetAnalysisConfiguration(context.Context, *ResetAnalysisConfigurationRequest) (*ResetAnalysisConfigurationResponse, error)
	// Enable or disable analysis entirely.
	SetAnalysisEnabledState(context.Context, *SetAnalysisEnabledStateRequest) (*SetAnalysisEnabledStateResponse, error)
	// Get a description of the possible channel states.
	//
	// This is a subset of the information included in the channel states section of the analysis
	// configuration. It will change when the analysis configuration changes.
	GetChannelStatesDesc(context.Context, *GetChannelStatesDescRequest) (*GetChannelStatesDescResponse, error)
	// Get a brief summary of the analysis configuration.
	//
	// This is a high-level overview of what major parts of the analysis pipeline are enabled.
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	// Configure the basecaller which will run during acquisition.
	//
	// This rpc will result in an error if invoked during acquisition.
	//
	// By default no basecalling is performed (enable = false).
	//
	// Since 3.0
	SetBasecallerConfiguration(context.Context, *SetBasecallerConfigurationRequest) (*SetBasecallerConfigurationResponse, error)
	// Inform MinKNOW the passed basecall configuration will be used at some point in the future, and could be loaded now
	// to reduce wait time in the future.
	//
	// This rpc will result in an error if invoked during acquisition.
	//
	// The call will block until any previous call to preload configs is complete, but does not block while the config
	// is loaded, no errors are reported to the caller if the config is invalid.
	//
	// Since 4.1
	PreloadBasecallerConfiguration(context.Context, *SetBasecallerConfigurationRequest) (*SetBasecallerConfigurationResponse, error)
	// Find the current basecaller configuration (see #set_basecaller_configuration)
	//
	// Since 3.0
	GetBasecallerConfiguration(context.Context, *GetBasecallerConfigurationRequest) (*BasecallerConfiguration, error)
	// Get the pore type configuration
	//
	// Since 3.2
	GetPoreTypeConfiguration(context.Context, *GetPoreTypeConfigurationRequest) (*PoreTypeConfiguration, error)
	// Set the pore type configuration
	//
	// By default, the configuration for all wells is "not_set"
	// (global_pore_type set to "not_set")
	//
	// This rpc will result in an error if new pore types are defined during acquisition.
	// The pore type which is active on specific channel/well may be changed during acquisition.
	//
	// If an invalid PoreTypeConfiguration is supplied, an error will be returned
	// Invalid PoreTypeConfiguration include those where:
	//
	//  - No pore_type_config is set
	//  - A pore type is set to an empty string
	//  - A pore type is set to "invalid"
	//
	// If an error is returned, the pore type configuration is not updated.
	//
	// Since 3.2
	SetPoreTypeConfiguration(context.Context, *PoreTypeConfiguration) (*SetPoreTypeConfigurationResponse, error)
	// Set the writer configuration.
	//
	// Note: Calling this method overrides any previous settings stored for the writers.
	// In order to preserve settings, you should call #get_writer_configuration, mutate
	// the config, then call this method.
	//
	// Will fail with FAILED_PRECONDITION if acquisition is running.
	//
	// The default writer config is to write nothing to disk.
	//
	// Since 3.3
	SetWriterConfiguration(context.Context, *WriterConfiguration) (*SetWriterConfigurationResponse, error)
	// Get the currently active writer configuration.
	//
	// Since 3.3
	GetWriterConfiguration(context.Context, *GetWriterConfigurationRequest) (*WriterConfiguration, error)
	// Get a map of read classifications mapped to id (used internally in analysis).
	//
	// This will change when the analysis configuration changes.
	GetReadClassifications(context.Context, *GetReadClassificationsRequest) (*GetReadClassificationsResponse, error)
	mustEmbedUnimplementedAnalysisConfigurationServiceServer()
}

// UnimplementedAnalysisConfigurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalysisConfigurationServiceServer struct {
}

func (UnimplementedAnalysisConfigurationServiceServer) GetAnalysisConfiguration(context.Context, *GetAnalysisConfigurationRequest) (*AnalysisConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysisConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) SetAnalysisConfiguration(context.Context, *AnalysisConfiguration) (*SetAnalysisConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAnalysisConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) ResetAnalysisConfiguration(context.Context, *ResetAnalysisConfigurationRequest) (*ResetAnalysisConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAnalysisConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) SetAnalysisEnabledState(context.Context, *SetAnalysisEnabledStateRequest) (*SetAnalysisEnabledStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAnalysisEnabledState not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) GetChannelStatesDesc(context.Context, *GetChannelStatesDescRequest) (*GetChannelStatesDescResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelStatesDesc not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) SetBasecallerConfiguration(context.Context, *SetBasecallerConfigurationRequest) (*SetBasecallerConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBasecallerConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) PreloadBasecallerConfiguration(context.Context, *SetBasecallerConfigurationRequest) (*SetBasecallerConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadBasecallerConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) GetBasecallerConfiguration(context.Context, *GetBasecallerConfigurationRequest) (*BasecallerConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasecallerConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) GetPoreTypeConfiguration(context.Context, *GetPoreTypeConfigurationRequest) (*PoreTypeConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoreTypeConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) SetPoreTypeConfiguration(context.Context, *PoreTypeConfiguration) (*SetPoreTypeConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPoreTypeConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) SetWriterConfiguration(context.Context, *WriterConfiguration) (*SetWriterConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWriterConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) GetWriterConfiguration(context.Context, *GetWriterConfigurationRequest) (*WriterConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriterConfiguration not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) GetReadClassifications(context.Context, *GetReadClassificationsRequest) (*GetReadClassificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadClassifications not implemented")
}
func (UnimplementedAnalysisConfigurationServiceServer) mustEmbedUnimplementedAnalysisConfigurationServiceServer() {
}

// UnsafeAnalysisConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysisConfigurationServiceServer will
// result in compilation errors.
type UnsafeAnalysisConfigurationServiceServer interface {
	mustEmbedUnimplementedAnalysisConfigurationServiceServer()
}

func RegisterAnalysisConfigurationServiceServer(s grpc.ServiceRegistrar, srv AnalysisConfigurationServiceServer) {
	s.RegisterService(&AnalysisConfigurationService_ServiceDesc, srv)
}

func _AnalysisConfigurationService_GetAnalysisConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).GetAnalysisConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_analysis_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).GetAnalysisConfiguration(ctx, req.(*GetAnalysisConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_SetAnalysisConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalysisConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).SetAnalysisConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_analysis_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).SetAnalysisConfiguration(ctx, req.(*AnalysisConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_ResetAnalysisConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAnalysisConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).ResetAnalysisConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/reset_analysis_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).ResetAnalysisConfiguration(ctx, req.(*ResetAnalysisConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_SetAnalysisEnabledState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAnalysisEnabledStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).SetAnalysisEnabledState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_analysis_enabled_state",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).SetAnalysisEnabledState(ctx, req.(*SetAnalysisEnabledStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_GetChannelStatesDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelStatesDescRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).GetChannelStatesDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_channel_states_desc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).GetChannelStatesDesc(ctx, req.(*GetChannelStatesDescRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_summary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_SetBasecallerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBasecallerConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).SetBasecallerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_basecaller_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).SetBasecallerConfiguration(ctx, req.(*SetBasecallerConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_PreloadBasecallerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBasecallerConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).PreloadBasecallerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/preload_basecaller_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).PreloadBasecallerConfiguration(ctx, req.(*SetBasecallerConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_GetBasecallerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasecallerConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).GetBasecallerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_basecaller_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).GetBasecallerConfiguration(ctx, req.(*GetBasecallerConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_GetPoreTypeConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoreTypeConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).GetPoreTypeConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_pore_type_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).GetPoreTypeConfiguration(ctx, req.(*GetPoreTypeConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_SetPoreTypeConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoreTypeConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).SetPoreTypeConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_pore_type_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).SetPoreTypeConfiguration(ctx, req.(*PoreTypeConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_SetWriterConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriterConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).SetWriterConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_writer_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).SetWriterConfiguration(ctx, req.(*WriterConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_GetWriterConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriterConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).GetWriterConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_writer_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).GetWriterConfiguration(ctx, req.(*GetWriterConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisConfigurationService_GetReadClassifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadClassificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisConfigurationServiceServer).GetReadClassifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_read_classifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisConfigurationServiceServer).GetReadClassifications(ctx, req.(*GetReadClassificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalysisConfigurationService_ServiceDesc is the grpc.ServiceDesc for AnalysisConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalysisConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minknow_api.analysis_configuration.AnalysisConfigurationService",
	HandlerType: (*AnalysisConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_analysis_configuration",
			Handler:    _AnalysisConfigurationService_GetAnalysisConfiguration_Handler,
		},
		{
			MethodName: "set_analysis_configuration",
			Handler:    _AnalysisConfigurationService_SetAnalysisConfiguration_Handler,
		},
		{
			MethodName: "reset_analysis_configuration",
			Handler:    _AnalysisConfigurationService_ResetAnalysisConfiguration_Handler,
		},
		{
			MethodName: "set_analysis_enabled_state",
			Handler:    _AnalysisConfigurationService_SetAnalysisEnabledState_Handler,
		},
		{
			MethodName: "get_channel_states_desc",
			Handler:    _AnalysisConfigurationService_GetChannelStatesDesc_Handler,
		},
		{
			MethodName: "get_summary",
			Handler:    _AnalysisConfigurationService_GetSummary_Handler,
		},
		{
			MethodName: "set_basecaller_configuration",
			Handler:    _AnalysisConfigurationService_SetBasecallerConfiguration_Handler,
		},
		{
			MethodName: "preload_basecaller_configuration",
			Handler:    _AnalysisConfigurationService_PreloadBasecallerConfiguration_Handler,
		},
		{
			MethodName: "get_basecaller_configuration",
			Handler:    _AnalysisConfigurationService_GetBasecallerConfiguration_Handler,
		},
		{
			MethodName: "get_pore_type_configuration",
			Handler:    _AnalysisConfigurationService_GetPoreTypeConfiguration_Handler,
		},
		{
			MethodName: "set_pore_type_configuration",
			Handler:    _AnalysisConfigurationService_SetPoreTypeConfiguration_Handler,
		},
		{
			MethodName: "set_writer_configuration",
			Handler:    _AnalysisConfigurationService_SetWriterConfiguration_Handler,
		},
		{
			MethodName: "get_writer_configuration",
			Handler:    _AnalysisConfigurationService_GetWriterConfiguration_Handler,
		},
		{
			MethodName: "get_read_classifications",
			Handler:    _AnalysisConfigurationService_GetReadClassifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minknow_api/analysis_configuration.proto",
}
