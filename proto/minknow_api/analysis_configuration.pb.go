// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/analysis_configuration.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadDetectionParams_ReadDetectionMode int32

const (
	ReadDetectionParams_none       ReadDetectionParams_ReadDetectionMode = 0
	ReadDetectionParams_transition ReadDetectionParams_ReadDetectionMode = 1
	ReadDetectionParams_lookback   ReadDetectionParams_ReadDetectionMode = 2
	ReadDetectionParams_minmax     ReadDetectionParams_ReadDetectionMode = 3
)

// Enum value maps for ReadDetectionParams_ReadDetectionMode.
var (
	ReadDetectionParams_ReadDetectionMode_name = map[int32]string{
		0: "none",
		1: "transition",
		2: "lookback",
		3: "minmax",
	}
	ReadDetectionParams_ReadDetectionMode_value = map[string]int32{
		"none":       0,
		"transition": 1,
		"lookback":   2,
		"minmax":     3,
	}
)

func (x ReadDetectionParams_ReadDetectionMode) Enum() *ReadDetectionParams_ReadDetectionMode {
	p := new(ReadDetectionParams_ReadDetectionMode)
	*p = x
	return p
}

func (x ReadDetectionParams_ReadDetectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadDetectionParams_ReadDetectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_analysis_configuration_proto_enumTypes[0].Descriptor()
}

func (ReadDetectionParams_ReadDetectionMode) Type() protoreflect.EnumType {
	return &file_minknow_api_analysis_configuration_proto_enumTypes[0]
}

func (x ReadDetectionParams_ReadDetectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadDetectionParams_ReadDetectionMode.Descriptor instead.
func (ReadDetectionParams_ReadDetectionMode) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{1, 0}
}

type ReadClassificationParams_Scheme int32

const (
	ReadClassificationParams_none   ReadClassificationParams_Scheme = 0
	ReadClassificationParams_parsed ReadClassificationParams_Scheme = 1
)

// Enum value maps for ReadClassificationParams_Scheme.
var (
	ReadClassificationParams_Scheme_name = map[int32]string{
		0: "none",
		1: "parsed",
	}
	ReadClassificationParams_Scheme_value = map[string]int32{
		"none":   0,
		"parsed": 1,
	}
)

func (x ReadClassificationParams_Scheme) Enum() *ReadClassificationParams_Scheme {
	p := new(ReadClassificationParams_Scheme)
	*p = x
	return p
}

func (x ReadClassificationParams_Scheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadClassificationParams_Scheme) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_analysis_configuration_proto_enumTypes[1].Descriptor()
}

func (ReadClassificationParams_Scheme) Type() protoreflect.EnumType {
	return &file_minknow_api_analysis_configuration_proto_enumTypes[1]
}

func (x ReadClassificationParams_Scheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadClassificationParams_Scheme.Descriptor instead.
func (ReadClassificationParams_Scheme) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{2, 0}
}

// Control the type of compression applied to the read data.
//
// By default the vbz compressor is used (except in the single read case).
type WriterConfiguration_CompressionType int32

const (
	WriterConfiguration_DefaultCompression WriterConfiguration_CompressionType = 0
	WriterConfiguration_ZlibCompression    WriterConfiguration_CompressionType = 1
	WriterConfiguration_VbzCompression     WriterConfiguration_CompressionType = 2
)

// Enum value maps for WriterConfiguration_CompressionType.
var (
	WriterConfiguration_CompressionType_name = map[int32]string{
		0: "DefaultCompression",
		1: "ZlibCompression",
		2: "VbzCompression",
	}
	WriterConfiguration_CompressionType_value = map[string]int32{
		"DefaultCompression": 0,
		"ZlibCompression":    1,
		"VbzCompression":     2,
	}
)

func (x WriterConfiguration_CompressionType) Enum() *WriterConfiguration_CompressionType {
	p := new(WriterConfiguration_CompressionType)
	*p = x
	return p
}

func (x WriterConfiguration_CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriterConfiguration_CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_analysis_configuration_proto_enumTypes[2].Descriptor()
}

func (WriterConfiguration_CompressionType) Type() protoreflect.EnumType {
	return &file_minknow_api_analysis_configuration_proto_enumTypes[2]
}

func (x WriterConfiguration_CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WriterConfiguration_CompressionType.Descriptor instead.
func (WriterConfiguration_CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 0}
}

type EventDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The window size that the tstats are calculated from
	WindowSize uint32 `protobuf:"varint,3,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	// The peak detection must be above this threshold at a minimum for it to be detected
	// as an event.
	Threshold float64 `protobuf:"fixed64,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// When analysing the tstat peaks, if the jump between one value and another is higher than
	// than 'peak_height', then it will "arm" the peak detector and move onto the next phase.
	//
	// And what goes up must come down.
	// Once it has detected a peak going up, it will also have to go down by 'peak_height'
	// in order for the peak to be classified as a found event
	PeakHeight float64 `protobuf:"fixed64,9,opt,name=peak_height,json=peakHeight,proto3" json:"peak_height,omitempty"`
	// Conversion factor used to convert from events to bases.
	//
	// This is used to estimate bases for various rpc feeds from minknow.
	EventsToBaseRatio *wrapperspb.DoubleValue `protobuf:"bytes,16,opt,name=events_to_base_ratio,json=eventsToBaseRatio,proto3" json:"events_to_base_ratio,omitempty"`
	// Whether to break events on mux changes.
	//
	// This will eliminate "mux_uncertain" events and reads. Note that this will cause starting or
	// stopping unblocking to break events as well (even though the mux does not normally change in
	// this case).
	BreakOnMuxChanges bool `protobuf:"varint,17,opt,name=break_on_mux_changes,json=breakOnMuxChanges,proto3" json:"break_on_mux_changes,omitempty"`
	// Control the number of samples MinKNOW will shift mux changes back by in order to align mux changes
	// with event boundaries.
	//
	// When break on mux changes is enabled its possible that mux changes recorded from the device and
	// signal deltas caused by the config changes will not align exactly (the signal delta happen prior to the
	// mux change due to the recorded sample indicating the command is fully applied). Setting this value to > 0
	// will allow minknow to record the mux change as active up to this number of samples _before_ the device
	// recorded the change as active. Mux changes are never shifted forwards.
	//
	// A value of 0 will disable shifting of mux changes.
	MaxMuxChangeBackShift uint32 `protobuf:"varint,18,opt,name=max_mux_change_back_shift,json=maxMuxChangeBackShift,proto3" json:"max_mux_change_back_shift,omitempty"`
}

func (x *EventDetection) Reset() {
	*x = EventDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDetection) ProtoMessage() {}

func (x *EventDetection) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDetection.ProtoReflect.Descriptor instead.
func (*EventDetection) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *EventDetection) GetWindowSize() uint32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (x *EventDetection) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *EventDetection) GetPeakHeight() float64 {
	if x != nil {
		return x.PeakHeight
	}
	return 0
}

func (x *EventDetection) GetEventsToBaseRatio() *wrapperspb.DoubleValue {
	if x != nil {
		return x.EventsToBaseRatio
	}
	return nil
}

func (x *EventDetection) GetBreakOnMuxChanges() bool {
	if x != nil {
		return x.BreakOnMuxChanges
	}
	return false
}

func (x *EventDetection) GetMaxMuxChangeBackShift() uint32 {
	if x != nil {
		return x.MaxMuxChangeBackShift
	}
	return 0
}

type ReadDetectionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode                   ReadDetectionParams_ReadDetectionMode `protobuf:"varint,1,opt,name=mode,proto3,enum=minknow_api.analysis_configuration.ReadDetectionParams_ReadDetectionMode" json:"mode,omitempty"`
	MinimumDeltaMean       float64                               `protobuf:"fixed64,2,opt,name=minimum_delta_mean,json=minimumDeltaMean,proto3" json:"minimum_delta_mean,omitempty"`
	LookBack               uint32                                `protobuf:"varint,3,opt,name=look_back,json=lookBack,proto3" json:"look_back,omitempty"`
	BreakReadsAfterEvents  *wrapperspb.UInt32Value               `protobuf:"bytes,4,opt,name=break_reads_after_events,json=breakReadsAfterEvents,proto3" json:"break_reads_after_events,omitempty"`
	BreakReadsAfterSeconds *wrapperspb.DoubleValue               `protobuf:"bytes,5,opt,name=break_reads_after_seconds,json=breakReadsAfterSeconds,proto3" json:"break_reads_after_seconds,omitempty"`
	BreakReadsOnMuxChanges bool                                  `protobuf:"varint,6,opt,name=break_reads_on_mux_changes,json=breakReadsOnMuxChanges,proto3" json:"break_reads_on_mux_changes,omitempty"`
	// The minimum level which is considered open pore (this value is relative to open_pore_default
	// or the tracked open_pore section, if tracking is being used.)
	//
	// This value must be <= 0.0 if tracking is being used.
	OpenPoreMin *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=open_pore_min,json=openPoreMin,proto3" json:"open_pore_min,omitempty"`
	// The maximum level which is considered open pore (this value is relative to open_pore_default
	// or the tracked open_pore section, if tracking is being used.)
	//
	// This value must be >= 0.0 if tracking is being used.
	OpenPoreMax *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=open_pore_max,json=openPoreMax,proto3" json:"open_pore_max,omitempty"`
	// The default value to use for open pore, either when tracking isn't being used, or when
	// open pore tracking has no value currently.
	OpenPoreDefault *wrapperspb.DoubleValue `protobuf:"bytes,9,opt,name=open_pore_default,json=openPoreDefault,proto3" json:"open_pore_default,omitempty"`
	// Minimum number of seconds events must lie within the range of open pore in order to allow
	// a read to break.
	OpenPoreSecondsRequired *wrapperspb.DoubleValue `protobuf:"bytes,10,opt,name=open_pore_seconds_required,json=openPoreSecondsRequired,proto3" json:"open_pore_seconds_required,omitempty"`
}

func (x *ReadDetectionParams) Reset() {
	*x = ReadDetectionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDetectionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDetectionParams) ProtoMessage() {}

func (x *ReadDetectionParams) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDetectionParams.ProtoReflect.Descriptor instead.
func (*ReadDetectionParams) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *ReadDetectionParams) GetMode() ReadDetectionParams_ReadDetectionMode {
	if x != nil {
		return x.Mode
	}
	return ReadDetectionParams_none
}

func (x *ReadDetectionParams) GetMinimumDeltaMean() float64 {
	if x != nil {
		return x.MinimumDeltaMean
	}
	return 0
}

func (x *ReadDetectionParams) GetLookBack() uint32 {
	if x != nil {
		return x.LookBack
	}
	return 0
}

func (x *ReadDetectionParams) GetBreakReadsAfterEvents() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BreakReadsAfterEvents
	}
	return nil
}

func (x *ReadDetectionParams) GetBreakReadsAfterSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BreakReadsAfterSeconds
	}
	return nil
}

func (x *ReadDetectionParams) GetBreakReadsOnMuxChanges() bool {
	if x != nil {
		return x.BreakReadsOnMuxChanges
	}
	return false
}

func (x *ReadDetectionParams) GetOpenPoreMin() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OpenPoreMin
	}
	return nil
}

func (x *ReadDetectionParams) GetOpenPoreMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OpenPoreMax
	}
	return nil
}

func (x *ReadDetectionParams) GetOpenPoreDefault() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OpenPoreDefault
	}
	return nil
}

func (x *ReadDetectionParams) GetOpenPoreSecondsRequired() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OpenPoreSecondsRequired
	}
	return nil
}

type ReadClassificationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeModule ReadClassificationParams_Scheme `protobuf:"varint,1,opt,name=scheme_module,json=schemeModule,proto3,enum=minknow_api.analysis_configuration.ReadClassificationParams_Scheme" json:"scheme_module,omitempty"`
	// This tells minknow the maximum number of means to store in memory before using a different strategy
	// to calculate medians. If the number of means goes over this size then the strategy used may
	// be less accurate, but will not use as much memory in minknow
	MaxSampleSize *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=max_sample_size,json=maxSampleSize,proto3" json:"max_sample_size,omitempty"`
	// A list of classifications that are deemed interesting, and will be marked to be written out to file
	SelectedClassifications []string `protobuf:"bytes,3,rep,name=selected_classifications,json=selectedClassifications,proto3" json:"selected_classifications,omitempty"`
	// A set of classifications whose level should be tracked as the level of open pore (fed back into
	// read detection analysis).
	//
	// Read chunks selected by this filter will be aggregated for use in read detection.
	OpenPoreClassifications []string `protobuf:"bytes,6,rep,name=open_pore_classifications,json=openPoreClassifications,proto3" json:"open_pore_classifications,omitempty"`
	// A weighting figure for the exponentially weighted moving average given to the newest data.
	// eg. 0.7 would weight new data with 0.3 and all previous data with 0.7.
	//
	// By default 0.5 is used.
	OpenPoreEwmaWeight *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=open_pore_ewma_weight,json=openPoreEwmaWeight,proto3" json:"open_pore_ewma_weight,omitempty"`
	// Determine how to classify a whole read based on the strategy
	//
	// 'ultimate':      Chooses the last (ultimate) read chunk's classification
	// 'penultimate':   Chooses the second-to-last read chunk's clasification
	// 'modal':         Chooses the most common classification out of the all read chunks
	ClassificationStrategy string                               `protobuf:"bytes,4,opt,name=classification_strategy,json=classificationStrategy,proto3" json:"classification_strategy,omitempty"`
	Parameters             *ReadClassificationParams_Parameters `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ReadClassificationParams) Reset() {
	*x = ReadClassificationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadClassificationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadClassificationParams) ProtoMessage() {}

func (x *ReadClassificationParams) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadClassificationParams.ProtoReflect.Descriptor instead.
func (*ReadClassificationParams) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *ReadClassificationParams) GetSchemeModule() ReadClassificationParams_Scheme {
	if x != nil {
		return x.SchemeModule
	}
	return ReadClassificationParams_none
}

func (x *ReadClassificationParams) GetMaxSampleSize() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxSampleSize
	}
	return nil
}

func (x *ReadClassificationParams) GetSelectedClassifications() []string {
	if x != nil {
		return x.SelectedClassifications
	}
	return nil
}

func (x *ReadClassificationParams) GetOpenPoreClassifications() []string {
	if x != nil {
		return x.OpenPoreClassifications
	}
	return nil
}

func (x *ReadClassificationParams) GetOpenPoreEwmaWeight() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OpenPoreEwmaWeight
	}
	return nil
}

func (x *ReadClassificationParams) GetClassificationStrategy() string {
	if x != nil {
		return x.ClassificationStrategy
	}
	return ""
}

func (x *ReadClassificationParams) GetParameters() *ReadClassificationParams_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ChannelStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group       *ChannelStates_Group `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Description string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Logic       *ChannelStates_Logic `protobuf:"bytes,3,opt,name=logic,proto3" json:"logic,omitempty"`
	Style       *ChannelStates_Style `protobuf:"bytes,4,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *ChannelStates) Reset() {
	*x = ChannelStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStates) ProtoMessage() {}

func (x *ChannelStates) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStates.ProtoReflect.Descriptor instead.
func (*ChannelStates) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelStates) GetGroup() *ChannelStates_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ChannelStates) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChannelStates) GetLogic() *ChannelStates_Logic {
	if x != nil {
		return x.Logic
	}
	return nil
}

func (x *ChannelStates) GetStyle() *ChannelStates_Style {
	if x != nil {
		return x.Style
	}
	return nil
}

type GetAnalysisConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAnalysisConfigurationRequest) Reset() {
	*x = GetAnalysisConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnalysisConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnalysisConfigurationRequest) ProtoMessage() {}

func (x *GetAnalysisConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnalysisConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetAnalysisConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{4}
}

type AnalysisConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDetection     *EventDetection           `protobuf:"bytes,1,opt,name=event_detection,json=eventDetection,proto3" json:"event_detection,omitempty"`
	ReadDetection      *ReadDetectionParams      `protobuf:"bytes,2,opt,name=read_detection,json=readDetection,proto3" json:"read_detection,omitempty"`
	ReadClassification *ReadClassificationParams `protobuf:"bytes,4,opt,name=read_classification,json=readClassification,proto3" json:"read_classification,omitempty"`
	ChannelStates      map[string]*ChannelStates `protobuf:"bytes,7,rep,name=channel_states,json=channelStates,proto3" json:"channel_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AnalysisConfiguration) Reset() {
	*x = AnalysisConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisConfiguration) ProtoMessage() {}

func (x *AnalysisConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisConfiguration.ProtoReflect.Descriptor instead.
func (*AnalysisConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *AnalysisConfiguration) GetEventDetection() *EventDetection {
	if x != nil {
		return x.EventDetection
	}
	return nil
}

func (x *AnalysisConfiguration) GetReadDetection() *ReadDetectionParams {
	if x != nil {
		return x.ReadDetection
	}
	return nil
}

func (x *AnalysisConfiguration) GetReadClassification() *ReadClassificationParams {
	if x != nil {
		return x.ReadClassification
	}
	return nil
}

func (x *AnalysisConfiguration) GetChannelStates() map[string]*ChannelStates {
	if x != nil {
		return x.ChannelStates
	}
	return nil
}

type SetAnalysisConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAnalysisConfigurationResponse) Reset() {
	*x = SetAnalysisConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAnalysisConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAnalysisConfigurationResponse) ProtoMessage() {}

func (x *SetAnalysisConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAnalysisConfigurationResponse.ProtoReflect.Descriptor instead.
func (*SetAnalysisConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{6}
}

type ResetAnalysisConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetAnalysisConfigurationRequest) Reset() {
	*x = ResetAnalysisConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetAnalysisConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAnalysisConfigurationRequest) ProtoMessage() {}

func (x *ResetAnalysisConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAnalysisConfigurationRequest.ProtoReflect.Descriptor instead.
func (*ResetAnalysisConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{7}
}

type ResetAnalysisConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetAnalysisConfigurationResponse) Reset() {
	*x = ResetAnalysisConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetAnalysisConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAnalysisConfigurationResponse) ProtoMessage() {}

func (x *ResetAnalysisConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAnalysisConfigurationResponse.ProtoReflect.Descriptor instead.
func (*ResetAnalysisConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{8}
}

type SetAnalysisEnabledStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *SetAnalysisEnabledStateRequest) Reset() {
	*x = SetAnalysisEnabledStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAnalysisEnabledStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAnalysisEnabledStateRequest) ProtoMessage() {}

func (x *SetAnalysisEnabledStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAnalysisEnabledStateRequest.ProtoReflect.Descriptor instead.
func (*SetAnalysisEnabledStateRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *SetAnalysisEnabledStateRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type SetAnalysisEnabledStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAnalysisEnabledStateResponse) Reset() {
	*x = SetAnalysisEnabledStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAnalysisEnabledStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAnalysisEnabledStateResponse) ProtoMessage() {}

func (x *SetAnalysisEnabledStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAnalysisEnabledStateResponse.ProtoReflect.Descriptor instead.
func (*SetAnalysisEnabledStateResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{10}
}

type GetChannelStatesDescRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetChannelStatesDescRequest) Reset() {
	*x = GetChannelStatesDescRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelStatesDescRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelStatesDescRequest) ProtoMessage() {}

func (x *GetChannelStatesDescRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelStatesDescRequest.ProtoReflect.Descriptor instead.
func (*GetChannelStatesDescRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{11}
}

type GetChannelStatesDescResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The groups of channel states.
	//
	// The groups are ordered according to the "order" attribute of the group style in the channel
	// states configuration.
	Groups []*GetChannelStatesDescResponse_Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetChannelStatesDescResponse) Reset() {
	*x = GetChannelStatesDescResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelStatesDescResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelStatesDescResponse) ProtoMessage() {}

func (x *GetChannelStatesDescResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelStatesDescResponse.ProtoReflect.Descriptor instead.
func (*GetChannelStatesDescResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{12}
}

func (x *GetChannelStatesDescResponse) GetGroups() []*GetChannelStatesDescResponse_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSummaryRequest) Reset() {
	*x = GetSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummaryRequest) ProtoMessage() {}

func (x *GetSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetSummaryRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{13}
}

type GetSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether any analysis is enabled.
	//
	// If this is false, everything else will be false as well.
	AnalysisEnabled bool `protobuf:"varint,1,opt,name=analysis_enabled,json=analysisEnabled,proto3" json:"analysis_enabled,omitempty"`
	// Whether basecalling is enabled.
	BasecallingEnabled bool `protobuf:"varint,2,opt,name=basecalling_enabled,json=basecallingEnabled,proto3" json:"basecalling_enabled,omitempty"`
}

func (x *GetSummaryResponse) Reset() {
	*x = GetSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummaryResponse) ProtoMessage() {}

func (x *GetSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetSummaryResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{14}
}

func (x *GetSummaryResponse) GetAnalysisEnabled() bool {
	if x != nil {
		return x.AnalysisEnabled
	}
	return false
}

func (x *GetSummaryResponse) GetBasecallingEnabled() bool {
	if x != nil {
		return x.BasecallingEnabled
	}
	return false
}

// Since 3.5
type BarcodingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The barcoding kits in use
	// One entry per kit
	// If no barcoding kits are supplied, barcoding is disabled.
	BarcodingKits []string `protobuf:"bytes,1,rep,name=barcoding_kits,json=barcodingKits,proto3" json:"barcoding_kits,omitempty"`
	// Whether Guppy should trim barcodes
	// If not specified, this value defaults to false (not triming barcodes)
	// If barcoding is not enabled (e.g., because no barcoding kits are specified),
	// this parameter has no effect.
	TrimBarcodes bool `protobuf:"varint,2,opt,name=trim_barcodes,json=trimBarcodes,proto3" json:"trim_barcodes,omitempty"`
	// Barcode is only classified if a barcode above `min_score` is present at both ends of the basecalled read.
	RequireBarcodesBothEnds bool `protobuf:"varint,3,opt,name=require_barcodes_both_ends,json=requireBarcodesBothEnds,proto3" json:"require_barcodes_both_ends,omitempty"`
	// Search for barcodes through the entire length of the read.
	//
	// If a barcode is found in the middle of a read the read is marked as unclassified.
	DetectMidStrandBarcodes bool `protobuf:"varint,4,opt,name=detect_mid_strand_barcodes,json=detectMidStrandBarcodes,proto3" json:"detect_mid_strand_barcodes,omitempty"`
	// Minimum alignment score to consider a valid barcode.
	//
	// Maximum value is 100, defaults to 60.
	MinScore *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`
	// Minimum score to consider a valid barcode (overrides min_score for rear barcodes).
	//
	// Maximum value is 100, defaults to min_score if not specified.
	MinScoreRear *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=min_score_rear,json=minScoreRear,proto3" json:"min_score_rear,omitempty"`
	// Minimum score to consider a valid mid barcode (only valid if detect_mid_strand_barcodes is specified).
	//
	// Maximum value is 100, defaults to 60.
	MinScoreMid *wrapperspb.FloatValue `protobuf:"bytes,7,opt,name=min_score_mid,json=minScoreMid,proto3" json:"min_score_mid,omitempty"`
	// The minimum score required for the barcode mask to be detected.
	//
	// Maximum value is 100, defaults to 40.
	MinScoreMask *wrapperspb.FloatValue `protobuf:"bytes,8,opt,name=min_score_mask,json=minScoreMask,proto3" json:"min_score_mask,omitempty"`
}

func (x *BarcodingConfiguration) Reset() {
	*x = BarcodingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarcodingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarcodingConfiguration) ProtoMessage() {}

func (x *BarcodingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarcodingConfiguration.ProtoReflect.Descriptor instead.
func (*BarcodingConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{15}
}

func (x *BarcodingConfiguration) GetBarcodingKits() []string {
	if x != nil {
		return x.BarcodingKits
	}
	return nil
}

func (x *BarcodingConfiguration) GetTrimBarcodes() bool {
	if x != nil {
		return x.TrimBarcodes
	}
	return false
}

func (x *BarcodingConfiguration) GetRequireBarcodesBothEnds() bool {
	if x != nil {
		return x.RequireBarcodesBothEnds
	}
	return false
}

func (x *BarcodingConfiguration) GetDetectMidStrandBarcodes() bool {
	if x != nil {
		return x.DetectMidStrandBarcodes
	}
	return false
}

func (x *BarcodingConfiguration) GetMinScore() *wrapperspb.FloatValue {
	if x != nil {
		return x.MinScore
	}
	return nil
}

func (x *BarcodingConfiguration) GetMinScoreRear() *wrapperspb.FloatValue {
	if x != nil {
		return x.MinScoreRear
	}
	return nil
}

func (x *BarcodingConfiguration) GetMinScoreMid() *wrapperspb.FloatValue {
	if x != nil {
		return x.MinScoreMid
	}
	return nil
}

func (x *BarcodingConfiguration) GetMinScoreMask() *wrapperspb.FloatValue {
	if x != nil {
		return x.MinScoreMask
	}
	return nil
}

// Since 4.0
type AlignmentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provide an index to align reads against once basecalled.
	//
	// Any acceptable referece format to guppy can be passed here:
	//   - fasta reference file
	//   - minimap index file
	ReferenceFiles []string `protobuf:"bytes,1,rep,name=reference_files,json=referenceFiles,proto3" json:"reference_files,omitempty"`
	// Provide a bed file for use indicating areas of interest in alignment results.
	//
	// Note: alignment_index must be provided for this argument to be valid.
	BedFile string `protobuf:"bytes,2,opt,name=bed_file,json=bedFile,proto3" json:"bed_file,omitempty"`
	// Minimum coverage for guppy to accept an alignment.
	//
	// If not specified a default value is used.
	//
	// Note: this option cannot be used during live basecalling.
	MinimumCoverage *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=minimum_coverage,json=minimumCoverage,proto3" json:"minimum_coverage,omitempty"`
	// Control how statistics for bed results are aggregated.
	//
	// If set to false only the bed hit with the highest overlap is
	// used when computing heatmap/throughput graphs with bed hits.
	//
	// If set to true each bed hit is considered and bases for all hits are counted.
	// This may give more honest representation of individual bed hit results
	// but will skew read count statistics - as each hit will be counted for every
	// bed hit.
	//
	// Note: this option has no effect in offline basecalling.
	AggregateStatisticsForMultipleBedHits bool `protobuf:"varint,4,opt,name=aggregate_statistics_for_multiple_bed_hits,json=aggregateStatisticsForMultipleBedHits,proto3" json:"aggregate_statistics_for_multiple_bed_hits,omitempty"`
}

func (x *AlignmentConfiguration) Reset() {
	*x = AlignmentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlignmentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignmentConfiguration) ProtoMessage() {}

func (x *AlignmentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignmentConfiguration.ProtoReflect.Descriptor instead.
func (*AlignmentConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{16}
}

func (x *AlignmentConfiguration) GetReferenceFiles() []string {
	if x != nil {
		return x.ReferenceFiles
	}
	return nil
}

func (x *AlignmentConfiguration) GetBedFile() string {
	if x != nil {
		return x.BedFile
	}
	return ""
}

func (x *AlignmentConfiguration) GetMinimumCoverage() *wrapperspb.FloatValue {
	if x != nil {
		return x.MinimumCoverage
	}
	return nil
}

func (x *AlignmentConfiguration) GetAggregateStatisticsForMultipleBedHits() bool {
	if x != nil {
		return x.AggregateStatisticsForMultipleBedHits
	}
	return false
}

// Since 4.1
type LampConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set the lamp kit being used.
	LampKit string `protobuf:"bytes,1,opt,name=lamp_kit,json=lampKit,proto3" json:"lamp_kit,omitempty"`
	// Optionally specify a min score to detect a valid lamp barcode.
	MinScoreBarcodes *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=min_score_barcodes,json=minScoreBarcodes,proto3" json:"min_score_barcodes,omitempty"`
	// Optionally set the minimimum valid score for a lamp mask.
	MinScoreMasks *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=min_score_masks,json=minScoreMasks,proto3" json:"min_score_masks,omitempty"`
	// Optionally specify a minimum score for lamp targets.
	MinScoreTargets *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=min_score_targets,json=minScoreTargets,proto3" json:"min_score_targets,omitempty"`
}

func (x *LampConfiguration) Reset() {
	*x = LampConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LampConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LampConfiguration) ProtoMessage() {}

func (x *LampConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LampConfiguration.ProtoReflect.Descriptor instead.
func (*LampConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{17}
}

func (x *LampConfiguration) GetLampKit() string {
	if x != nil {
		return x.LampKit
	}
	return ""
}

func (x *LampConfiguration) GetMinScoreBarcodes() *wrapperspb.FloatValue {
	if x != nil {
		return x.MinScoreBarcodes
	}
	return nil
}

func (x *LampConfiguration) GetMinScoreMasks() *wrapperspb.FloatValue {
	if x != nil {
		return x.MinScoreMasks
	}
	return nil
}

func (x *LampConfiguration) GetMinScoreTargets() *wrapperspb.FloatValue {
	if x != nil {
		return x.MinScoreTargets
	}
	return nil
}

// Since 3.0
type BasecallerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Choose if guppy is enabled or disabled.
	//
	// If set to false then no basecalling will take place, and the rest of the config is ignored.
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	// The Guppy cfg file with all the settings.
	//
	// Filename can be absolute, or a basename (eg dna_r9.4_450bps.cfg)
	// which guppy should locate (see guppy application config entry: "data_path")
	ConfigFilename string `protobuf:"bytes,1,opt,name=config_filename,json=configFilename,proto3" json:"config_filename,omitempty"`
	// Control how read filtering is applied to output of basecaller.
	//
	// If no filtering parameters are provided then reads will not
	// be filtered.
	ReadFiltering *BasecallerConfiguration_ReadFiltering `protobuf:"bytes,3,opt,name=read_filtering,json=readFiltering,proto3" json:"read_filtering,omitempty"`
	// Control the barcoding configuration.
	// If no barcoding configuration is supplied, barcoding is disabled.
	//
	// Since 3.5
	BarcodingConfiguration *BarcodingConfiguration `protobuf:"bytes,4,opt,name=barcoding_configuration,json=barcodingConfiguration,proto3" json:"barcoding_configuration,omitempty"`
	// Control how target filtering is applied to output of basecaller.
	//
	// If no filtering parameters are provided then reads will not
	// be target-filtered.
	//
	// Since 3.7
	TargetFiltering *BasecallerConfiguration_TargetFiltering `protobuf:"bytes,5,opt,name=target_filtering,json=targetFiltering,proto3" json:"target_filtering,omitempty"`
	// Alignment configuration parameters.
	// If no configuration is specified alignment is disabled.
	//
	// Since 4.0
	AlignmentConfiguration *AlignmentConfiguration `protobuf:"bytes,6,opt,name=alignment_configuration,json=alignmentConfiguration,proto3" json:"alignment_configuration,omitempty"`
	// Lamp configuration parameters.
	// If no configuration is specified lamp is disabled.
	//
	// Since 4.1
	LampConfiguration *LampConfiguration `protobuf:"bytes,7,opt,name=lamp_configuration,json=lampConfiguration,proto3" json:"lamp_configuration,omitempty"`
}

func (x *BasecallerConfiguration) Reset() {
	*x = BasecallerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasecallerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasecallerConfiguration) ProtoMessage() {}

func (x *BasecallerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasecallerConfiguration.ProtoReflect.Descriptor instead.
func (*BasecallerConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{18}
}

func (x *BasecallerConfiguration) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *BasecallerConfiguration) GetConfigFilename() string {
	if x != nil {
		return x.ConfigFilename
	}
	return ""
}

func (x *BasecallerConfiguration) GetReadFiltering() *BasecallerConfiguration_ReadFiltering {
	if x != nil {
		return x.ReadFiltering
	}
	return nil
}

func (x *BasecallerConfiguration) GetBarcodingConfiguration() *BarcodingConfiguration {
	if x != nil {
		return x.BarcodingConfiguration
	}
	return nil
}

func (x *BasecallerConfiguration) GetTargetFiltering() *BasecallerConfiguration_TargetFiltering {
	if x != nil {
		return x.TargetFiltering
	}
	return nil
}

func (x *BasecallerConfiguration) GetAlignmentConfiguration() *AlignmentConfiguration {
	if x != nil {
		return x.AlignmentConfiguration
	}
	return nil
}

func (x *BasecallerConfiguration) GetLampConfiguration() *LampConfiguration {
	if x != nil {
		return x.LampConfiguration
	}
	return nil
}

type SetBasecallerConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs *BasecallerConfiguration `protobuf:"bytes,1,opt,name=configs,proto3" json:"configs,omitempty"`
}

func (x *SetBasecallerConfigurationRequest) Reset() {
	*x = SetBasecallerConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBasecallerConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBasecallerConfigurationRequest) ProtoMessage() {}

func (x *SetBasecallerConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBasecallerConfigurationRequest.ProtoReflect.Descriptor instead.
func (*SetBasecallerConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{19}
}

func (x *SetBasecallerConfigurationRequest) GetConfigs() *BasecallerConfiguration {
	if x != nil {
		return x.Configs
	}
	return nil
}

type SetBasecallerConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBasecallerConfigurationResponse) Reset() {
	*x = SetBasecallerConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBasecallerConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBasecallerConfigurationResponse) ProtoMessage() {}

func (x *SetBasecallerConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBasecallerConfigurationResponse.ProtoReflect.Descriptor instead.
func (*SetBasecallerConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{20}
}

type GetBasecallerConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBasecallerConfigurationRequest) Reset() {
	*x = GetBasecallerConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBasecallerConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasecallerConfigurationRequest) ProtoMessage() {}

func (x *GetBasecallerConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasecallerConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetBasecallerConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{21}
}

type GetPoreTypeConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPoreTypeConfigurationRequest) Reset() {
	*x = GetPoreTypeConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoreTypeConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoreTypeConfigurationRequest) ProtoMessage() {}

func (x *GetPoreTypeConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoreTypeConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetPoreTypeConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{22}
}

// The pore type configuration
//
// The ways of specifying a configuration are as follows:
// - global_pore_type: all wells have a pore type of global_pore_type.
// - channel_well_pore_types: channels are allowed different values per channel/well
//   (allows a subset of channels to be set).
type PoreTypeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PoreTypeConfig:
	//	*PoreTypeConfiguration_GlobalPoreType
	//	*PoreTypeConfiguration_ChannelWellPoreTypes
	PoreTypeConfig isPoreTypeConfiguration_PoreTypeConfig `protobuf_oneof:"pore_type_config"`
}

func (x *PoreTypeConfiguration) Reset() {
	*x = PoreTypeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoreTypeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoreTypeConfiguration) ProtoMessage() {}

func (x *PoreTypeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoreTypeConfiguration.ProtoReflect.Descriptor instead.
func (*PoreTypeConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{23}
}

func (m *PoreTypeConfiguration) GetPoreTypeConfig() isPoreTypeConfiguration_PoreTypeConfig {
	if m != nil {
		return m.PoreTypeConfig
	}
	return nil
}

func (x *PoreTypeConfiguration) GetGlobalPoreType() string {
	if x, ok := x.GetPoreTypeConfig().(*PoreTypeConfiguration_GlobalPoreType); ok {
		return x.GlobalPoreType
	}
	return ""
}

func (x *PoreTypeConfiguration) GetChannelWellPoreTypes() *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations {
	if x, ok := x.GetPoreTypeConfig().(*PoreTypeConfiguration_ChannelWellPoreTypes); ok {
		return x.ChannelWellPoreTypes
	}
	return nil
}

type isPoreTypeConfiguration_PoreTypeConfig interface {
	isPoreTypeConfiguration_PoreTypeConfig()
}

type PoreTypeConfiguration_GlobalPoreType struct {
	// Set all channel/wells to one pore type.
	GlobalPoreType string `protobuf:"bytes,1,opt,name=global_pore_type,json=globalPoreType,proto3,oneof"`
}

type PoreTypeConfiguration_ChannelWellPoreTypes struct {
	// Set channel/wells to different pore types.
	//
	// Pore types can be created without being used by adding an empty
	// entry.
	ChannelWellPoreTypes *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations `protobuf:"bytes,2,opt,name=channel_well_pore_types,json=channelWellPoreTypes,proto3,oneof"`
}

func (*PoreTypeConfiguration_GlobalPoreType) isPoreTypeConfiguration_PoreTypeConfig() {}

func (*PoreTypeConfiguration_ChannelWellPoreTypes) isPoreTypeConfiguration_PoreTypeConfig() {}

type SetPoreTypeConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPoreTypeConfigurationResponse) Reset() {
	*x = SetPoreTypeConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPoreTypeConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPoreTypeConfigurationResponse) ProtoMessage() {}

func (x *SetPoreTypeConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPoreTypeConfigurationResponse.ProtoReflect.Descriptor instead.
func (*SetPoreTypeConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{24}
}

// Configuration for the output writers for MinKNOWs
// analysis pipeline.
//
// Each writer has its own section in this message, where individual data elements
// can be enabled or disabled.
//
// File pattern attributes
// -----------------------
// Writers have a 'file_pattern' field which controls where individual files will be
// written to. The pattern is expanded for each individual read, and then the read
// placed in the required file.
// The tokens used to expand depend on the file type:
//
// Read centric files (fastq, (multi-)fast5, protobuf):
//  - read_classification:  The classification applied to the completed read (eg. strand).
//  - batch_number:         The batch number of this read, evaluated based on the destination file.
//  - read_id:              Unique read id for each read, formatted as a hash.
//  - read_number:          The read number (unique per channel, incrementing number assigned to each read by MinKNOW).
//  - channel_name:         The name of the channel which produced the read.
//  - read_start_time:      Read start time formatted in rfc3339 format.
//  - basecall_status:      Basecalling output status (derived from WriterDefaults section in analysis config).
//  - pore_type:            Type of pore (as specified by #set_pore_type_configuration).
//
// General attributes:
//  - daq_start_time:       Data acquisition start time formatted as YYYYMMDD_hhmm.
//  - protocol_start_time:  Time the current protocol was started.
//  - run_id:               Acquisition run id formatted as hash.
//  - short_run_id:         Shortened version of acquisition run id formatted as hash.
//  - protocol_run_id:      Protocol run id formatted as hash.
//  - short_protocol_run_id: Shortened protocol run id formatted as hash.
//  - asic_id:              Integer id assigned to the asic in the connected flow cell.
//  - flow_cell_id:         Flow cell integer as read from eeprom.
//  - machine_id:           Name of the machine (hostname or machine identifier depending on the sequencer type).
//  - device_id:            Name of the connected sequencing device (eg. MN12345).
//  - sample_id:            Sample id entered by the user when starting a protocol.
//  - version_string:       Version string of the running MinKNOW instance
//  - protocol_group_id:    Protocol group entered by user when starting a protocol.
//  - protocol_purpose:     Prupose of protocol (see protocol.set_protocol_purpose())
type WriterConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for the fast5 writer.
	//
	// If not specified, no multi fast5 outputs are generated.
	ReadFast5 *WriterConfiguration_ReadFast5Configuration `protobuf:"bytes,2,opt,name=read_fast5,json=readFast5,proto3" json:"read_fast5,omitempty"`
	// Configuration for the fastq writer.
	//
	// If not specified, no fastq outputs are generated.
	ReadFastq *WriterConfiguration_ReadFastqConfiguration `protobuf:"bytes,3,opt,name=read_fastq,json=readFastq,proto3" json:"read_fastq,omitempty"`
	// Configuration for the BAM writer.
	//
	// If not specified, no BAM outputs are generated.
	ReadBam *WriterConfiguration_ReadBamConfiguration `protobuf:"bytes,8,opt,name=read_bam,json=readBam,proto3" json:"read_bam,omitempty"`
	// Configuration for the protobuf writer.
	//
	// If not specified, no protobuf outputs are generated.
	ReadProtobuf *WriterConfiguration_ReadProtobufConfiguration `protobuf:"bytes,4,opt,name=read_protobuf,json=readProtobuf,proto3" json:"read_protobuf,omitempty"`
	// Configuration for Sequencing Summary file
	//
	// If not specified, no summary file is generated.
	SequencingSummary *WriterConfiguration_SequencingSummaryConfiguration `protobuf:"bytes,5,opt,name=sequencing_summary,json=sequencingSummary,proto3" json:"sequencing_summary,omitempty"`
	// Configuration for the bulk writer.
	//
	// If not specified, a basic bulk output is generated.
	Bulk *WriterConfiguration_BulkConfiguration `protobuf:"bytes,6,opt,name=bulk,proto3" json:"bulk,omitempty"`
	// Configuration for the report writer
	//
	// If acquisition.StartRequest.generate_report is set for the
	// acquisition period, and empty paths (or no report config) are supplied
	// for reports default paths are used.
	Report *WriterConfiguration_ReportConfiguration `protobuf:"bytes,7,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *WriterConfiguration) Reset() {
	*x = WriterConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration) ProtoMessage() {}

func (x *WriterConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25}
}

func (x *WriterConfiguration) GetReadFast5() *WriterConfiguration_ReadFast5Configuration {
	if x != nil {
		return x.ReadFast5
	}
	return nil
}

func (x *WriterConfiguration) GetReadFastq() *WriterConfiguration_ReadFastqConfiguration {
	if x != nil {
		return x.ReadFastq
	}
	return nil
}

func (x *WriterConfiguration) GetReadBam() *WriterConfiguration_ReadBamConfiguration {
	if x != nil {
		return x.ReadBam
	}
	return nil
}

func (x *WriterConfiguration) GetReadProtobuf() *WriterConfiguration_ReadProtobufConfiguration {
	if x != nil {
		return x.ReadProtobuf
	}
	return nil
}

func (x *WriterConfiguration) GetSequencingSummary() *WriterConfiguration_SequencingSummaryConfiguration {
	if x != nil {
		return x.SequencingSummary
	}
	return nil
}

func (x *WriterConfiguration) GetBulk() *WriterConfiguration_BulkConfiguration {
	if x != nil {
		return x.Bulk
	}
	return nil
}

func (x *WriterConfiguration) GetReport() *WriterConfiguration_ReportConfiguration {
	if x != nil {
		return x.Report
	}
	return nil
}

type SetWriterConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetWriterConfigurationResponse) Reset() {
	*x = SetWriterConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWriterConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWriterConfigurationResponse) ProtoMessage() {}

func (x *SetWriterConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWriterConfigurationResponse.ProtoReflect.Descriptor instead.
func (*SetWriterConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{26}
}

type GetWriterConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWriterConfigurationRequest) Reset() {
	*x = GetWriterConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWriterConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWriterConfigurationRequest) ProtoMessage() {}

func (x *GetWriterConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWriterConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetWriterConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{27}
}

type GetReadClassificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetReadClassificationsRequest) Reset() {
	*x = GetReadClassificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadClassificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadClassificationsRequest) ProtoMessage() {}

func (x *GetReadClassificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadClassificationsRequest.ProtoReflect.Descriptor instead.
func (*GetReadClassificationsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{28}
}

type GetReadClassificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadClassifications map[int32]string `protobuf:"bytes,1,rep,name=read_classifications,json=readClassifications,proto3" json:"read_classifications,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetReadClassificationsResponse) Reset() {
	*x = GetReadClassificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadClassificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadClassificationsResponse) ProtoMessage() {}

func (x *GetReadClassificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadClassificationsResponse.ProtoReflect.Descriptor instead.
func (*GetReadClassificationsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{29}
}

func (x *GetReadClassificationsResponse) GetReadClassifications() map[int32]string {
	if x != nil {
		return x.ReadClassifications
	}
	return nil
}

type ReadClassificationParams_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An execution rule has the following format:
	//
	// "pore = (median,gt,185)&(median,lt,260)&(median_sd,lt,40)"
	//
	// "median" and "median_sd" are apart of a small subset of variable values describing a read or read chunk,
	// that are exposed to execution rules. The full list of variable values and their descriptions are documented
	// here: https://minknow.git.oxfordnanolabs.local/minknow-core/analysis/reads.html
	//
	// "gt" and "lt" describe how data can be compared:
	// gt: greater than
	// lt: less than
	// eq: equal
	// ne: not equal
	//
	// Constant values like "185" or "260" can also be specified. These can be real numbers also.
	//
	// Note that variables dont always have to be on the left and const values on the right. The
	// following sub rules are also valid:
	//
	// (200,lt,median_sd)
	// (median_before,gt,median)
	// (5,lt,10)
	//
	RulesInExecutionOrder []string `protobuf:"bytes,2,rep,name=rules_in_execution_order,json=rulesInExecutionOrder,proto3" json:"rules_in_execution_order,omitempty"`
}

func (x *ReadClassificationParams_Parameters) Reset() {
	*x = ReadClassificationParams_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadClassificationParams_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadClassificationParams_Parameters) ProtoMessage() {}

func (x *ReadClassificationParams_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadClassificationParams_Parameters.ProtoReflect.Descriptor instead.
func (*ReadClassificationParams_Parameters) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ReadClassificationParams_Parameters) GetRulesInExecutionOrder() []string {
	if x != nil {
		return x.RulesInExecutionOrder
	}
	return nil
}

type ChannelStates_Logic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Criteria string `protobuf:"bytes,1,opt,name=criteria,proto3" json:"criteria,omitempty"`
	// Specifies the order in which channel state criteria will be evaluated; the
	// smaller the number, the earlier it will be evaluated. The first criteria to match
	// will be selected
	Rank int32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// Note that this is a regex based pattern for describing a read classification
	// sequence. For example you can specify:
	//      "unavailableunavailable"
	// or:
	//      "(unavailable)(unavailable)"
	//
	// to recognise two consecutive read chunks classified as unavailable.
	//
	// You can also use "?" at the end of one of the classifications in the sequence
	// to indicate that it may or may not be present at that point. For example:
	//      "(pore)(transition)?(event)"
	//
	// This will match both of the sequences:
	//      pore, transition, event
	//      pore, event
	//
	// The technical documentation has more information on the range of regex patterns you can
	// apply. https://minknow.git.oxfordnanolabs.local/minknow-core/analysis/channel-states.html
	Pattern        string `protobuf:"bytes,4,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Classification string `protobuf:"bytes,5,opt,name=classification,proto3" json:"classification,omitempty"`
	// Range is [lower_pa, upper_pa)
	Ranges    *ChannelStates_Logic_Ranges    `protobuf:"bytes,6,opt,name=ranges,proto3" json:"ranges,omitempty"`
	Behaviour *ChannelStates_Logic_Behaviour `protobuf:"bytes,7,opt,name=behaviour,proto3" json:"behaviour,omitempty"`
}

func (x *ChannelStates_Logic) Reset() {
	*x = ChannelStates_Logic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStates_Logic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStates_Logic) ProtoMessage() {}

func (x *ChannelStates_Logic) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStates_Logic.ProtoReflect.Descriptor instead.
func (*ChannelStates_Logic) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ChannelStates_Logic) GetCriteria() string {
	if x != nil {
		return x.Criteria
	}
	return ""
}

func (x *ChannelStates_Logic) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ChannelStates_Logic) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ChannelStates_Logic) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *ChannelStates_Logic) GetRanges() *ChannelStates_Logic_Ranges {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *ChannelStates_Logic) GetBehaviour() *ChannelStates_Logic_Behaviour {
	if x != nil {
		return x.Behaviour
	}
	return nil
}

type ChannelStates_Style struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order  *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Label  string                  `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Colour string                  `protobuf:"bytes,3,opt,name=colour,proto3" json:"colour,omitempty"`
}

func (x *ChannelStates_Style) Reset() {
	*x = ChannelStates_Style{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStates_Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStates_Style) ProtoMessage() {}

func (x *ChannelStates_Style) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStates_Style.ProtoReflect.Descriptor instead.
func (*ChannelStates_Style) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ChannelStates_Style) GetOrder() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ChannelStates_Style) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ChannelStates_Style) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

type ChannelStates_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Style *ChannelStates_Style `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *ChannelStates_Group) Reset() {
	*x = ChannelStates_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStates_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStates_Group) ProtoMessage() {}

func (x *ChannelStates_Group) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStates_Group.ProtoReflect.Descriptor instead.
func (*ChannelStates_Group) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{3, 2}
}

func (x *ChannelStates_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelStates_Group) GetStyle() *ChannelStates_Style {
	if x != nil {
		return x.Style
	}
	return nil
}

type ChannelStates_Logic_Behaviour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: MinKNOW 5: replace int32 with bool for these options
	// these are ints but act like bools
	ResetOnMuxChange  int32 `protobuf:"varint,1,opt,name=reset_on_mux_change,json=resetOnMuxChange,proto3" json:"reset_on_mux_change,omitempty"`
	ResetOnWellChange int32 `protobuf:"varint,2,opt,name=reset_on_well_change,json=resetOnWellChange,proto3" json:"reset_on_well_change,omitempty"`
	// If the latch value is set to true, then when the criteria for this channel state
	// is active, then the latch will keep it active until the channel state is reset.
	Latch int32 `protobuf:"varint,3,opt,name=latch,proto3" json:"latch,omitempty"`
	// An 'effective mux change' is any mux change apart from the one triggered
	// with the purpose of disconnecting a channel (turning a channel off). For example, if
	// a channel is in pore, and the user changes the channel configuration to 'disconnected',
	// that mux change will not be an effective mux change. Any other mux change is considered
	// an 'effective mux change'. So if a channel saturates,
	// the mux change to disconnected is an effective mux change. Similarly, a
	// change from disconnected to a pore is an effective mux change.
	//
	// Use this reset mode to make the channel state persist on non-effective mux changes.
	// For example, if a channel state is in 'multiple' and the user triggers a channel
	// configuration change to 'disconnected', the state will remain in multiple if it has
	// this option on. The multiple state will be reset at all other mux changes (i.e. effective
	// mux changes).
	ResetOnEffectiveMuxChange int32 `protobuf:"varint,4,opt,name=reset_on_effective_mux_change,json=resetOnEffectiveMuxChange,proto3" json:"reset_on_effective_mux_change,omitempty"`
	// An 'effective well change' is any well change apart from the one triggered
	// with the purpose of disconnecting a channel (turning a channel off). For example, if
	// a channel is in well_1, and the user changes the channel configuration to 'unblock_1',
	// that change will not be an effective well change. A change to disconnected is also
	// not considered an effective well change.
	//
	// Use this reset mode to make the channel state persist on non-effective well changes.
	// For example, if a channel state is in 'multiple' and the user triggers a channel
	// configuration change to 'disconnected', the state will remain in multiple if it has
	// this option on. The multiple state will be reset then when the mux is set to a different
	// setting.
	ResetOnEffectiveWellChange int32 `protobuf:"varint,5,opt,name=reset_on_effective_well_change,json=resetOnEffectiveWellChange,proto3" json:"reset_on_effective_well_change,omitempty"`
}

func (x *ChannelStates_Logic_Behaviour) Reset() {
	*x = ChannelStates_Logic_Behaviour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStates_Logic_Behaviour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStates_Logic_Behaviour) ProtoMessage() {}

func (x *ChannelStates_Logic_Behaviour) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStates_Logic_Behaviour.ProtoReflect.Descriptor instead.
func (*ChannelStates_Logic_Behaviour) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *ChannelStates_Logic_Behaviour) GetResetOnMuxChange() int32 {
	if x != nil {
		return x.ResetOnMuxChange
	}
	return 0
}

func (x *ChannelStates_Logic_Behaviour) GetResetOnWellChange() int32 {
	if x != nil {
		return x.ResetOnWellChange
	}
	return 0
}

func (x *ChannelStates_Logic_Behaviour) GetLatch() int32 {
	if x != nil {
		return x.Latch
	}
	return 0
}

func (x *ChannelStates_Logic_Behaviour) GetResetOnEffectiveMuxChange() int32 {
	if x != nil {
		return x.ResetOnEffectiveMuxChange
	}
	return 0
}

func (x *ChannelStates_Logic_Behaviour) GetResetOnEffectiveWellChange() int32 {
	if x != nil {
		return x.ResetOnEffectiveWellChange
	}
	return 0
}

// Dont really like this way of doing it, but it has to match the old way...
type ChannelStates_Logic_Ranges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *ChannelStates_Logic_Ranges_Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *ChannelStates_Logic_Ranges) Reset() {
	*x = ChannelStates_Logic_Ranges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStates_Logic_Ranges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStates_Logic_Ranges) ProtoMessage() {}

func (x *ChannelStates_Logic_Ranges) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStates_Logic_Ranges.ProtoReflect.Descriptor instead.
func (*ChannelStates_Logic_Ranges) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *ChannelStates_Logic_Ranges) GetRange() *ChannelStates_Logic_Ranges_Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type ChannelStates_Logic_Ranges_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerPa int32 `protobuf:"varint,1,opt,name=lower_pa,json=lowerPa,proto3" json:"lower_pa,omitempty"`
	UpperPa int32 `protobuf:"varint,2,opt,name=upper_pa,json=upperPa,proto3" json:"upper_pa,omitempty"`
}

func (x *ChannelStates_Logic_Ranges_Range) Reset() {
	*x = ChannelStates_Logic_Ranges_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStates_Logic_Ranges_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStates_Logic_Ranges_Range) ProtoMessage() {}

func (x *ChannelStates_Logic_Ranges_Range) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStates_Logic_Ranges_Range.ProtoReflect.Descriptor instead.
func (*ChannelStates_Logic_Ranges_Range) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{3, 0, 1, 0}
}

func (x *ChannelStates_Logic_Ranges_Range) GetLowerPa() int32 {
	if x != nil {
		return x.LowerPa
	}
	return 0
}

func (x *ChannelStates_Logic_Ranges_Range) GetUpperPa() int32 {
	if x != nil {
		return x.UpperPa
	}
	return 0
}

type GetChannelStatesDescResponse_Style struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human-readable name to display when rendering this channel state or group.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// A sentence describing the meaning of the channel state or group.
	//
	// This can be used as a tooltip, for example.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The colour to use when rendering this channel state or group.
	//
	// This is a six-digit hex string describing an RGB colour (eg: "ff00ff" for purple).
	Colour string `protobuf:"bytes,3,opt,name=colour,proto3" json:"colour,omitempty"`
}

func (x *GetChannelStatesDescResponse_Style) Reset() {
	*x = GetChannelStatesDescResponse_Style{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelStatesDescResponse_Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelStatesDescResponse_Style) ProtoMessage() {}

func (x *GetChannelStatesDescResponse_Style) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelStatesDescResponse_Style.ProtoReflect.Descriptor instead.
func (*GetChannelStatesDescResponse_Style) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GetChannelStatesDescResponse_Style) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GetChannelStatesDescResponse_Style) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetChannelStatesDescResponse_Style) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

type GetChannelStatesDescResponse_ChannelState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The numeric identifier of the state.
	//
	// This is what is reported in any other APIs that return a channel state ID.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The internal name of the state.
	//
	// This is what is reported in any other APIs that return a channel state name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// How to render the channel state in a graphical user interface.
	//
	// Note that the style may be missing from some channel states (such as the ones that are
	// built in to MinKNOW).
	Style *GetChannelStatesDescResponse_Style `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	// An order ranking for the channel states when they are ungrouped.
	//
	// This can be used to order the channel states after merging the groups.
	GlobalOrder uint32 `protobuf:"varint,4,opt,name=global_order,json=globalOrder,proto3" json:"global_order,omitempty"`
}

func (x *GetChannelStatesDescResponse_ChannelState) Reset() {
	*x = GetChannelStatesDescResponse_ChannelState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelStatesDescResponse_ChannelState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelStatesDescResponse_ChannelState) ProtoMessage() {}

func (x *GetChannelStatesDescResponse_ChannelState) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelStatesDescResponse_ChannelState.ProtoReflect.Descriptor instead.
func (*GetChannelStatesDescResponse_ChannelState) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{12, 1}
}

func (x *GetChannelStatesDescResponse_ChannelState) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetChannelStatesDescResponse_ChannelState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetChannelStatesDescResponse_ChannelState) GetStyle() *GetChannelStatesDescResponse_Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *GetChannelStatesDescResponse_ChannelState) GetGlobalOrder() uint32 {
	if x != nil {
		return x.GlobalOrder
	}
	return 0
}

type GetChannelStatesDescResponse_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// How to render the group in a graphical user interface.
	//
	// Note that the style may be missing from some groups (such as the ones that are built in
	// to MinKNOW).
	Style *GetChannelStatesDescResponse_Style `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	// The channel states contained in the group.
	//
	// The groups are ordered according to the "order" attribute of the channel state style in
	// the channel states configuration.
	States []*GetChannelStatesDescResponse_ChannelState `protobuf:"bytes,3,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *GetChannelStatesDescResponse_Group) Reset() {
	*x = GetChannelStatesDescResponse_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelStatesDescResponse_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelStatesDescResponse_Group) ProtoMessage() {}

func (x *GetChannelStatesDescResponse_Group) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelStatesDescResponse_Group.ProtoReflect.Descriptor instead.
func (*GetChannelStatesDescResponse_Group) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{12, 2}
}

func (x *GetChannelStatesDescResponse_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetChannelStatesDescResponse_Group) GetStyle() *GetChannelStatesDescResponse_Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *GetChannelStatesDescResponse_Group) GetStates() []*GetChannelStatesDescResponse_ChannelState {
	if x != nil {
		return x.States
	}
	return nil
}

type BasecallerConfiguration_ReadFiltering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinQscore       *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=min_qscore,json=minQscore,proto3" json:"min_qscore,omitempty"`
	MinSamples      *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=min_samples,json=minSamples,proto3" json:"min_samples,omitempty"`
	MaxSamples      *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=max_samples,json=maxSamples,proto3" json:"max_samples,omitempty"`
	MinBases        *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=min_bases,json=minBases,proto3" json:"min_bases,omitempty"`
	MaxBases        *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=max_bases,json=maxBases,proto3" json:"max_bases,omitempty"`
	MaxFailedChunks *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=max_failed_chunks,json=maxFailedChunks,proto3" json:"max_failed_chunks,omitempty"`
}

func (x *BasecallerConfiguration_ReadFiltering) Reset() {
	*x = BasecallerConfiguration_ReadFiltering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasecallerConfiguration_ReadFiltering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasecallerConfiguration_ReadFiltering) ProtoMessage() {}

func (x *BasecallerConfiguration_ReadFiltering) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasecallerConfiguration_ReadFiltering.ProtoReflect.Descriptor instead.
func (*BasecallerConfiguration_ReadFiltering) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{18, 0}
}

func (x *BasecallerConfiguration_ReadFiltering) GetMinQscore() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinQscore
	}
	return nil
}

func (x *BasecallerConfiguration_ReadFiltering) GetMinSamples() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MinSamples
	}
	return nil
}

func (x *BasecallerConfiguration_ReadFiltering) GetMaxSamples() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxSamples
	}
	return nil
}

func (x *BasecallerConfiguration_ReadFiltering) GetMinBases() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MinBases
	}
	return nil
}

func (x *BasecallerConfiguration_ReadFiltering) GetMaxBases() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxBases
	}
	return nil
}

func (x *BasecallerConfiguration_ReadFiltering) GetMaxFailedChunks() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxFailedChunks
	}
	return nil
}

// Since 3.7
type BasecallerConfiguration_TargetFiltering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinQscore *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=min_qscore,json=minQscore,proto3" json:"min_qscore,omitempty"`
	MinBases  *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=min_bases,json=minBases,proto3" json:"min_bases,omitempty"`
	MaxBases  *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=max_bases,json=maxBases,proto3" json:"max_bases,omitempty"`
}

func (x *BasecallerConfiguration_TargetFiltering) Reset() {
	*x = BasecallerConfiguration_TargetFiltering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasecallerConfiguration_TargetFiltering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasecallerConfiguration_TargetFiltering) ProtoMessage() {}

func (x *BasecallerConfiguration_TargetFiltering) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasecallerConfiguration_TargetFiltering.ProtoReflect.Descriptor instead.
func (*BasecallerConfiguration_TargetFiltering) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{18, 1}
}

func (x *BasecallerConfiguration_TargetFiltering) GetMinQscore() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinQscore
	}
	return nil
}

func (x *BasecallerConfiguration_TargetFiltering) GetMinBases() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MinBases
	}
	return nil
}

func (x *BasecallerConfiguration_TargetFiltering) GetMaxBases() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxBases
	}
	return nil
}

type PoreTypeConfiguration_ChannelWell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel number to control pore type for.
	//
	// Must be less than channel count for the current platform
	Channel uint32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Well to control pore type for.
	//
	// Wells outside the available wells on the flowcell are ignored.
	Well uint32 `protobuf:"varint,2,opt,name=well,proto3" json:"well,omitempty"`
}

func (x *PoreTypeConfiguration_ChannelWell) Reset() {
	*x = PoreTypeConfiguration_ChannelWell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoreTypeConfiguration_ChannelWell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoreTypeConfiguration_ChannelWell) ProtoMessage() {}

func (x *PoreTypeConfiguration_ChannelWell) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoreTypeConfiguration_ChannelWell.ProtoReflect.Descriptor instead.
func (*PoreTypeConfiguration_ChannelWell) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{23, 0}
}

func (x *PoreTypeConfiguration_ChannelWell) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *PoreTypeConfiguration_ChannelWell) GetWell() uint32 {
	if x != nil {
		return x.Well
	}
	return 0
}

type PoreTypeConfiguration_ChannelWellPoreTypeConfigurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map with pore type as key, mapped to the list of wells to set for.
	//
	// It is undefined what will happen if one call sets the pore type of
	// a channel and well to two pore types.
	PoreTypes map[string]*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList `protobuf:"bytes,1,rep,name=pore_types,json=poreTypes,proto3" json:"pore_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations) Reset() {
	*x = PoreTypeConfiguration_ChannelWellPoreTypeConfigurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations) ProtoMessage() {}

func (x *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoreTypeConfiguration_ChannelWellPoreTypeConfigurations.ProtoReflect.Descriptor instead.
func (*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{23, 1}
}

func (x *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations) GetPoreTypes() map[string]*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList {
	if x != nil {
		return x.PoreTypes
	}
	return nil
}

type PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelWell []*PoreTypeConfiguration_ChannelWell `protobuf:"bytes,1,rep,name=channel_well,json=channelWell,proto3" json:"channel_well,omitempty"`
}

func (x *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList) Reset() {
	*x = PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList) ProtoMessage() {}

func (x *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList.ProtoReflect.Descriptor instead.
func (*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{23, 1, 0}
}

func (x *PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList) GetChannelWell() []*PoreTypeConfiguration_ChannelWell {
	if x != nil {
		return x.ChannelWell
	}
	return nil
}

// Used to control which channels for a specific
// data type emit data
type WriterConfiguration_ChannelConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control the way channels are enabled for this data type.
	//
	// Types that are assignable to Channels:
	//	*WriterConfiguration_ChannelConfiguration_AllChannels
	//	*WriterConfiguration_ChannelConfiguration_SpecificChannels
	//	*WriterConfiguration_ChannelConfiguration_ChannelRanges_
	Channels isWriterConfiguration_ChannelConfiguration_Channels `protobuf_oneof:"channels"`
}

func (x *WriterConfiguration_ChannelConfiguration) Reset() {
	*x = WriterConfiguration_ChannelConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ChannelConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ChannelConfiguration) ProtoMessage() {}

func (x *WriterConfiguration_ChannelConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ChannelConfiguration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ChannelConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 0}
}

func (m *WriterConfiguration_ChannelConfiguration) GetChannels() isWriterConfiguration_ChannelConfiguration_Channels {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (x *WriterConfiguration_ChannelConfiguration) GetAllChannels() bool {
	if x, ok := x.GetChannels().(*WriterConfiguration_ChannelConfiguration_AllChannels); ok {
		return x.AllChannels
	}
	return false
}

func (x *WriterConfiguration_ChannelConfiguration) GetSpecificChannels() *WriterConfiguration_ChannelConfiguration_ChannelList {
	if x, ok := x.GetChannels().(*WriterConfiguration_ChannelConfiguration_SpecificChannels); ok {
		return x.SpecificChannels
	}
	return nil
}

func (x *WriterConfiguration_ChannelConfiguration) GetChannelRanges() *WriterConfiguration_ChannelConfiguration_ChannelRanges {
	if x, ok := x.GetChannels().(*WriterConfiguration_ChannelConfiguration_ChannelRanges_); ok {
		return x.ChannelRanges
	}
	return nil
}

type isWriterConfiguration_ChannelConfiguration_Channels interface {
	isWriterConfiguration_ChannelConfiguration_Channels()
}

type WriterConfiguration_ChannelConfiguration_AllChannels struct {
	AllChannels bool `protobuf:"varint,1,opt,name=all_channels,json=allChannels,proto3,oneof"`
}

type WriterConfiguration_ChannelConfiguration_SpecificChannels struct {
	SpecificChannels *WriterConfiguration_ChannelConfiguration_ChannelList `protobuf:"bytes,2,opt,name=specific_channels,json=specificChannels,proto3,oneof"`
}

type WriterConfiguration_ChannelConfiguration_ChannelRanges_ struct {
	ChannelRanges *WriterConfiguration_ChannelConfiguration_ChannelRanges `protobuf:"bytes,3,opt,name=channel_ranges,json=channelRanges,proto3,oneof"`
}

func (*WriterConfiguration_ChannelConfiguration_AllChannels) isWriterConfiguration_ChannelConfiguration_Channels() {
}

func (*WriterConfiguration_ChannelConfiguration_SpecificChannels) isWriterConfiguration_ChannelConfiguration_Channels() {
}

func (*WriterConfiguration_ChannelConfiguration_ChannelRanges_) isWriterConfiguration_ChannelConfiguration_Channels() {
}

type WriterConfiguration_ReadFast5Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control the level of compression applied to read data.
	//
	// 0:   No compression will be applied to data.
	// 1-9: Passed to zlib compression, 1 is the fastest
	//      compression, 9 is the smallest possible output.
	CompressionLevel int32 `protobuf:"varint,1,opt,name=compression_level,json=compressionLevel,proto3" json:"compression_level,omitempty"`
	// Control the type of compression applied to the read data.
	//
	// By default the vbz compressor is used (except in the single read case).
	CompressionType WriterConfiguration_CompressionType `protobuf:"varint,14,opt,name=compression_type,json=compressionType,proto3,enum=minknow_api.analysis_configuration.WriterConfiguration_CompressionType" json:"compression_type,omitempty"`
	// Raw data, stored with calibration data, and read attributes.
	//
	// Stored under /Raw/Reads_*/Signal
	Raw *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
	// Fastq data, stored as a string.
	//
	// Stored under /Analyses/Basecall_1D_*/BaseCalled_(template|complement)/Fastq
	Fastq *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,3,opt,name=fastq,proto3" json:"fastq,omitempty"`
	// Trace table received from Guppy
	//
	// Stored under /Analyses/Basecall_1D_*/BaseCalled_template/Trace
	TraceTable *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,11,opt,name=trace_table,json=traceTable,proto3" json:"trace_table,omitempty"`
	// Move table received from Guppy
	//
	// Stored under /Analyses/Basecall_1D_*/BaseCalled_template/Move
	MoveTable *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,12,opt,name=move_table,json=moveTable,proto3" json:"move_table,omitempty"`
	// Base modification probability table
	//
	// Store under /Analyses/Basecall_1D_*/BaseCalled_template/ModBaseProbs
	ModificationsTable *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,13,opt,name=modifications_table,json=modificationsTable,proto3" json:"modifications_table,omitempty"`
	// Prevent reads which have successfully basecalled being written to fast5.
	DisableWritingPassedReads bool `protobuf:"varint,5,opt,name=disable_writing_passed_reads,json=disableWritingPassedReads,proto3" json:"disable_writing_passed_reads,omitempty"`
	// Prevent reads which have failed basecalling being written to fast5.
	DisableWritingFailedReads bool `protobuf:"varint,6,opt,name=disable_writing_failed_reads,json=disableWritingFailedReads,proto3" json:"disable_writing_failed_reads,omitempty"`
	// disable writing reads which have been force skipped by the basecaller.
	DisableWritingForceSkippedReads bool `protobuf:"varint,7,opt,name=disable_writing_force_skipped_reads,json=disableWritingForceSkippedReads,proto3" json:"disable_writing_force_skipped_reads,omitempty"`
	// The pattern used to find a fast5 files name.
	//
	// default: fast5{basecall_status}/{flow_cell_id}_{run_id}_{batch_number}.fast5
	// Where each {xxx} section is replaced with an attribute from the minknow state
	// when the file is written.
	//
	// See file pattern attributes above.
	FilePattern string `protobuf:"bytes,8,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	// The pattern used to find a fastq header.
	//
	// default: {read_id} runid={run_id} read={read_number} ch={channel_name} start_time={read_start_time}
	// Where each {xxx} section is replaced with an attribute from the minknow state
	// when the fastq is generated.
	FastqHeaderPattern string `protobuf:"bytes,9,opt,name=fastq_header_pattern,json=fastqHeaderPattern,proto3" json:"fastq_header_pattern,omitempty"`
	// How many reads are placed in each file (after batch_count files {batch_number}
	// is increased in the filename).
	BatchCount uint32 `protobuf:"varint,10,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
}

func (x *WriterConfiguration_ReadFast5Configuration) Reset() {
	*x = WriterConfiguration_ReadFast5Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ReadFast5Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ReadFast5Configuration) ProtoMessage() {}

func (x *WriterConfiguration_ReadFast5Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ReadFast5Configuration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ReadFast5Configuration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 1}
}

func (x *WriterConfiguration_ReadFast5Configuration) GetCompressionLevel() int32 {
	if x != nil {
		return x.CompressionLevel
	}
	return 0
}

func (x *WriterConfiguration_ReadFast5Configuration) GetCompressionType() WriterConfiguration_CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return WriterConfiguration_DefaultCompression
}

func (x *WriterConfiguration_ReadFast5Configuration) GetRaw() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *WriterConfiguration_ReadFast5Configuration) GetFastq() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Fastq
	}
	return nil
}

func (x *WriterConfiguration_ReadFast5Configuration) GetTraceTable() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.TraceTable
	}
	return nil
}

func (x *WriterConfiguration_ReadFast5Configuration) GetMoveTable() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.MoveTable
	}
	return nil
}

func (x *WriterConfiguration_ReadFast5Configuration) GetModificationsTable() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.ModificationsTable
	}
	return nil
}

func (x *WriterConfiguration_ReadFast5Configuration) GetDisableWritingPassedReads() bool {
	if x != nil {
		return x.DisableWritingPassedReads
	}
	return false
}

func (x *WriterConfiguration_ReadFast5Configuration) GetDisableWritingFailedReads() bool {
	if x != nil {
		return x.DisableWritingFailedReads
	}
	return false
}

func (x *WriterConfiguration_ReadFast5Configuration) GetDisableWritingForceSkippedReads() bool {
	if x != nil {
		return x.DisableWritingForceSkippedReads
	}
	return false
}

func (x *WriterConfiguration_ReadFast5Configuration) GetFilePattern() string {
	if x != nil {
		return x.FilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReadFast5Configuration) GetFastqHeaderPattern() string {
	if x != nil {
		return x.FastqHeaderPattern
	}
	return ""
}

func (x *WriterConfiguration_ReadFast5Configuration) GetBatchCount() uint32 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

type WriterConfiguration_ReadFastqConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control if a fastq file should be generated per channel.
	Enable *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// The pattern used to find a fastq files name.
	//
	// default: fastq{basecall_status}/{flow_cell_id}_{run_id}_{batch_number}.fastq
	// Where each {xxx} section is replaced with an attribute from the minknow state when the file is written.
	//
	// See file pattern attributes above.
	FilePattern string `protobuf:"bytes,2,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	// The pattern used to find a fastq header.
	//
	// default: {read_id} runid={run_id} read={read_number} ch={channel_name} start_time={read_start_time}
	// Where each {xxx} section is replaced with an attribute from the minknow state
	// when the fastq is generated.
	HeaderPattern string `protobuf:"bytes,3,opt,name=header_pattern,json=headerPattern,proto3" json:"header_pattern,omitempty"`
	// How many files are placed in each batch (after batch_count files {batch_number} is increased in the filename).
	BatchCount uint32 `protobuf:"varint,4,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
	// Compress fastq files with gzip compression.
	// default: false
	Compression bool `protobuf:"varint,5,opt,name=compression,proto3" json:"compression,omitempty"`
}

func (x *WriterConfiguration_ReadFastqConfiguration) Reset() {
	*x = WriterConfiguration_ReadFastqConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ReadFastqConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ReadFastqConfiguration) ProtoMessage() {}

func (x *WriterConfiguration_ReadFastqConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ReadFastqConfiguration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ReadFastqConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 2}
}

func (x *WriterConfiguration_ReadFastqConfiguration) GetEnable() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *WriterConfiguration_ReadFastqConfiguration) GetFilePattern() string {
	if x != nil {
		return x.FilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReadFastqConfiguration) GetHeaderPattern() string {
	if x != nil {
		return x.HeaderPattern
	}
	return ""
}

func (x *WriterConfiguration_ReadFastqConfiguration) GetBatchCount() uint32 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

func (x *WriterConfiguration_ReadFastqConfiguration) GetCompression() bool {
	if x != nil {
		return x.Compression
	}
	return false
}

type WriterConfiguration_ReadBamConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control if a BAM file should be generated per channel.
	Enable *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// The pattern used to find a BAM files name.
	//
	// default: bam{basecall_status}/{flow_cell_id}_{run_id}_{batch_number}.bam
	// Where each {xxx} section is replaced with an attribute from the minknow state when the file is written.
	//
	// See file pattern attributes above.
	FilePattern string `protobuf:"bytes,2,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	// How many files are placed in each batch (after batch_count files {batch_number} is increased in the filename).
	BatchCount uint32 `protobuf:"varint,3,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
}

func (x *WriterConfiguration_ReadBamConfiguration) Reset() {
	*x = WriterConfiguration_ReadBamConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ReadBamConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ReadBamConfiguration) ProtoMessage() {}

func (x *WriterConfiguration_ReadBamConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ReadBamConfiguration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ReadBamConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 3}
}

func (x *WriterConfiguration_ReadBamConfiguration) GetEnable() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *WriterConfiguration_ReadBamConfiguration) GetFilePattern() string {
	if x != nil {
		return x.FilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReadBamConfiguration) GetBatchCount() uint32 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

type WriterConfiguration_ReadProtobufConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control if a protobuf file should be generated per channel.
	Enable *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// The pattern used to find a protobuf files name.
	//
	// default: pbread{basecall_status}/{batch_number}/{flow_cell_id}_{run_id}_ch_{channel_name}_read_{read_number}.pbread
	// Where each {xxx} section is replaced with an attribute from the minknow state
	// when the file is written.
	//
	// See file pattern attributes above.
	FilePattern string `protobuf:"bytes,2,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	// How many files are placed in each batch (after batch_count files {batch_number} is increased in the filename).
	BatchCount uint32 `protobuf:"varint,3,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
}

func (x *WriterConfiguration_ReadProtobufConfiguration) Reset() {
	*x = WriterConfiguration_ReadProtobufConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ReadProtobufConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ReadProtobufConfiguration) ProtoMessage() {}

func (x *WriterConfiguration_ReadProtobufConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ReadProtobufConfiguration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ReadProtobufConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 4}
}

func (x *WriterConfiguration_ReadProtobufConfiguration) GetEnable() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *WriterConfiguration_ReadProtobufConfiguration) GetFilePattern() string {
	if x != nil {
		return x.FilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReadProtobufConfiguration) GetBatchCount() uint32 {
	if x != nil {
		return x.BatchCount
	}
	return 0
}

type WriterConfiguration_SequencingSummaryConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Should a sequencing summary file be generated
	Enable *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// The pattern used to find a summary files name.
	//
	// default: sequencing_summary_{flow_cell_id}_{short_run_id}.txt
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// See file pattern attributes above.
	FilePattern string `protobuf:"bytes,2,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
}

func (x *WriterConfiguration_SequencingSummaryConfiguration) Reset() {
	*x = WriterConfiguration_SequencingSummaryConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_SequencingSummaryConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_SequencingSummaryConfiguration) ProtoMessage() {}

func (x *WriterConfiguration_SequencingSummaryConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_SequencingSummaryConfiguration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_SequencingSummaryConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 5}
}

func (x *WriterConfiguration_SequencingSummaryConfiguration) GetEnable() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *WriterConfiguration_SequencingSummaryConfiguration) GetFilePattern() string {
	if x != nil {
		return x.FilePattern
	}
	return ""
}

// Control settings for the bulk writer
type WriterConfiguration_BulkConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control the level of compression applied to read data.
	//
	// 0:   No compression will be applied to data.
	// 1-9: Passed to zlib compression, 1 is the fastest
	//      compression, 9 is the smallest possible output.
	CompressionLevel int32 `protobuf:"varint,2,opt,name=compression_level,json=compressionLevel,proto3" json:"compression_level,omitempty"`
	// Control the type of compression applied to the read data.
	//
	// By default the vbz compressor is used (except in the single read case).
	CompressionType WriterConfiguration_CompressionType `protobuf:"varint,13,opt,name=compression_type,json=compressionType,proto3,enum=minknow_api.analysis_configuration.WriterConfiguration_CompressionType" json:"compression_type,omitempty"`
	// The pattern used to find a bulk files name. If left empty but output is
	// enabled a default pattern is used.
	//
	// default: {data_set}.fast5
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// See file pattern attributes above.
	FilePattern string `protobuf:"bytes,14,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	// Raw data, stored with channel calibration data
	//
	// Stored under /Raw/Channel_*/Signal
	Raw *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
	// Minknow event data
	//
	// Stored under /IntermediateData/Channel_*/Events
	Events *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,4,opt,name=events,proto3" json:"events,omitempty"`
	// Minknow read data
	//
	// Stored under /IntermediateData/Channel_*/Reads
	Reads *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,5,opt,name=reads,proto3" json:"reads,omitempty"`
	// Device multiplex data
	//
	// Stored under /MultiplexData/Channel_*/Multiplex
	Multiplex *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,6,opt,name=multiplex,proto3" json:"multiplex,omitempty"`
	// Channel state data
	//
	// Stored under /StateData/Channel_*/States
	ChannelStates *WriterConfiguration_ChannelConfiguration `protobuf:"bytes,7,opt,name=channel_states,json=channelStates,proto3" json:"channel_states,omitempty"`
	// Device metadata (bias and temperature information)
	//
	// Stored in a per frame sequence in /Device/MetaData
	DeviceMetadata bool `protobuf:"varint,11,opt,name=device_metadata,json=deviceMetadata,proto3" json:"device_metadata,omitempty"`
	// Device commands
	//
	// Stored with the frame commands take effect sequence in /Device/AsicCommands
	DeviceCommands bool `protobuf:"varint,12,opt,name=device_commands,json=deviceCommands,proto3" json:"device_commands,omitempty"`
}

func (x *WriterConfiguration_BulkConfiguration) Reset() {
	*x = WriterConfiguration_BulkConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_BulkConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_BulkConfiguration) ProtoMessage() {}

func (x *WriterConfiguration_BulkConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_BulkConfiguration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_BulkConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 6}
}

func (x *WriterConfiguration_BulkConfiguration) GetCompressionLevel() int32 {
	if x != nil {
		return x.CompressionLevel
	}
	return 0
}

func (x *WriterConfiguration_BulkConfiguration) GetCompressionType() WriterConfiguration_CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return WriterConfiguration_DefaultCompression
}

func (x *WriterConfiguration_BulkConfiguration) GetFilePattern() string {
	if x != nil {
		return x.FilePattern
	}
	return ""
}

func (x *WriterConfiguration_BulkConfiguration) GetRaw() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *WriterConfiguration_BulkConfiguration) GetEvents() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *WriterConfiguration_BulkConfiguration) GetReads() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Reads
	}
	return nil
}

func (x *WriterConfiguration_BulkConfiguration) GetMultiplex() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.Multiplex
	}
	return nil
}

func (x *WriterConfiguration_BulkConfiguration) GetChannelStates() *WriterConfiguration_ChannelConfiguration {
	if x != nil {
		return x.ChannelStates
	}
	return nil
}

func (x *WriterConfiguration_BulkConfiguration) GetDeviceMetadata() bool {
	if x != nil {
		return x.DeviceMetadata
	}
	return false
}

func (x *WriterConfiguration_BulkConfiguration) GetDeviceCommands() bool {
	if x != nil {
		return x.DeviceCommands
	}
	return false
}

// Control settings for the report writer
type WriterConfiguration_ReportConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pattern used to find the pdf report filename. If left empty but output is
	// enabled a default pattern is used.
	//
	// default: report_{flow_cell_id}_{daq_start_time}_{short_protocol_run_id}.pdf
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// See file pattern attributes above.
	PdfReportFilePattern string `protobuf:"bytes,1,opt,name=pdf_report_file_pattern,json=pdfReportFilePattern,proto3" json:"pdf_report_file_pattern,omitempty"`
	// The pattern used to find the markdown report filename. If left empty but output is
	// enabled a default pattern is used.
	//
	// default: report_{flow_cell_id}_{daq_start_time}_{short_protocol_run_id}.md
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// See file pattern attributes above.
	MarkdownReportFilePattern string `protobuf:"bytes,2,opt,name=markdown_report_file_pattern,json=markdownReportFilePattern,proto3" json:"markdown_report_file_pattern,omitempty"`
	// The pattern used to find the duty time csv report. If left empty but output is
	// enabled a default pattern is used.
	//
	// default: duty_time_{flow_cell_id}_{short_run_id}.csv
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// See file pattern attributes above.
	DutyTimeReportFilePattern string `protobuf:"bytes,3,opt,name=duty_time_report_file_pattern,json=dutyTimeReportFilePattern,proto3" json:"duty_time_report_file_pattern,omitempty"`
	// The pattern used to find the throughput csv report. If left empty but output is
	// enabled a default pattern is used.
	//
	// default: throughput_{flow_cell_id}_{short_run_id}.csv
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// See file pattern attributes above.
	ThroughputReportFilePattern string `protobuf:"bytes,4,opt,name=throughput_report_file_pattern,json=throughputReportFilePattern,proto3" json:"throughput_report_file_pattern,omitempty"`
	// The pattern used to find the final summary report. If left empty but output is
	// enabled a default pattern is used.
	//
	// default: final_summary_{flow_cell_id}_{short_run_id}.txt
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// See file pattern attributes above.
	FinalSummaryReportFilePattern string `protobuf:"bytes,5,opt,name=final_summary_report_file_pattern,json=finalSummaryReportFilePattern,proto3" json:"final_summary_report_file_pattern,omitempty"`
	// The pattern used to name the barcode-alignment report. If left empty but output is
	// enabled a default pattern is used.
	//
	// default: barcode_alignment_{flow_cell_id}_{short_run_id}.tsv
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// See file pattern attributes above.
	BarcodeAlignmentReportFilePattern string `protobuf:"bytes,6,opt,name=barcode_alignment_report_file_pattern,json=barcodeAlignmentReportFilePattern,proto3" json:"barcode_alignment_report_file_pattern,omitempty"`
	// The pattern used to suffix custom reports.
	//
	// default: "_{flow_cell_id}_{short_run_id}"
	// Where each {xxx} section is replaced with an attribute from the minknow
	// state when the file is written.
	//
	// Custom reports use this to build filenames:
	//   - "custom_report{suffix}.txt"
	//
	// See file pattern attributes above.
	CustomReportSuffixPattern string `protobuf:"bytes,7,opt,name=custom_report_suffix_pattern,json=customReportSuffixPattern,proto3" json:"custom_report_suffix_pattern,omitempty"`
}

func (x *WriterConfiguration_ReportConfiguration) Reset() {
	*x = WriterConfiguration_ReportConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ReportConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ReportConfiguration) ProtoMessage() {}

func (x *WriterConfiguration_ReportConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ReportConfiguration.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ReportConfiguration) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 7}
}

func (x *WriterConfiguration_ReportConfiguration) GetPdfReportFilePattern() string {
	if x != nil {
		return x.PdfReportFilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReportConfiguration) GetMarkdownReportFilePattern() string {
	if x != nil {
		return x.MarkdownReportFilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReportConfiguration) GetDutyTimeReportFilePattern() string {
	if x != nil {
		return x.DutyTimeReportFilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReportConfiguration) GetThroughputReportFilePattern() string {
	if x != nil {
		return x.ThroughputReportFilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReportConfiguration) GetFinalSummaryReportFilePattern() string {
	if x != nil {
		return x.FinalSummaryReportFilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReportConfiguration) GetBarcodeAlignmentReportFilePattern() string {
	if x != nil {
		return x.BarcodeAlignmentReportFilePattern
	}
	return ""
}

func (x *WriterConfiguration_ReportConfiguration) GetCustomReportSuffixPattern() string {
	if x != nil {
		return x.CustomReportSuffixPattern
	}
	return ""
}

type WriterConfiguration_ChannelConfiguration_ChannelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of channel names (one based)
	// which should be enabled for writing.
	Channels []int32 `protobuf:"varint,1,rep,packed,name=channels,proto3" json:"channels,omitempty"`
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelList) Reset() {
	*x = WriterConfiguration_ChannelConfiguration_ChannelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ChannelConfiguration_ChannelList) ProtoMessage() {}

func (x *WriterConfiguration_ChannelConfiguration_ChannelList) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ChannelConfiguration_ChannelList.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ChannelConfiguration_ChannelList) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 0, 0}
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelList) GetChannels() []int32 {
	if x != nil {
		return x.Channels
	}
	return nil
}

type WriterConfiguration_ChannelConfiguration_ChannelRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of start/end paired channel numbers
	// which should be enabled for writing.
	//
	// All channels in inclusive ranges should be enabled.
	Ranges []*WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges) Reset() {
	*x = WriterConfiguration_ChannelConfiguration_ChannelRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ChannelConfiguration_ChannelRanges) ProtoMessage() {}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ChannelConfiguration_ChannelRanges.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ChannelConfiguration_ChannelRanges) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 0, 1}
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges) GetRanges() []*WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange) Reset() {
	*x = WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_analysis_configuration_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange) ProtoMessage() {}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_analysis_configuration_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange.ProtoReflect.Descriptor instead.
func (*WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange) Descriptor() ([]byte, []int) {
	return file_minknow_api_analysis_configuration_proto_rawDescGZIP(), []int{25, 0, 1, 0}
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

var File_minknow_api_analysis_configuration_proto protoreflect.FileDescriptor

var file_minknow_api_analysis_configuration_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x02,
	0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x61, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x4d, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x2f, 0x0a, 0x14, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x78, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x4f, 0x6e, 0x4d, 0x75, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x75, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x4d, 0x75, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x22, 0x9d, 0x06, 0x0a, 0x13, 0x52,
	0x65, 0x61, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x49, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x65, 0x61, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x55, 0x0a, 0x18,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x1a,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d,
	0x75, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x73, 0x4f, 0x6e, 0x4d, 0x75,
	0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x48, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x47, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x10, 0x03, 0x22, 0x9b, 0x05, 0x0a, 0x18, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x68, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f,
	0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x77, 0x6d, 0x61,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x6e, 0x50, 0x6f, 0x72, 0x65, 0x45, 0x77, 0x6d, 0x61, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x37, 0x0a, 0x17, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x67, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0x45, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x10, 0x01, 0x22, 0xda, 0x09, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x1a, 0xe2, 0x05, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5f, 0x0a,
	0x09, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x75, 0x72, 0x52, 0x09, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x1a, 0x87,
	0x02, 0x0a, 0x09, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x2d, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x78, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4f, 0x6e, 0x4d, 0x75, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4f, 0x6e, 0x57, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x40, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75, 0x78, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x75, 0x78, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6e,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x6c, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x4f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x65,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xa3, 0x01, 0x0a, 0x06, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0x3d, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x50, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x70, 0x65, 0x72, 0x50, 0x61, 0x1a, 0x69,
	0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x1a, 0x6a, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xad, 0x04, 0x0a, 0x15, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5e, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6d, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x1a, 0x73, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x21,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf0, 0x04, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x57, 0x0a, 0x05, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x6f, 0x75, 0x72, 0x1a, 0xb3, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0xe0, 0x01, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x70, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xdf, 0x03, 0x0a, 0x16, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x4b, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72,
	0x69, 0x6d, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62,
	0x6f, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x42,
	0x6f, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x4d, 0x69, 0x64, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xff, 0x01, 0x0a, 0x16, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x2a,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x62, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x25, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x42, 0x65, 0x64, 0x48, 0x69, 0x74, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x4c, 0x61, 0x6d, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x6b, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x22, 0xe8, 0x09, 0x0a, 0x17, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x70,
	0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x73, 0x0a, 0x17, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x73, 0x0a,
	0x17, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x12, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6c, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8a, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x71, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x51, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x71, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x51, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x73, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a,
	0x21, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22,
	0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x06,
	0x0a, 0x15, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x6c,
	0x6c, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x77, 0x65, 0x6c, 0x6c, 0x1a, 0xd9, 0x03, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x89, 0x01,
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x70, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x7b, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x1a, 0xaa, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65,
	0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x57, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x24, 0x0a, 0x13,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74,
	0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x73, 0x74, 0x35, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x46, 0x61, 0x73,
	0x74, 0x35, 0x12, 0x6d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x73, 0x74, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x46, 0x61, 0x73, 0x74,
	0x71, 0x12, 0x67, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x42, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6d, 0x12, 0x76, 0x0a, 0x0d, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x04, 0x62, 0x75,
	0x6c, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62, 0x75, 0x6c, 0x6b, 0x12, 0x63, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xcd,
	0x04, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x87, 0x01, 0x0a,
	0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x29, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x06, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x36, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x9e,
	0x08, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x73, 0x74, 0x35, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x72, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x47, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x62, 0x0a, 0x05, 0x66, 0x61,
	0x73, 0x74, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66, 0x61, 0x73, 0x74, 0x71, 0x12, 0x6d,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6b, 0x0a,
	0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x13, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x61, 0x73, 0x74, 0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x73, 0x74,
	0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x8b, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x73, 0x74, 0x71, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xc0, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0xc5, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xa9, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x1a, 0xb4, 0x06, 0x0a, 0x11, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x72, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x47, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x5e,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x64,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x6a, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x78, 0x12, 0x73, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0xf1, 0x03, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x64, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x64, 0x66, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x64,
	0x75, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x64, 0x75, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x43, 0x0a,
	0x1e, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x48, 0x0a, 0x21, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x50, 0x0a, 0x25,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x3f,
	0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22,
	0x52, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x5a, 0x6c,
	0x69, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x56, 0x62, 0x7a, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x14, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x46, 0x0a, 0x18, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x32, 0xba, 0x12, 0x0a, 0x1c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0xa2, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x44, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0xb2, 0x01,
	0x0a, 0x1c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x02, 0x12, 0xaa, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12,
	0xa1, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x12, 0x3f, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0xb2, 0x01, 0x0a, 0x1c, 0x73, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x46, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0xb6, 0x01, 0x0a,
	0x20, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0xa7, 0x01, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12,
	0xa2, 0x01, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x12, 0xa3, 0x01, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x44, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x9c, 0x01, 0x0a, 0x18, 0x73,
	0x65, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x9b, 0x01, 0x0a, 0x18, 0x67, 0x65,
	0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0xa6, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x42, 0x5c, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65,
	0x74, 0x65, 0x63, 0x68, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c,
	0x79, 0x6f, 0x75, 0x72, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minknow_api_analysis_configuration_proto_rawDescOnce sync.Once
	file_minknow_api_analysis_configuration_proto_rawDescData = file_minknow_api_analysis_configuration_proto_rawDesc
)

func file_minknow_api_analysis_configuration_proto_rawDescGZIP() []byte {
	file_minknow_api_analysis_configuration_proto_rawDescOnce.Do(func() {
		file_minknow_api_analysis_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_analysis_configuration_proto_rawDescData)
	})
	return file_minknow_api_analysis_configuration_proto_rawDescData
}

var file_minknow_api_analysis_configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_minknow_api_analysis_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_minknow_api_analysis_configuration_proto_goTypes = []interface{}{
	(ReadDetectionParams_ReadDetectionMode)(0),                                      // 0: minknow_api.analysis_configuration.ReadDetectionParams.ReadDetectionMode
	(ReadClassificationParams_Scheme)(0),                                            // 1: minknow_api.analysis_configuration.ReadClassificationParams.Scheme
	(WriterConfiguration_CompressionType)(0),                                        // 2: minknow_api.analysis_configuration.WriterConfiguration.CompressionType
	(*EventDetection)(nil),                                                          // 3: minknow_api.analysis_configuration.EventDetection
	(*ReadDetectionParams)(nil),                                                     // 4: minknow_api.analysis_configuration.ReadDetectionParams
	(*ReadClassificationParams)(nil),                                                // 5: minknow_api.analysis_configuration.ReadClassificationParams
	(*ChannelStates)(nil),                                                           // 6: minknow_api.analysis_configuration.ChannelStates
	(*GetAnalysisConfigurationRequest)(nil),                                         // 7: minknow_api.analysis_configuration.GetAnalysisConfigurationRequest
	(*AnalysisConfiguration)(nil),                                                   // 8: minknow_api.analysis_configuration.AnalysisConfiguration
	(*SetAnalysisConfigurationResponse)(nil),                                        // 9: minknow_api.analysis_configuration.SetAnalysisConfigurationResponse
	(*ResetAnalysisConfigurationRequest)(nil),                                       // 10: minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest
	(*ResetAnalysisConfigurationResponse)(nil),                                      // 11: minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse
	(*SetAnalysisEnabledStateRequest)(nil),                                          // 12: minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest
	(*SetAnalysisEnabledStateResponse)(nil),                                         // 13: minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse
	(*GetChannelStatesDescRequest)(nil),                                             // 14: minknow_api.analysis_configuration.GetChannelStatesDescRequest
	(*GetChannelStatesDescResponse)(nil),                                            // 15: minknow_api.analysis_configuration.GetChannelStatesDescResponse
	(*GetSummaryRequest)(nil),                                                       // 16: minknow_api.analysis_configuration.GetSummaryRequest
	(*GetSummaryResponse)(nil),                                                      // 17: minknow_api.analysis_configuration.GetSummaryResponse
	(*BarcodingConfiguration)(nil),                                                  // 18: minknow_api.analysis_configuration.BarcodingConfiguration
	(*AlignmentConfiguration)(nil),                                                  // 19: minknow_api.analysis_configuration.AlignmentConfiguration
	(*LampConfiguration)(nil),                                                       // 20: minknow_api.analysis_configuration.LampConfiguration
	(*BasecallerConfiguration)(nil),                                                 // 21: minknow_api.analysis_configuration.BasecallerConfiguration
	(*SetBasecallerConfigurationRequest)(nil),                                       // 22: minknow_api.analysis_configuration.SetBasecallerConfigurationRequest
	(*SetBasecallerConfigurationResponse)(nil),                                      // 23: minknow_api.analysis_configuration.SetBasecallerConfigurationResponse
	(*GetBasecallerConfigurationRequest)(nil),                                       // 24: minknow_api.analysis_configuration.GetBasecallerConfigurationRequest
	(*GetPoreTypeConfigurationRequest)(nil),                                         // 25: minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest
	(*PoreTypeConfiguration)(nil),                                                   // 26: minknow_api.analysis_configuration.PoreTypeConfiguration
	(*SetPoreTypeConfigurationResponse)(nil),                                        // 27: minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse
	(*WriterConfiguration)(nil),                                                     // 28: minknow_api.analysis_configuration.WriterConfiguration
	(*SetWriterConfigurationResponse)(nil),                                          // 29: minknow_api.analysis_configuration.SetWriterConfigurationResponse
	(*GetWriterConfigurationRequest)(nil),                                           // 30: minknow_api.analysis_configuration.GetWriterConfigurationRequest
	(*GetReadClassificationsRequest)(nil),                                           // 31: minknow_api.analysis_configuration.GetReadClassificationsRequest
	(*GetReadClassificationsResponse)(nil),                                          // 32: minknow_api.analysis_configuration.GetReadClassificationsResponse
	(*ReadClassificationParams_Parameters)(nil),                                     // 33: minknow_api.analysis_configuration.ReadClassificationParams.Parameters
	(*ChannelStates_Logic)(nil),                                                     // 34: minknow_api.analysis_configuration.ChannelStates.Logic
	(*ChannelStates_Style)(nil),                                                     // 35: minknow_api.analysis_configuration.ChannelStates.Style
	(*ChannelStates_Group)(nil),                                                     // 36: minknow_api.analysis_configuration.ChannelStates.Group
	(*ChannelStates_Logic_Behaviour)(nil),                                           // 37: minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour
	(*ChannelStates_Logic_Ranges)(nil),                                              // 38: minknow_api.analysis_configuration.ChannelStates.Logic.Ranges
	(*ChannelStates_Logic_Ranges_Range)(nil),                                        // 39: minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range
	nil,                                                                             // 40: minknow_api.analysis_configuration.AnalysisConfiguration.ChannelStatesEntry
	(*GetChannelStatesDescResponse_Style)(nil),                                      // 41: minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style
	(*GetChannelStatesDescResponse_ChannelState)(nil),                               // 42: minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState
	(*GetChannelStatesDescResponse_Group)(nil),                                      // 43: minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group
	(*BasecallerConfiguration_ReadFiltering)(nil),                                   // 44: minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering
	(*BasecallerConfiguration_TargetFiltering)(nil),                                 // 45: minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering
	(*PoreTypeConfiguration_ChannelWell)(nil),                                       // 46: minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell
	(*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations)(nil),                 // 47: minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations
	(*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList)(nil), // 48: minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList
	nil, // 49: minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.PoreTypesEntry
	(*WriterConfiguration_ChannelConfiguration)(nil),                            // 50: minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	(*WriterConfiguration_ReadFast5Configuration)(nil),                          // 51: minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration
	(*WriterConfiguration_ReadFastqConfiguration)(nil),                          // 52: minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration
	(*WriterConfiguration_ReadBamConfiguration)(nil),                            // 53: minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration
	(*WriterConfiguration_ReadProtobufConfiguration)(nil),                       // 54: minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration
	(*WriterConfiguration_SequencingSummaryConfiguration)(nil),                  // 55: minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration
	(*WriterConfiguration_BulkConfiguration)(nil),                               // 56: minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration
	(*WriterConfiguration_ReportConfiguration)(nil),                             // 57: minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration
	(*WriterConfiguration_ChannelConfiguration_ChannelList)(nil),                // 58: minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList
	(*WriterConfiguration_ChannelConfiguration_ChannelRanges)(nil),              // 59: minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges
	(*WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange)(nil), // 60: minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange
	nil,                            // 61: minknow_api.analysis_configuration.GetReadClassificationsResponse.ReadClassificationsEntry
	(*wrapperspb.DoubleValue)(nil), // 62: google.protobuf.DoubleValue
	(*wrapperspb.UInt32Value)(nil), // 63: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 64: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),  // 65: google.protobuf.FloatValue
}
var file_minknow_api_analysis_configuration_proto_depIdxs = []int32{
	62, // 0: minknow_api.analysis_configuration.EventDetection.events_to_base_ratio:type_name -> google.protobuf.DoubleValue
	0,  // 1: minknow_api.analysis_configuration.ReadDetectionParams.mode:type_name -> minknow_api.analysis_configuration.ReadDetectionParams.ReadDetectionMode
	63, // 2: minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_events:type_name -> google.protobuf.UInt32Value
	62, // 3: minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_seconds:type_name -> google.protobuf.DoubleValue
	62, // 4: minknow_api.analysis_configuration.ReadDetectionParams.open_pore_min:type_name -> google.protobuf.DoubleValue
	62, // 5: minknow_api.analysis_configuration.ReadDetectionParams.open_pore_max:type_name -> google.protobuf.DoubleValue
	62, // 6: minknow_api.analysis_configuration.ReadDetectionParams.open_pore_default:type_name -> google.protobuf.DoubleValue
	62, // 7: minknow_api.analysis_configuration.ReadDetectionParams.open_pore_seconds_required:type_name -> google.protobuf.DoubleValue
	1,  // 8: minknow_api.analysis_configuration.ReadClassificationParams.scheme_module:type_name -> minknow_api.analysis_configuration.ReadClassificationParams.Scheme
	64, // 9: minknow_api.analysis_configuration.ReadClassificationParams.max_sample_size:type_name -> google.protobuf.UInt64Value
	62, // 10: minknow_api.analysis_configuration.ReadClassificationParams.open_pore_ewma_weight:type_name -> google.protobuf.DoubleValue
	33, // 11: minknow_api.analysis_configuration.ReadClassificationParams.parameters:type_name -> minknow_api.analysis_configuration.ReadClassificationParams.Parameters
	36, // 12: minknow_api.analysis_configuration.ChannelStates.group:type_name -> minknow_api.analysis_configuration.ChannelStates.Group
	34, // 13: minknow_api.analysis_configuration.ChannelStates.logic:type_name -> minknow_api.analysis_configuration.ChannelStates.Logic
	35, // 14: minknow_api.analysis_configuration.ChannelStates.style:type_name -> minknow_api.analysis_configuration.ChannelStates.Style
	3,  // 15: minknow_api.analysis_configuration.AnalysisConfiguration.event_detection:type_name -> minknow_api.analysis_configuration.EventDetection
	4,  // 16: minknow_api.analysis_configuration.AnalysisConfiguration.read_detection:type_name -> minknow_api.analysis_configuration.ReadDetectionParams
	5,  // 17: minknow_api.analysis_configuration.AnalysisConfiguration.read_classification:type_name -> minknow_api.analysis_configuration.ReadClassificationParams
	40, // 18: minknow_api.analysis_configuration.AnalysisConfiguration.channel_states:type_name -> minknow_api.analysis_configuration.AnalysisConfiguration.ChannelStatesEntry
	43, // 19: minknow_api.analysis_configuration.GetChannelStatesDescResponse.groups:type_name -> minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group
	65, // 20: minknow_api.analysis_configuration.BarcodingConfiguration.min_score:type_name -> google.protobuf.FloatValue
	65, // 21: minknow_api.analysis_configuration.BarcodingConfiguration.min_score_rear:type_name -> google.protobuf.FloatValue
	65, // 22: minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mid:type_name -> google.protobuf.FloatValue
	65, // 23: minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mask:type_name -> google.protobuf.FloatValue
	65, // 24: minknow_api.analysis_configuration.AlignmentConfiguration.minimum_coverage:type_name -> google.protobuf.FloatValue
	65, // 25: minknow_api.analysis_configuration.LampConfiguration.min_score_barcodes:type_name -> google.protobuf.FloatValue
	65, // 26: minknow_api.analysis_configuration.LampConfiguration.min_score_masks:type_name -> google.protobuf.FloatValue
	65, // 27: minknow_api.analysis_configuration.LampConfiguration.min_score_targets:type_name -> google.protobuf.FloatValue
	44, // 28: minknow_api.analysis_configuration.BasecallerConfiguration.read_filtering:type_name -> minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering
	18, // 29: minknow_api.analysis_configuration.BasecallerConfiguration.barcoding_configuration:type_name -> minknow_api.analysis_configuration.BarcodingConfiguration
	45, // 30: minknow_api.analysis_configuration.BasecallerConfiguration.target_filtering:type_name -> minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering
	19, // 31: minknow_api.analysis_configuration.BasecallerConfiguration.alignment_configuration:type_name -> minknow_api.analysis_configuration.AlignmentConfiguration
	20, // 32: minknow_api.analysis_configuration.BasecallerConfiguration.lamp_configuration:type_name -> minknow_api.analysis_configuration.LampConfiguration
	21, // 33: minknow_api.analysis_configuration.SetBasecallerConfigurationRequest.configs:type_name -> minknow_api.analysis_configuration.BasecallerConfiguration
	47, // 34: minknow_api.analysis_configuration.PoreTypeConfiguration.channel_well_pore_types:type_name -> minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations
	51, // 35: minknow_api.analysis_configuration.WriterConfiguration.read_fast5:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration
	52, // 36: minknow_api.analysis_configuration.WriterConfiguration.read_fastq:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration
	53, // 37: minknow_api.analysis_configuration.WriterConfiguration.read_bam:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration
	54, // 38: minknow_api.analysis_configuration.WriterConfiguration.read_protobuf:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration
	55, // 39: minknow_api.analysis_configuration.WriterConfiguration.sequencing_summary:type_name -> minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration
	56, // 40: minknow_api.analysis_configuration.WriterConfiguration.bulk:type_name -> minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration
	57, // 41: minknow_api.analysis_configuration.WriterConfiguration.report:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration
	61, // 42: minknow_api.analysis_configuration.GetReadClassificationsResponse.read_classifications:type_name -> minknow_api.analysis_configuration.GetReadClassificationsResponse.ReadClassificationsEntry
	38, // 43: minknow_api.analysis_configuration.ChannelStates.Logic.ranges:type_name -> minknow_api.analysis_configuration.ChannelStates.Logic.Ranges
	37, // 44: minknow_api.analysis_configuration.ChannelStates.Logic.behaviour:type_name -> minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour
	63, // 45: minknow_api.analysis_configuration.ChannelStates.Style.order:type_name -> google.protobuf.UInt32Value
	35, // 46: minknow_api.analysis_configuration.ChannelStates.Group.style:type_name -> minknow_api.analysis_configuration.ChannelStates.Style
	39, // 47: minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.range:type_name -> minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range
	6,  // 48: minknow_api.analysis_configuration.AnalysisConfiguration.ChannelStatesEntry.value:type_name -> minknow_api.analysis_configuration.ChannelStates
	41, // 49: minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.style:type_name -> minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style
	41, // 50: minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.style:type_name -> minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style
	42, // 51: minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.states:type_name -> minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState
	62, // 52: minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_qscore:type_name -> google.protobuf.DoubleValue
	64, // 53: minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_samples:type_name -> google.protobuf.UInt64Value
	64, // 54: minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_samples:type_name -> google.protobuf.UInt64Value
	64, // 55: minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_bases:type_name -> google.protobuf.UInt64Value
	64, // 56: minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_bases:type_name -> google.protobuf.UInt64Value
	64, // 57: minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_failed_chunks:type_name -> google.protobuf.UInt64Value
	62, // 58: minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_qscore:type_name -> google.protobuf.DoubleValue
	64, // 59: minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_bases:type_name -> google.protobuf.UInt64Value
	64, // 60: minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.max_bases:type_name -> google.protobuf.UInt64Value
	49, // 61: minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.pore_types:type_name -> minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.PoreTypesEntry
	46, // 62: minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList.channel_well:type_name -> minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell
	48, // 63: minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.PoreTypesEntry.value:type_name -> minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList
	58, // 64: minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.specific_channels:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList
	59, // 65: minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.channel_ranges:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges
	2,  // 66: minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.compression_type:type_name -> minknow_api.analysis_configuration.WriterConfiguration.CompressionType
	50, // 67: minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.raw:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 68: minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 69: minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.trace_table:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 70: minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.move_table:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 71: minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.modifications_table:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 72: minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.enable:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 73: minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.enable:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 74: minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.enable:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 75: minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.enable:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	2,  // 76: minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.compression_type:type_name -> minknow_api.analysis_configuration.WriterConfiguration.CompressionType
	50, // 77: minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.raw:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 78: minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.events:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 79: minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.reads:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 80: minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.multiplex:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	50, // 81: minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.channel_states:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration
	60, // 82: minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ranges:type_name -> minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange
	7,  // 83: minknow_api.analysis_configuration.AnalysisConfigurationService.get_analysis_configuration:input_type -> minknow_api.analysis_configuration.GetAnalysisConfigurationRequest
	8,  // 84: minknow_api.analysis_configuration.AnalysisConfigurationService.set_analysis_configuration:input_type -> minknow_api.analysis_configuration.AnalysisConfiguration
	10, // 85: minknow_api.analysis_configuration.AnalysisConfigurationService.reset_analysis_configuration:input_type -> minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest
	12, // 86: minknow_api.analysis_configuration.AnalysisConfigurationService.set_analysis_enabled_state:input_type -> minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest
	14, // 87: minknow_api.analysis_configuration.AnalysisConfigurationService.get_channel_states_desc:input_type -> minknow_api.analysis_configuration.GetChannelStatesDescRequest
	16, // 88: minknow_api.analysis_configuration.AnalysisConfigurationService.get_summary:input_type -> minknow_api.analysis_configuration.GetSummaryRequest
	22, // 89: minknow_api.analysis_configuration.AnalysisConfigurationService.set_basecaller_configuration:input_type -> minknow_api.analysis_configuration.SetBasecallerConfigurationRequest
	22, // 90: minknow_api.analysis_configuration.AnalysisConfigurationService.preload_basecaller_configuration:input_type -> minknow_api.analysis_configuration.SetBasecallerConfigurationRequest
	24, // 91: minknow_api.analysis_configuration.AnalysisConfigurationService.get_basecaller_configuration:input_type -> minknow_api.analysis_configuration.GetBasecallerConfigurationRequest
	25, // 92: minknow_api.analysis_configuration.AnalysisConfigurationService.get_pore_type_configuration:input_type -> minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest
	26, // 93: minknow_api.analysis_configuration.AnalysisConfigurationService.set_pore_type_configuration:input_type -> minknow_api.analysis_configuration.PoreTypeConfiguration
	28, // 94: minknow_api.analysis_configuration.AnalysisConfigurationService.set_writer_configuration:input_type -> minknow_api.analysis_configuration.WriterConfiguration
	30, // 95: minknow_api.analysis_configuration.AnalysisConfigurationService.get_writer_configuration:input_type -> minknow_api.analysis_configuration.GetWriterConfigurationRequest
	31, // 96: minknow_api.analysis_configuration.AnalysisConfigurationService.get_read_classifications:input_type -> minknow_api.analysis_configuration.GetReadClassificationsRequest
	8,  // 97: minknow_api.analysis_configuration.AnalysisConfigurationService.get_analysis_configuration:output_type -> minknow_api.analysis_configuration.AnalysisConfiguration
	9,  // 98: minknow_api.analysis_configuration.AnalysisConfigurationService.set_analysis_configuration:output_type -> minknow_api.analysis_configuration.SetAnalysisConfigurationResponse
	11, // 99: minknow_api.analysis_configuration.AnalysisConfigurationService.reset_analysis_configuration:output_type -> minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse
	13, // 100: minknow_api.analysis_configuration.AnalysisConfigurationService.set_analysis_enabled_state:output_type -> minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse
	15, // 101: minknow_api.analysis_configuration.AnalysisConfigurationService.get_channel_states_desc:output_type -> minknow_api.analysis_configuration.GetChannelStatesDescResponse
	17, // 102: minknow_api.analysis_configuration.AnalysisConfigurationService.get_summary:output_type -> minknow_api.analysis_configuration.GetSummaryResponse
	23, // 103: minknow_api.analysis_configuration.AnalysisConfigurationService.set_basecaller_configuration:output_type -> minknow_api.analysis_configuration.SetBasecallerConfigurationResponse
	23, // 104: minknow_api.analysis_configuration.AnalysisConfigurationService.preload_basecaller_configuration:output_type -> minknow_api.analysis_configuration.SetBasecallerConfigurationResponse
	21, // 105: minknow_api.analysis_configuration.AnalysisConfigurationService.get_basecaller_configuration:output_type -> minknow_api.analysis_configuration.BasecallerConfiguration
	26, // 106: minknow_api.analysis_configuration.AnalysisConfigurationService.get_pore_type_configuration:output_type -> minknow_api.analysis_configuration.PoreTypeConfiguration
	27, // 107: minknow_api.analysis_configuration.AnalysisConfigurationService.set_pore_type_configuration:output_type -> minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse
	29, // 108: minknow_api.analysis_configuration.AnalysisConfigurationService.set_writer_configuration:output_type -> minknow_api.analysis_configuration.SetWriterConfigurationResponse
	28, // 109: minknow_api.analysis_configuration.AnalysisConfigurationService.get_writer_configuration:output_type -> minknow_api.analysis_configuration.WriterConfiguration
	32, // 110: minknow_api.analysis_configuration.AnalysisConfigurationService.get_read_classifications:output_type -> minknow_api.analysis_configuration.GetReadClassificationsResponse
	97, // [97:111] is the sub-list for method output_type
	83, // [83:97] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_minknow_api_analysis_configuration_proto_init() }
func file_minknow_api_analysis_configuration_proto_init() {
	if File_minknow_api_analysis_configuration_proto != nil {
		return
	}
	file_minknow_api_rpc_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_analysis_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDetectionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadClassificationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnalysisConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAnalysisConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetAnalysisConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetAnalysisConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAnalysisEnabledStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAnalysisEnabledStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelStatesDescRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelStatesDescResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarcodingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlignmentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LampConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasecallerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBasecallerConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBasecallerConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBasecallerConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoreTypeConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoreTypeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPoreTypeConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWriterConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWriterConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadClassificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadClassificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadClassificationParams_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStates_Logic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStates_Style); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStates_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStates_Logic_Behaviour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStates_Logic_Ranges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStates_Logic_Ranges_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelStatesDescResponse_Style); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelStatesDescResponse_ChannelState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelStatesDescResponse_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasecallerConfiguration_ReadFiltering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasecallerConfiguration_TargetFiltering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoreTypeConfiguration_ChannelWell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ChannelConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ReadFast5Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ReadFastqConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ReadBamConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ReadProtobufConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_SequencingSummaryConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_BulkConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ReportConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ChannelConfiguration_ChannelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ChannelConfiguration_ChannelRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_analysis_configuration_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minknow_api_analysis_configuration_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*PoreTypeConfiguration_GlobalPoreType)(nil),
		(*PoreTypeConfiguration_ChannelWellPoreTypes)(nil),
	}
	file_minknow_api_analysis_configuration_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*WriterConfiguration_ChannelConfiguration_AllChannels)(nil),
		(*WriterConfiguration_ChannelConfiguration_SpecificChannels)(nil),
		(*WriterConfiguration_ChannelConfiguration_ChannelRanges_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_analysis_configuration_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_analysis_configuration_proto_goTypes,
		DependencyIndexes: file_minknow_api_analysis_configuration_proto_depIdxs,
		EnumInfos:         file_minknow_api_analysis_configuration_proto_enumTypes,
		MessageInfos:      file_minknow_api_analysis_configuration_proto_msgTypes,
	}.Build()
	File_minknow_api_analysis_configuration_proto = out.File
	file_minknow_api_analysis_configuration_proto_rawDesc = nil
	file_minknow_api_analysis_configuration_proto_goTypes = nil
	file_minknow_api_analysis_configuration_proto_depIdxs = nil
}
