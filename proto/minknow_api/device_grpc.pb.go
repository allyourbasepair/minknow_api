// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minknow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	// Get information about the device this MinKNOW instance was started for.
	//
	// In normal circumstances (ie: when using the manager service), a new MinKNOW instance
	// is started for each available device. This call provides information about this device.
	//
	// The information returned by this call will not change (providing the MinKNOW instance
	// was started by the manager service).
	GetDeviceInfo(ctx context.Context, in *GetDeviceInfoRequest, opts ...grpc.CallOption) (*GetDeviceInfoResponse, error)
	// Get information about the current device state.
	//
	// Information in this call may change as the device is used with MinKNOW, for example,
	// by unplugging or plugging in the device.
	//
	// It includes information about whether the hardware is actually attached (in the case of
	// MinIONs, which can be unplugged), as well as what types of flow cells can be inserted (which
	// may be affected by flow cell adapters).
	//
	// Since 1.12
	GetDeviceState(ctx context.Context, in *GetDeviceStateRequest, opts ...grpc.CallOption) (*GetDeviceStateResponse, error)
	// Streaming version of get_device_state
	//
	// Since 1.13
	StreamDeviceState(ctx context.Context, in *StreamDeviceStateRequest, opts ...grpc.CallOption) (DeviceService_StreamDeviceStateClient, error)
	// Get information about the flow cell (if any).
	//
	// This provides information about the flow_cell attached to the device (described by
	// get_device_info()), if any.
	GetFlowCellInfo(ctx context.Context, in *GetFlowCellInfoRequest, opts ...grpc.CallOption) (*GetFlowCellInfoResponse, error)
	// Streaming version of get_flow_cell_info
	//
	// Since 1.13
	StreamFlowCellInfo(ctx context.Context, in *StreamFlowCellInfoRequest, opts ...grpc.CallOption) (DeviceService_StreamFlowCellInfoClient, error)
	// Set the user specified flow cell id.
	//
	// This changes the user specified flow cell id.
	// MinKNOW will use this id in place of the id read from the eeprom, if no eeprom data
	// is available.
	//
	// This data is reset when the flow cell is disconnected.
	//
	// Since 1.12
	SetUserSpecifiedFlowCellId(ctx context.Context, in *SetUserSpecifiedFlowCellIdRequest, opts ...grpc.CallOption) (*SetUserSpecifiedFlowCellIdResponse, error)
	// Set the user specified product code.
	//
	// This changes the user specified product code.
	//
	// MinKNOW does not use the product code, it is intended for use in MinKNOW's clients.
	//
	// This data is reset when the flow cell is disconnected.
	//
	// Since 1.12
	SetUserSpecifiedProductCode(ctx context.Context, in *SetUserSpecifiedProductCodeRequest, opts ...grpc.CallOption) (*SetUserSpecifiedProductCodeResponse, error)
	// Get information about the channel layout
	//
	// Since 1.14
	GetChannelsLayout(ctx context.Context, in *GetChannelsLayoutRequest, opts ...grpc.CallOption) (*GetChannelsLayoutResponse, error)
	// Reset all settings associate with the current device.
	//
	// This call will initialise all settings to their default state, ie the same as when MinKNOW boots.
	ResetDeviceSettings(ctx context.Context, in *ResetDeviceSettingsRequest, opts ...grpc.CallOption) (*ResetDeviceSettingsResponse, error)
	// Set the calibration measurements to be used by MinKNOW.
	//
	// Calibration describes how to convert from the raw ADC (analog-to-digital converter) values
	// from the device into picoamps (pA).
	//
	// Note that calibration depends on the device, flow cell and some of the device settings
	// (including sampling frequency and the capacitance used in the integratation circuit). If
	// any of these are changed, the calibration will no longer be used. Instead, a previously-saved
	// calibration (for that combination of flow cell and settings) might be used, or the identity
	// calibration might be used.
	//
	// On a MinION, the settings that a calibration depends on are sampling frequency and
	// integration capacitor.
	SetCalibration(ctx context.Context, in *SetCalibrationRequest, opts ...grpc.CallOption) (*SetCalibrationResponse, error)
	// Clear the current calibration.
	//
	// This is the same as setting the calibration to be the identity function (setting all offsets
	// to 0, and all pA ranges to the digitisation value).
	ClearCalibration(ctx context.Context, in *ClearCalibrationRequest, opts ...grpc.CallOption) (*ClearCalibrationResponse, error)
	// The calibration measurements being used by MinKNOW.
	//
	// Calibration describes how to convert from the raw ADC (analog-to-digital converter) values
	// from the device into picoamps (pA).
	//
	// To get a pA value from an ADC value the following function is applied::
	//
	//      pA_current = (adc_current + offset) / (digitisation / pA_range)
	//
	// The digitisation is the range of possible ADC values. It is the same for all channels.
	//
	// If there is no calibration (including if it was cleared with ``clear_calibration()`` or
	// invalidated because of device settings changes), this will return the identity calibration:
	// all offsets will be 0, and the pA ranges will be the same as the digitisation.
	GetCalibration(ctx context.Context, in *GetCalibrationRequest, opts ...grpc.CallOption) (*GetCalibrationResponse, error)
	// If the device is capable (see GetDeviceInfoResponse.temperature_controllable)
	// then this sets the minimum and maximum temperatures of the flow-cell.
	SetTemperature(ctx context.Context, in *SetTemperatureRequest, opts ...grpc.CallOption) (*SetTemperatureResponse, error)
	// Get the current temperature of the device.
	//
	// Since 1.11
	GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error)
	// Stream the current temperature of the device.
	//
	// Since 4.3
	StreamTemperature(ctx context.Context, in *StreamTemperatureRequest, opts ...grpc.CallOption) (DeviceService_StreamTemperatureClient, error)
	// Triggers an unblock for a list of channels for a given duration (Please see UnblockRequest).
	// It will start an unblock for every channel received as a parameter, then this RPC returns.
	// After the timeout expires (the duration in seconds given in the request), the return from
	// unblock is automatically triggered, which resets the channel configuration (mux) to the
	// value preceding the unblock.
	//
	// Notes!!
	//
	// During the unblock the user should NOT do any mux changes, as the unblock will be interrupted.
	// On Promethion this would be even more complicated, as an unblock would normally restore
	// hardware saturation. If an unblock is interrupted it will not restore the state to the original
	// one.
	//
	// The user should NOT change the overload mode during an unblock - this will confuse the return from
	// unblock, which tries to reset the overload mode to the state preceeding the unblock.
	//
	// The unblock can fail if the channel is not in a valid well state (this means a channel needs to be
	// in one of pore1-4, not test current, regen pore or unblock). If a mux is not valid, the unblock grpc
	// will try to continue for the rest of the channels, ignoring the one with the wrong mux.
	Unblock(ctx context.Context, in *UnblockRequest, opts ...grpc.CallOption) (*UnblockResponse, error)
	// Cancel in progress unblocks.
	//
	// Any unblocks registered with `device.unblock` will be stopped before this command returns.
	// Unblocks are stopped by applying any actions required to return from unblock (mux changes, or hardware configuration).
	//
	// Since 1.15
	CancelUnblocks(ctx context.Context, in *CancelUnblocksRequest, opts ...grpc.CallOption) (*CancelUnblocksResponse, error)
	// Get the channel configuration for any number of channels
	//
	// The maximum addressable channel will depend on the device. Currently this will be 512 on a MinION/GridION
	// and 3000 on a PromethION
	GetChannelConfiguration(ctx context.Context, in *GetChannelConfigurationRequest, opts ...grpc.CallOption) (*GetChannelConfigurationResponse, error)
	// Set the channel configuration for any number of channels
	//
	// The maximum addressable channel will depend on the device. Currently this will be 512 on a MinION/GridION
	// and 3000 on a PromethION.
	SetChannelConfiguration(ctx context.Context, in *SetChannelConfigurationRequest, opts ...grpc.CallOption) (*SetChannelConfigurationResponse, error)
	SetChannelConfigurationAll(ctx context.Context, in *SetChannelConfigurationAllRequest, opts ...grpc.CallOption) (*SetChannelConfigurationAllResponse, error)
	// Set the saturation control configuration.
	//
	// The request is immediately sent to the data acquisition module, and applied. All settings can be changed
	// whilst the experiment is running.
	//
	// If any keys are not specified when this method is called (see the message for specific optional parameters),
	// the previously applied parameters are kept; initially, when this method has never been called, defaults from the
	// application config are used.
	//
	// note: calling this method resets anu in-progress saturations when it is called, causing them to need to start
	// saturation counts again, this may mean any saturations may take longer to occur.
	SetSaturationConfig(ctx context.Context, in *SetSaturationConfigRequest, opts ...grpc.CallOption) (*SetSaturationConfigResponse, error)
	// Get the saturation control configuration.
	//
	// The default configuration is specifed by the MinKNOW application configuration, the command returns the most
	// recently applied saturation config.
	GetSaturationConfig(ctx context.Context, in *GetSaturationConfigRequest, opts ...grpc.CallOption) (*GetSaturationConfigResponse, error)
	// Get the sample rate of the device
	//
	// Please refer to MinionDeviceService and PromethionDeviceService for the expected
	// return value for a minion and promethion respectively
	GetSampleRate(ctx context.Context, in *GetSampleRateRequest, opts ...grpc.CallOption) (*GetSampleRateResponse, error)
	// Set the sample rate of the device, and returns the actual value set on the device
	//
	// Please refer to MinionDeviceService and PromethionDeviceService to see
	// how the value set here will be used to determine the real sample rate for a
	// minion and promethion respectively
	//
	// Trying to set the sample rate during an acquisition period will result in an error
	SetSampleRate(ctx context.Context, in *SetSampleRateRequest, opts ...grpc.CallOption) (*SetSampleRateResponse, error)
	GetBiasVoltage(ctx context.Context, in *GetBiasVoltageRequest, opts ...grpc.CallOption) (*GetBiasVoltageResponse, error)
	SetBiasVoltage(ctx context.Context, in *SetBiasVoltageRequest, opts ...grpc.CallOption) (*SetBiasVoltageResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoRequest, opts ...grpc.CallOption) (*GetDeviceInfoResponse, error) {
	out := new(GetDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_device_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceState(ctx context.Context, in *GetDeviceStateRequest, opts ...grpc.CallOption) (*GetDeviceStateResponse, error) {
	out := new(GetDeviceStateResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_device_state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) StreamDeviceState(ctx context.Context, in *StreamDeviceStateRequest, opts ...grpc.CallOption) (DeviceService_StreamDeviceStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[0], "/minknow_api.device.DeviceService/stream_device_state", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceStreamDeviceStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_StreamDeviceStateClient interface {
	Recv() (*GetDeviceStateResponse, error)
	grpc.ClientStream
}

type deviceServiceStreamDeviceStateClient struct {
	grpc.ClientStream
}

func (x *deviceServiceStreamDeviceStateClient) Recv() (*GetDeviceStateResponse, error) {
	m := new(GetDeviceStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) GetFlowCellInfo(ctx context.Context, in *GetFlowCellInfoRequest, opts ...grpc.CallOption) (*GetFlowCellInfoResponse, error) {
	out := new(GetFlowCellInfoResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_flow_cell_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) StreamFlowCellInfo(ctx context.Context, in *StreamFlowCellInfoRequest, opts ...grpc.CallOption) (DeviceService_StreamFlowCellInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[1], "/minknow_api.device.DeviceService/stream_flow_cell_info", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceStreamFlowCellInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_StreamFlowCellInfoClient interface {
	Recv() (*GetFlowCellInfoResponse, error)
	grpc.ClientStream
}

type deviceServiceStreamFlowCellInfoClient struct {
	grpc.ClientStream
}

func (x *deviceServiceStreamFlowCellInfoClient) Recv() (*GetFlowCellInfoResponse, error) {
	m := new(GetFlowCellInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) SetUserSpecifiedFlowCellId(ctx context.Context, in *SetUserSpecifiedFlowCellIdRequest, opts ...grpc.CallOption) (*SetUserSpecifiedFlowCellIdResponse, error) {
	out := new(SetUserSpecifiedFlowCellIdResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_user_specified_flow_cell_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetUserSpecifiedProductCode(ctx context.Context, in *SetUserSpecifiedProductCodeRequest, opts ...grpc.CallOption) (*SetUserSpecifiedProductCodeResponse, error) {
	out := new(SetUserSpecifiedProductCodeResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_user_specified_product_code", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetChannelsLayout(ctx context.Context, in *GetChannelsLayoutRequest, opts ...grpc.CallOption) (*GetChannelsLayoutResponse, error) {
	out := new(GetChannelsLayoutResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_channels_layout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ResetDeviceSettings(ctx context.Context, in *ResetDeviceSettingsRequest, opts ...grpc.CallOption) (*ResetDeviceSettingsResponse, error) {
	out := new(ResetDeviceSettingsResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/reset_device_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetCalibration(ctx context.Context, in *SetCalibrationRequest, opts ...grpc.CallOption) (*SetCalibrationResponse, error) {
	out := new(SetCalibrationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_calibration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ClearCalibration(ctx context.Context, in *ClearCalibrationRequest, opts ...grpc.CallOption) (*ClearCalibrationResponse, error) {
	out := new(ClearCalibrationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/clear_calibration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetCalibration(ctx context.Context, in *GetCalibrationRequest, opts ...grpc.CallOption) (*GetCalibrationResponse, error) {
	out := new(GetCalibrationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_calibration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetTemperature(ctx context.Context, in *SetTemperatureRequest, opts ...grpc.CallOption) (*SetTemperatureResponse, error) {
	out := new(SetTemperatureResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_temperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error) {
	out := new(GetTemperatureResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_temperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) StreamTemperature(ctx context.Context, in *StreamTemperatureRequest, opts ...grpc.CallOption) (DeviceService_StreamTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[2], "/minknow_api.device.DeviceService/stream_temperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceStreamTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_StreamTemperatureClient interface {
	Recv() (*GetTemperatureResponse, error)
	grpc.ClientStream
}

type deviceServiceStreamTemperatureClient struct {
	grpc.ClientStream
}

func (x *deviceServiceStreamTemperatureClient) Recv() (*GetTemperatureResponse, error) {
	m := new(GetTemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) Unblock(ctx context.Context, in *UnblockRequest, opts ...grpc.CallOption) (*UnblockResponse, error) {
	out := new(UnblockResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/unblock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CancelUnblocks(ctx context.Context, in *CancelUnblocksRequest, opts ...grpc.CallOption) (*CancelUnblocksResponse, error) {
	out := new(CancelUnblocksResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/cancel_unblocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetChannelConfiguration(ctx context.Context, in *GetChannelConfigurationRequest, opts ...grpc.CallOption) (*GetChannelConfigurationResponse, error) {
	out := new(GetChannelConfigurationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_channel_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetChannelConfiguration(ctx context.Context, in *SetChannelConfigurationRequest, opts ...grpc.CallOption) (*SetChannelConfigurationResponse, error) {
	out := new(SetChannelConfigurationResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_channel_configuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetChannelConfigurationAll(ctx context.Context, in *SetChannelConfigurationAllRequest, opts ...grpc.CallOption) (*SetChannelConfigurationAllResponse, error) {
	out := new(SetChannelConfigurationAllResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_channel_configuration_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetSaturationConfig(ctx context.Context, in *SetSaturationConfigRequest, opts ...grpc.CallOption) (*SetSaturationConfigResponse, error) {
	out := new(SetSaturationConfigResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_saturation_config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetSaturationConfig(ctx context.Context, in *GetSaturationConfigRequest, opts ...grpc.CallOption) (*GetSaturationConfigResponse, error) {
	out := new(GetSaturationConfigResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_saturation_config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetSampleRate(ctx context.Context, in *GetSampleRateRequest, opts ...grpc.CallOption) (*GetSampleRateResponse, error) {
	out := new(GetSampleRateResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_sample_rate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetSampleRate(ctx context.Context, in *SetSampleRateRequest, opts ...grpc.CallOption) (*SetSampleRateResponse, error) {
	out := new(SetSampleRateResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_sample_rate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetBiasVoltage(ctx context.Context, in *GetBiasVoltageRequest, opts ...grpc.CallOption) (*GetBiasVoltageResponse, error) {
	out := new(GetBiasVoltageResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/get_bias_voltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetBiasVoltage(ctx context.Context, in *SetBiasVoltageRequest, opts ...grpc.CallOption) (*SetBiasVoltageResponse, error) {
	out := new(SetBiasVoltageResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.device.DeviceService/set_bias_voltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	// Get information about the device this MinKNOW instance was started for.
	//
	// In normal circumstances (ie: when using the manager service), a new MinKNOW instance
	// is started for each available device. This call provides information about this device.
	//
	// The information returned by this call will not change (providing the MinKNOW instance
	// was started by the manager service).
	GetDeviceInfo(context.Context, *GetDeviceInfoRequest) (*GetDeviceInfoResponse, error)
	// Get information about the current device state.
	//
	// Information in this call may change as the device is used with MinKNOW, for example,
	// by unplugging or plugging in the device.
	//
	// It includes information about whether the hardware is actually attached (in the case of
	// MinIONs, which can be unplugged), as well as what types of flow cells can be inserted (which
	// may be affected by flow cell adapters).
	//
	// Since 1.12
	GetDeviceState(context.Context, *GetDeviceStateRequest) (*GetDeviceStateResponse, error)
	// Streaming version of get_device_state
	//
	// Since 1.13
	StreamDeviceState(*StreamDeviceStateRequest, DeviceService_StreamDeviceStateServer) error
	// Get information about the flow cell (if any).
	//
	// This provides information about the flow_cell attached to the device (described by
	// get_device_info()), if any.
	GetFlowCellInfo(context.Context, *GetFlowCellInfoRequest) (*GetFlowCellInfoResponse, error)
	// Streaming version of get_flow_cell_info
	//
	// Since 1.13
	StreamFlowCellInfo(*StreamFlowCellInfoRequest, DeviceService_StreamFlowCellInfoServer) error
	// Set the user specified flow cell id.
	//
	// This changes the user specified flow cell id.
	// MinKNOW will use this id in place of the id read from the eeprom, if no eeprom data
	// is available.
	//
	// This data is reset when the flow cell is disconnected.
	//
	// Since 1.12
	SetUserSpecifiedFlowCellId(context.Context, *SetUserSpecifiedFlowCellIdRequest) (*SetUserSpecifiedFlowCellIdResponse, error)
	// Set the user specified product code.
	//
	// This changes the user specified product code.
	//
	// MinKNOW does not use the product code, it is intended for use in MinKNOW's clients.
	//
	// This data is reset when the flow cell is disconnected.
	//
	// Since 1.12
	SetUserSpecifiedProductCode(context.Context, *SetUserSpecifiedProductCodeRequest) (*SetUserSpecifiedProductCodeResponse, error)
	// Get information about the channel layout
	//
	// Since 1.14
	GetChannelsLayout(context.Context, *GetChannelsLayoutRequest) (*GetChannelsLayoutResponse, error)
	// Reset all settings associate with the current device.
	//
	// This call will initialise all settings to their default state, ie the same as when MinKNOW boots.
	ResetDeviceSettings(context.Context, *ResetDeviceSettingsRequest) (*ResetDeviceSettingsResponse, error)
	// Set the calibration measurements to be used by MinKNOW.
	//
	// Calibration describes how to convert from the raw ADC (analog-to-digital converter) values
	// from the device into picoamps (pA).
	//
	// Note that calibration depends on the device, flow cell and some of the device settings
	// (including sampling frequency and the capacitance used in the integratation circuit). If
	// any of these are changed, the calibration will no longer be used. Instead, a previously-saved
	// calibration (for that combination of flow cell and settings) might be used, or the identity
	// calibration might be used.
	//
	// On a MinION, the settings that a calibration depends on are sampling frequency and
	// integration capacitor.
	SetCalibration(context.Context, *SetCalibrationRequest) (*SetCalibrationResponse, error)
	// Clear the current calibration.
	//
	// This is the same as setting the calibration to be the identity function (setting all offsets
	// to 0, and all pA ranges to the digitisation value).
	ClearCalibration(context.Context, *ClearCalibrationRequest) (*ClearCalibrationResponse, error)
	// The calibration measurements being used by MinKNOW.
	//
	// Calibration describes how to convert from the raw ADC (analog-to-digital converter) values
	// from the device into picoamps (pA).
	//
	// To get a pA value from an ADC value the following function is applied::
	//
	//      pA_current = (adc_current + offset) / (digitisation / pA_range)
	//
	// The digitisation is the range of possible ADC values. It is the same for all channels.
	//
	// If there is no calibration (including if it was cleared with ``clear_calibration()`` or
	// invalidated because of device settings changes), this will return the identity calibration:
	// all offsets will be 0, and the pA ranges will be the same as the digitisation.
	GetCalibration(context.Context, *GetCalibrationRequest) (*GetCalibrationResponse, error)
	// If the device is capable (see GetDeviceInfoResponse.temperature_controllable)
	// then this sets the minimum and maximum temperatures of the flow-cell.
	SetTemperature(context.Context, *SetTemperatureRequest) (*SetTemperatureResponse, error)
	// Get the current temperature of the device.
	//
	// Since 1.11
	GetTemperature(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error)
	// Stream the current temperature of the device.
	//
	// Since 4.3
	StreamTemperature(*StreamTemperatureRequest, DeviceService_StreamTemperatureServer) error
	// Triggers an unblock for a list of channels for a given duration (Please see UnblockRequest).
	// It will start an unblock for every channel received as a parameter, then this RPC returns.
	// After the timeout expires (the duration in seconds given in the request), the return from
	// unblock is automatically triggered, which resets the channel configuration (mux) to the
	// value preceding the unblock.
	//
	// Notes!!
	//
	// During the unblock the user should NOT do any mux changes, as the unblock will be interrupted.
	// On Promethion this would be even more complicated, as an unblock would normally restore
	// hardware saturation. If an unblock is interrupted it will not restore the state to the original
	// one.
	//
	// The user should NOT change the overload mode during an unblock - this will confuse the return from
	// unblock, which tries to reset the overload mode to the state preceeding the unblock.
	//
	// The unblock can fail if the channel is not in a valid well state (this means a channel needs to be
	// in one of pore1-4, not test current, regen pore or unblock). If a mux is not valid, the unblock grpc
	// will try to continue for the rest of the channels, ignoring the one with the wrong mux.
	Unblock(context.Context, *UnblockRequest) (*UnblockResponse, error)
	// Cancel in progress unblocks.
	//
	// Any unblocks registered with `device.unblock` will be stopped before this command returns.
	// Unblocks are stopped by applying any actions required to return from unblock (mux changes, or hardware configuration).
	//
	// Since 1.15
	CancelUnblocks(context.Context, *CancelUnblocksRequest) (*CancelUnblocksResponse, error)
	// Get the channel configuration for any number of channels
	//
	// The maximum addressable channel will depend on the device. Currently this will be 512 on a MinION/GridION
	// and 3000 on a PromethION
	GetChannelConfiguration(context.Context, *GetChannelConfigurationRequest) (*GetChannelConfigurationResponse, error)
	// Set the channel configuration for any number of channels
	//
	// The maximum addressable channel will depend on the device. Currently this will be 512 on a MinION/GridION
	// and 3000 on a PromethION.
	SetChannelConfiguration(context.Context, *SetChannelConfigurationRequest) (*SetChannelConfigurationResponse, error)
	SetChannelConfigurationAll(context.Context, *SetChannelConfigurationAllRequest) (*SetChannelConfigurationAllResponse, error)
	// Set the saturation control configuration.
	//
	// The request is immediately sent to the data acquisition module, and applied. All settings can be changed
	// whilst the experiment is running.
	//
	// If any keys are not specified when this method is called (see the message for specific optional parameters),
	// the previously applied parameters are kept; initially, when this method has never been called, defaults from the
	// application config are used.
	//
	// note: calling this method resets anu in-progress saturations when it is called, causing them to need to start
	// saturation counts again, this may mean any saturations may take longer to occur.
	SetSaturationConfig(context.Context, *SetSaturationConfigRequest) (*SetSaturationConfigResponse, error)
	// Get the saturation control configuration.
	//
	// The default configuration is specifed by the MinKNOW application configuration, the command returns the most
	// recently applied saturation config.
	GetSaturationConfig(context.Context, *GetSaturationConfigRequest) (*GetSaturationConfigResponse, error)
	// Get the sample rate of the device
	//
	// Please refer to MinionDeviceService and PromethionDeviceService for the expected
	// return value for a minion and promethion respectively
	GetSampleRate(context.Context, *GetSampleRateRequest) (*GetSampleRateResponse, error)
	// Set the sample rate of the device, and returns the actual value set on the device
	//
	// Please refer to MinionDeviceService and PromethionDeviceService to see
	// how the value set here will be used to determine the real sample rate for a
	// minion and promethion respectively
	//
	// Trying to set the sample rate during an acquisition period will result in an error
	SetSampleRate(context.Context, *SetSampleRateRequest) (*SetSampleRateResponse, error)
	GetBiasVoltage(context.Context, *GetBiasVoltageRequest) (*GetBiasVoltageResponse, error)
	SetBiasVoltage(context.Context, *SetBiasVoltageRequest) (*SetBiasVoltageResponse, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) GetDeviceInfo(context.Context, *GetDeviceInfoRequest) (*GetDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceState(context.Context, *GetDeviceStateRequest) (*GetDeviceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceState not implemented")
}
func (UnimplementedDeviceServiceServer) StreamDeviceState(*StreamDeviceStateRequest, DeviceService_StreamDeviceStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceState not implemented")
}
func (UnimplementedDeviceServiceServer) GetFlowCellInfo(context.Context, *GetFlowCellInfoRequest) (*GetFlowCellInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowCellInfo not implemented")
}
func (UnimplementedDeviceServiceServer) StreamFlowCellInfo(*StreamFlowCellInfoRequest, DeviceService_StreamFlowCellInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFlowCellInfo not implemented")
}
func (UnimplementedDeviceServiceServer) SetUserSpecifiedFlowCellId(context.Context, *SetUserSpecifiedFlowCellIdRequest) (*SetUserSpecifiedFlowCellIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserSpecifiedFlowCellId not implemented")
}
func (UnimplementedDeviceServiceServer) SetUserSpecifiedProductCode(context.Context, *SetUserSpecifiedProductCodeRequest) (*SetUserSpecifiedProductCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserSpecifiedProductCode not implemented")
}
func (UnimplementedDeviceServiceServer) GetChannelsLayout(context.Context, *GetChannelsLayoutRequest) (*GetChannelsLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelsLayout not implemented")
}
func (UnimplementedDeviceServiceServer) ResetDeviceSettings(context.Context, *ResetDeviceSettingsRequest) (*ResetDeviceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDeviceSettings not implemented")
}
func (UnimplementedDeviceServiceServer) SetCalibration(context.Context, *SetCalibrationRequest) (*SetCalibrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCalibration not implemented")
}
func (UnimplementedDeviceServiceServer) ClearCalibration(context.Context, *ClearCalibrationRequest) (*ClearCalibrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCalibration not implemented")
}
func (UnimplementedDeviceServiceServer) GetCalibration(context.Context, *GetCalibrationRequest) (*GetCalibrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalibration not implemented")
}
func (UnimplementedDeviceServiceServer) SetTemperature(context.Context, *SetTemperatureRequest) (*SetTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTemperature not implemented")
}
func (UnimplementedDeviceServiceServer) GetTemperature(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (UnimplementedDeviceServiceServer) StreamTemperature(*StreamTemperatureRequest, DeviceService_StreamTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTemperature not implemented")
}
func (UnimplementedDeviceServiceServer) Unblock(context.Context, *UnblockRequest) (*UnblockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unblock not implemented")
}
func (UnimplementedDeviceServiceServer) CancelUnblocks(context.Context, *CancelUnblocksRequest) (*CancelUnblocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUnblocks not implemented")
}
func (UnimplementedDeviceServiceServer) GetChannelConfiguration(context.Context, *GetChannelConfigurationRequest) (*GetChannelConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelConfiguration not implemented")
}
func (UnimplementedDeviceServiceServer) SetChannelConfiguration(context.Context, *SetChannelConfigurationRequest) (*SetChannelConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelConfiguration not implemented")
}
func (UnimplementedDeviceServiceServer) SetChannelConfigurationAll(context.Context, *SetChannelConfigurationAllRequest) (*SetChannelConfigurationAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelConfigurationAll not implemented")
}
func (UnimplementedDeviceServiceServer) SetSaturationConfig(context.Context, *SetSaturationConfigRequest) (*SetSaturationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSaturationConfig not implemented")
}
func (UnimplementedDeviceServiceServer) GetSaturationConfig(context.Context, *GetSaturationConfigRequest) (*GetSaturationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaturationConfig not implemented")
}
func (UnimplementedDeviceServiceServer) GetSampleRate(context.Context, *GetSampleRateRequest) (*GetSampleRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleRate not implemented")
}
func (UnimplementedDeviceServiceServer) SetSampleRate(context.Context, *SetSampleRateRequest) (*SetSampleRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSampleRate not implemented")
}
func (UnimplementedDeviceServiceServer) GetBiasVoltage(context.Context, *GetBiasVoltageRequest) (*GetBiasVoltageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBiasVoltage not implemented")
}
func (UnimplementedDeviceServiceServer) SetBiasVoltage(context.Context, *SetBiasVoltageRequest) (*SetBiasVoltageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBiasVoltage not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_device_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceInfo(ctx, req.(*GetDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_device_state",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceState(ctx, req.(*GetDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_StreamDeviceState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).StreamDeviceState(m, &deviceServiceStreamDeviceStateServer{stream})
}

type DeviceService_StreamDeviceStateServer interface {
	Send(*GetDeviceStateResponse) error
	grpc.ServerStream
}

type deviceServiceStreamDeviceStateServer struct {
	grpc.ServerStream
}

func (x *deviceServiceStreamDeviceStateServer) Send(m *GetDeviceStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceService_GetFlowCellInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowCellInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetFlowCellInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_flow_cell_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetFlowCellInfo(ctx, req.(*GetFlowCellInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_StreamFlowCellInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFlowCellInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).StreamFlowCellInfo(m, &deviceServiceStreamFlowCellInfoServer{stream})
}

type DeviceService_StreamFlowCellInfoServer interface {
	Send(*GetFlowCellInfoResponse) error
	grpc.ServerStream
}

type deviceServiceStreamFlowCellInfoServer struct {
	grpc.ServerStream
}

func (x *deviceServiceStreamFlowCellInfoServer) Send(m *GetFlowCellInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceService_SetUserSpecifiedFlowCellId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserSpecifiedFlowCellIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetUserSpecifiedFlowCellId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_user_specified_flow_cell_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetUserSpecifiedFlowCellId(ctx, req.(*SetUserSpecifiedFlowCellIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetUserSpecifiedProductCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserSpecifiedProductCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetUserSpecifiedProductCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_user_specified_product_code",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetUserSpecifiedProductCode(ctx, req.(*SetUserSpecifiedProductCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetChannelsLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetChannelsLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_channels_layout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetChannelsLayout(ctx, req.(*GetChannelsLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ResetDeviceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetDeviceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ResetDeviceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/reset_device_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ResetDeviceSettings(ctx, req.(*ResetDeviceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetCalibration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCalibrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetCalibration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_calibration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetCalibration(ctx, req.(*SetCalibrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ClearCalibration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCalibrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ClearCalibration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/clear_calibration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ClearCalibration(ctx, req.(*ClearCalibrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetCalibration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCalibrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetCalibration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_calibration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetCalibration(ctx, req.(*GetCalibrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_temperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetTemperature(ctx, req.(*SetTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_temperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetTemperature(ctx, req.(*GetTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_StreamTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTemperatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).StreamTemperature(m, &deviceServiceStreamTemperatureServer{stream})
}

type DeviceService_StreamTemperatureServer interface {
	Send(*GetTemperatureResponse) error
	grpc.ServerStream
}

type deviceServiceStreamTemperatureServer struct {
	grpc.ServerStream
}

func (x *deviceServiceStreamTemperatureServer) Send(m *GetTemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceService_Unblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Unblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/unblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Unblock(ctx, req.(*UnblockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CancelUnblocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUnblocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CancelUnblocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/cancel_unblocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CancelUnblocks(ctx, req.(*CancelUnblocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_channel_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetChannelConfiguration(ctx, req.(*GetChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_channel_configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetChannelConfiguration(ctx, req.(*SetChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetChannelConfigurationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelConfigurationAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetChannelConfigurationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_channel_configuration_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetChannelConfigurationAll(ctx, req.(*SetChannelConfigurationAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetSaturationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSaturationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetSaturationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_saturation_config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetSaturationConfig(ctx, req.(*SetSaturationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetSaturationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSaturationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetSaturationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_saturation_config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetSaturationConfig(ctx, req.(*GetSaturationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetSampleRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetSampleRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_sample_rate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetSampleRate(ctx, req.(*GetSampleRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetSampleRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSampleRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetSampleRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_sample_rate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetSampleRate(ctx, req.(*SetSampleRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetBiasVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBiasVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetBiasVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/get_bias_voltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetBiasVoltage(ctx, req.(*GetBiasVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetBiasVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBiasVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetBiasVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.device.DeviceService/set_bias_voltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetBiasVoltage(ctx, req.(*SetBiasVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minknow_api.device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_device_info",
			Handler:    _DeviceService_GetDeviceInfo_Handler,
		},
		{
			MethodName: "get_device_state",
			Handler:    _DeviceService_GetDeviceState_Handler,
		},
		{
			MethodName: "get_flow_cell_info",
			Handler:    _DeviceService_GetFlowCellInfo_Handler,
		},
		{
			MethodName: "set_user_specified_flow_cell_id",
			Handler:    _DeviceService_SetUserSpecifiedFlowCellId_Handler,
		},
		{
			MethodName: "set_user_specified_product_code",
			Handler:    _DeviceService_SetUserSpecifiedProductCode_Handler,
		},
		{
			MethodName: "get_channels_layout",
			Handler:    _DeviceService_GetChannelsLayout_Handler,
		},
		{
			MethodName: "reset_device_settings",
			Handler:    _DeviceService_ResetDeviceSettings_Handler,
		},
		{
			MethodName: "set_calibration",
			Handler:    _DeviceService_SetCalibration_Handler,
		},
		{
			MethodName: "clear_calibration",
			Handler:    _DeviceService_ClearCalibration_Handler,
		},
		{
			MethodName: "get_calibration",
			Handler:    _DeviceService_GetCalibration_Handler,
		},
		{
			MethodName: "set_temperature",
			Handler:    _DeviceService_SetTemperature_Handler,
		},
		{
			MethodName: "get_temperature",
			Handler:    _DeviceService_GetTemperature_Handler,
		},
		{
			MethodName: "unblock",
			Handler:    _DeviceService_Unblock_Handler,
		},
		{
			MethodName: "cancel_unblocks",
			Handler:    _DeviceService_CancelUnblocks_Handler,
		},
		{
			MethodName: "get_channel_configuration",
			Handler:    _DeviceService_GetChannelConfiguration_Handler,
		},
		{
			MethodName: "set_channel_configuration",
			Handler:    _DeviceService_SetChannelConfiguration_Handler,
		},
		{
			MethodName: "set_channel_configuration_all",
			Handler:    _DeviceService_SetChannelConfigurationAll_Handler,
		},
		{
			MethodName: "set_saturation_config",
			Handler:    _DeviceService_SetSaturationConfig_Handler,
		},
		{
			MethodName: "get_saturation_config",
			Handler:    _DeviceService_GetSaturationConfig_Handler,
		},
		{
			MethodName: "get_sample_rate",
			Handler:    _DeviceService_GetSampleRate_Handler,
		},
		{
			MethodName: "set_sample_rate",
			Handler:    _DeviceService_SetSampleRate_Handler,
		},
		{
			MethodName: "get_bias_voltage",
			Handler:    _DeviceService_GetBiasVoltage_Handler,
		},
		{
			MethodName: "set_bias_voltage",
			Handler:    _DeviceService_SetBiasVoltage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream_device_state",
			Handler:       _DeviceService_StreamDeviceState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_flow_cell_info",
			Handler:       _DeviceService_StreamFlowCellInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_temperature",
			Handler:       _DeviceService_StreamTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow_api/device.proto",
}
