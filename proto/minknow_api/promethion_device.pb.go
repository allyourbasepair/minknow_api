// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/promethion_device.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PixelSettings_OverloadMode int32

const (
	// Do not change the overload mode
	PixelSettings_OVERLOAD_KEEP PixelSettings_OverloadMode = 0
	// Set a flag when overload occurs, but take no other action.
	PixelSettings_OVERLOAD_SET_FLAG PixelSettings_OverloadMode = 1
	// Disable the channel when the overload occurs, until overload mode is set again.
	PixelSettings_OVERLOAD_LATCH_OFF PixelSettings_OverloadMode = 2
	// Clear any existing latch conditions.
	PixelSettings_OVERLOAD_CLEAR PixelSettings_OverloadMode = 3
	// Limit current output when saturation occurs, also flag the saturation.
	PixelSettings_OVERLOAD_LIMIT PixelSettings_OverloadMode = 4
)

// Enum value maps for PixelSettings_OverloadMode.
var (
	PixelSettings_OverloadMode_name = map[int32]string{
		0: "OVERLOAD_KEEP",
		1: "OVERLOAD_SET_FLAG",
		2: "OVERLOAD_LATCH_OFF",
		3: "OVERLOAD_CLEAR",
		4: "OVERLOAD_LIMIT",
	}
	PixelSettings_OverloadMode_value = map[string]int32{
		"OVERLOAD_KEEP":      0,
		"OVERLOAD_SET_FLAG":  1,
		"OVERLOAD_LATCH_OFF": 2,
		"OVERLOAD_CLEAR":     3,
		"OVERLOAD_LIMIT":     4,
	}
)

func (x PixelSettings_OverloadMode) Enum() *PixelSettings_OverloadMode {
	p := new(PixelSettings_OverloadMode)
	*p = x
	return p
}

func (x PixelSettings_OverloadMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_OverloadMode) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[0].Descriptor()
}

func (PixelSettings_OverloadMode) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[0]
}

func (x PixelSettings_OverloadMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_OverloadMode.Descriptor instead.
func (PixelSettings_OverloadMode) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 0}
}

type PixelSettings_LowPassFilter int32

const (
	PixelSettings_LPF_KEEP  PixelSettings_LowPassFilter = 0
	PixelSettings_LPF_10kHz PixelSettings_LowPassFilter = 1
	PixelSettings_LPF_20kHz PixelSettings_LowPassFilter = 2
	PixelSettings_LPF_30kHz PixelSettings_LowPassFilter = 3
	PixelSettings_LPF_40kHz PixelSettings_LowPassFilter = 4
	PixelSettings_LPF_50kHz PixelSettings_LowPassFilter = 5
	PixelSettings_LPF_60kHz PixelSettings_LowPassFilter = 6
	PixelSettings_LPF_70kHz PixelSettings_LowPassFilter = 7
	PixelSettings_LPF_80kHz PixelSettings_LowPassFilter = 8
)

// Enum value maps for PixelSettings_LowPassFilter.
var (
	PixelSettings_LowPassFilter_name = map[int32]string{
		0: "LPF_KEEP",
		1: "LPF_10kHz",
		2: "LPF_20kHz",
		3: "LPF_30kHz",
		4: "LPF_40kHz",
		5: "LPF_50kHz",
		6: "LPF_60kHz",
		7: "LPF_70kHz",
		8: "LPF_80kHz",
	}
	PixelSettings_LowPassFilter_value = map[string]int32{
		"LPF_KEEP":  0,
		"LPF_10kHz": 1,
		"LPF_20kHz": 2,
		"LPF_30kHz": 3,
		"LPF_40kHz": 4,
		"LPF_50kHz": 5,
		"LPF_60kHz": 6,
		"LPF_70kHz": 7,
		"LPF_80kHz": 8,
	}
)

func (x PixelSettings_LowPassFilter) Enum() *PixelSettings_LowPassFilter {
	p := new(PixelSettings_LowPassFilter)
	*p = x
	return p
}

func (x PixelSettings_LowPassFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_LowPassFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[1].Descriptor()
}

func (PixelSettings_LowPassFilter) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[1]
}

func (x PixelSettings_LowPassFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_LowPassFilter.Descriptor instead.
func (PixelSettings_LowPassFilter) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 1}
}

type PixelSettings_GainMultiplier int32

const (
	PixelSettings_INTGAIN_KEEP PixelSettings_GainMultiplier = 0
	PixelSettings_INTGAIN_2    PixelSettings_GainMultiplier = 1
	PixelSettings_INTGAIN_4    PixelSettings_GainMultiplier = 2
)

// Enum value maps for PixelSettings_GainMultiplier.
var (
	PixelSettings_GainMultiplier_name = map[int32]string{
		0: "INTGAIN_KEEP",
		1: "INTGAIN_2",
		2: "INTGAIN_4",
	}
	PixelSettings_GainMultiplier_value = map[string]int32{
		"INTGAIN_KEEP": 0,
		"INTGAIN_2":    1,
		"INTGAIN_4":    2,
	}
)

func (x PixelSettings_GainMultiplier) Enum() *PixelSettings_GainMultiplier {
	p := new(PixelSettings_GainMultiplier)
	*p = x
	return p
}

func (x PixelSettings_GainMultiplier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_GainMultiplier) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[2].Descriptor()
}

func (PixelSettings_GainMultiplier) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[2]
}

func (x PixelSettings_GainMultiplier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_GainMultiplier.Descriptor instead.
func (PixelSettings_GainMultiplier) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 2}
}

type PixelSettings_GainCapacitor int32

const (
	PixelSettings_INTCAP_KEEP  PixelSettings_GainCapacitor = 0
	PixelSettings_INTCAP_100fF PixelSettings_GainCapacitor = 1
	PixelSettings_INTCAP_200fF PixelSettings_GainCapacitor = 2
	PixelSettings_INTCAP_500fF PixelSettings_GainCapacitor = 3
	PixelSettings_INTCAP_600fF PixelSettings_GainCapacitor = 4
)

// Enum value maps for PixelSettings_GainCapacitor.
var (
	PixelSettings_GainCapacitor_name = map[int32]string{
		0: "INTCAP_KEEP",
		1: "INTCAP_100fF",
		2: "INTCAP_200fF",
		3: "INTCAP_500fF",
		4: "INTCAP_600fF",
	}
	PixelSettings_GainCapacitor_value = map[string]int32{
		"INTCAP_KEEP":  0,
		"INTCAP_100fF": 1,
		"INTCAP_200fF": 2,
		"INTCAP_500fF": 3,
		"INTCAP_600fF": 4,
	}
)

func (x PixelSettings_GainCapacitor) Enum() *PixelSettings_GainCapacitor {
	p := new(PixelSettings_GainCapacitor)
	*p = x
	return p
}

func (x PixelSettings_GainCapacitor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_GainCapacitor) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[3].Descriptor()
}

func (PixelSettings_GainCapacitor) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[3]
}

func (x PixelSettings_GainCapacitor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_GainCapacitor.Descriptor instead.
func (PixelSettings_GainCapacitor) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 3}
}

type PixelSettings_CalibrationMode int32

const (
	PixelSettings_CALIB_KEEP PixelSettings_CalibrationMode = 0
	PixelSettings_CALIB_FAST PixelSettings_CalibrationMode = 1
	PixelSettings_CALIB_SLOW PixelSettings_CalibrationMode = 2
)

// Enum value maps for PixelSettings_CalibrationMode.
var (
	PixelSettings_CalibrationMode_name = map[int32]string{
		0: "CALIB_KEEP",
		1: "CALIB_FAST",
		2: "CALIB_SLOW",
	}
	PixelSettings_CalibrationMode_value = map[string]int32{
		"CALIB_KEEP": 0,
		"CALIB_FAST": 1,
		"CALIB_SLOW": 2,
	}
)

func (x PixelSettings_CalibrationMode) Enum() *PixelSettings_CalibrationMode {
	p := new(PixelSettings_CalibrationMode)
	*p = x
	return p
}

func (x PixelSettings_CalibrationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_CalibrationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[4].Descriptor()
}

func (PixelSettings_CalibrationMode) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[4]
}

func (x PixelSettings_CalibrationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_CalibrationMode.Descriptor instead.
func (PixelSettings_CalibrationMode) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 4}
}

type PixelSettings_UnblockMode int32

const (
	PixelSettings_UNBLOCK_KEEP PixelSettings_UnblockMode = 0
	PixelSettings_UNBLOCK_ON   PixelSettings_UnblockMode = 1
	PixelSettings_UNBLOCK_OFF  PixelSettings_UnblockMode = 2
)

// Enum value maps for PixelSettings_UnblockMode.
var (
	PixelSettings_UnblockMode_name = map[int32]string{
		0: "UNBLOCK_KEEP",
		1: "UNBLOCK_ON",
		2: "UNBLOCK_OFF",
	}
	PixelSettings_UnblockMode_value = map[string]int32{
		"UNBLOCK_KEEP": 0,
		"UNBLOCK_ON":   1,
		"UNBLOCK_OFF":  2,
	}
)

func (x PixelSettings_UnblockMode) Enum() *PixelSettings_UnblockMode {
	p := new(PixelSettings_UnblockMode)
	*p = x
	return p
}

func (x PixelSettings_UnblockMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_UnblockMode) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[5].Descriptor()
}

func (PixelSettings_UnblockMode) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[5]
}

func (x PixelSettings_UnblockMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_UnblockMode.Descriptor instead.
func (PixelSettings_UnblockMode) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 5}
}

type PixelSettings_RegenerationCurrent int32

const (
	PixelSettings_REGEN_KEEP   PixelSettings_RegenerationCurrent = 0
	PixelSettings_REGEN_0pA    PixelSettings_RegenerationCurrent = 1
	PixelSettings_REGEN_50pA   PixelSettings_RegenerationCurrent = 2
	PixelSettings_REGEN_100pA  PixelSettings_RegenerationCurrent = 3
	PixelSettings_REGEN_150pA  PixelSettings_RegenerationCurrent = 4
	PixelSettings_REGEN_400pA  PixelSettings_RegenerationCurrent = 5
	PixelSettings_REGEN_450pA  PixelSettings_RegenerationCurrent = 6
	PixelSettings_REGEN_500pA  PixelSettings_RegenerationCurrent = 7
	PixelSettings_REGEN_550pA  PixelSettings_RegenerationCurrent = 8
	PixelSettings_REGEN_800pA  PixelSettings_RegenerationCurrent = 9
	PixelSettings_REGEN_850pA  PixelSettings_RegenerationCurrent = 10
	PixelSettings_REGEN_900pA  PixelSettings_RegenerationCurrent = 11
	PixelSettings_REGEN_950pA  PixelSettings_RegenerationCurrent = 12
	PixelSettings_REGEN_1200pA PixelSettings_RegenerationCurrent = 13
	PixelSettings_REGEN_1250pA PixelSettings_RegenerationCurrent = 14
	PixelSettings_REGEN_1300pA PixelSettings_RegenerationCurrent = 15
	PixelSettings_REGEN_1350pA PixelSettings_RegenerationCurrent = 16
)

// Enum value maps for PixelSettings_RegenerationCurrent.
var (
	PixelSettings_RegenerationCurrent_name = map[int32]string{
		0:  "REGEN_KEEP",
		1:  "REGEN_0pA",
		2:  "REGEN_50pA",
		3:  "REGEN_100pA",
		4:  "REGEN_150pA",
		5:  "REGEN_400pA",
		6:  "REGEN_450pA",
		7:  "REGEN_500pA",
		8:  "REGEN_550pA",
		9:  "REGEN_800pA",
		10: "REGEN_850pA",
		11: "REGEN_900pA",
		12: "REGEN_950pA",
		13: "REGEN_1200pA",
		14: "REGEN_1250pA",
		15: "REGEN_1300pA",
		16: "REGEN_1350pA",
	}
	PixelSettings_RegenerationCurrent_value = map[string]int32{
		"REGEN_KEEP":   0,
		"REGEN_0pA":    1,
		"REGEN_50pA":   2,
		"REGEN_100pA":  3,
		"REGEN_150pA":  4,
		"REGEN_400pA":  5,
		"REGEN_450pA":  6,
		"REGEN_500pA":  7,
		"REGEN_550pA":  8,
		"REGEN_800pA":  9,
		"REGEN_850pA":  10,
		"REGEN_900pA":  11,
		"REGEN_950pA":  12,
		"REGEN_1200pA": 13,
		"REGEN_1250pA": 14,
		"REGEN_1300pA": 15,
		"REGEN_1350pA": 16,
	}
)

func (x PixelSettings_RegenerationCurrent) Enum() *PixelSettings_RegenerationCurrent {
	p := new(PixelSettings_RegenerationCurrent)
	*p = x
	return p
}

func (x PixelSettings_RegenerationCurrent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_RegenerationCurrent) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[6].Descriptor()
}

func (PixelSettings_RegenerationCurrent) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[6]
}

func (x PixelSettings_RegenerationCurrent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_RegenerationCurrent.Descriptor instead.
func (PixelSettings_RegenerationCurrent) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 6}
}

type PixelSettings_BiasCurrent int32

const (
	PixelSettings_BIAS_KEEP    PixelSettings_BiasCurrent = 0
	PixelSettings_BIAS_OFF     PixelSettings_BiasCurrent = 1 //0 microA
	PixelSettings_BIAS_LOW     PixelSettings_BiasCurrent = 2 //390 microA
	PixelSettings_BIAS_HIGH    PixelSettings_BiasCurrent = 3 //808 microA
	PixelSettings_BIAS_NOMINAL PixelSettings_BiasCurrent = 4 //586 microA
)

// Enum value maps for PixelSettings_BiasCurrent.
var (
	PixelSettings_BiasCurrent_name = map[int32]string{
		0: "BIAS_KEEP",
		1: "BIAS_OFF",
		2: "BIAS_LOW",
		3: "BIAS_HIGH",
		4: "BIAS_NOMINAL",
	}
	PixelSettings_BiasCurrent_value = map[string]int32{
		"BIAS_KEEP":    0,
		"BIAS_OFF":     1,
		"BIAS_LOW":     2,
		"BIAS_HIGH":    3,
		"BIAS_NOMINAL": 4,
	}
)

func (x PixelSettings_BiasCurrent) Enum() *PixelSettings_BiasCurrent {
	p := new(PixelSettings_BiasCurrent)
	*p = x
	return p
}

func (x PixelSettings_BiasCurrent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_BiasCurrent) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[7].Descriptor()
}

func (PixelSettings_BiasCurrent) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[7]
}

func (x PixelSettings_BiasCurrent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_BiasCurrent.Descriptor instead.
func (PixelSettings_BiasCurrent) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 7}
}

// Input config options
//
// Note: for 2 well promethion chips, wells 1-2 are valid.
// for 4 well, 1-4 are valid.
type PixelSettings_InputWell_InputConfig int32

const (
	// Disconnect the channel completely.
	PixelSettings_InputWell_NONE   PixelSettings_InputWell_InputConfig = 0
	PixelSettings_InputWell_WELL_1 PixelSettings_InputWell_InputConfig = 1
	PixelSettings_InputWell_WELL_2 PixelSettings_InputWell_InputConfig = 2
	PixelSettings_InputWell_WELL_3 PixelSettings_InputWell_InputConfig = 3
	PixelSettings_InputWell_WELL_4 PixelSettings_InputWell_InputConfig = 4
	// Connect all wells - only valid for regeneration
	PixelSettings_InputWell_ALL PixelSettings_InputWell_InputConfig = 5
)

// Enum value maps for PixelSettings_InputWell_InputConfig.
var (
	PixelSettings_InputWell_InputConfig_name = map[int32]string{
		0: "NONE",
		1: "WELL_1",
		2: "WELL_2",
		3: "WELL_3",
		4: "WELL_4",
		5: "ALL",
	}
	PixelSettings_InputWell_InputConfig_value = map[string]int32{
		"NONE":   0,
		"WELL_1": 1,
		"WELL_2": 2,
		"WELL_3": 3,
		"WELL_4": 4,
		"ALL":    5,
	}
)

func (x PixelSettings_InputWell_InputConfig) Enum() *PixelSettings_InputWell_InputConfig {
	p := new(PixelSettings_InputWell_InputConfig)
	*p = x
	return p
}

func (x PixelSettings_InputWell_InputConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PixelSettings_InputWell_InputConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_promethion_device_proto_enumTypes[8].Descriptor()
}

func (PixelSettings_InputWell_InputConfig) Type() protoreflect.EnumType {
	return &file_minknow_api_promethion_device_proto_enumTypes[8]
}

func (x PixelSettings_InputWell_InputConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PixelSettings_InputWell_InputConfig.Descriptor instead.
func (PixelSettings_InputWell_InputConfig) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 0, 0}
}

type WaveformSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The waveform data applied to the device (in millivolts)
	//
	// Must contain 32 values, in order to be a valid waveform.
	Voltages []float64 `protobuf:"fixed64,1,rep,packed,name=voltages,proto3" json:"voltages,omitempty"`
	// The frequency of the applied waveform, in Hz.
	//
	// Valid values are between 7.8125Hz and 500Hz.
	Frequency float64 `protobuf:"fixed64,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *WaveformSettings) Reset() {
	*x = WaveformSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaveformSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaveformSettings) ProtoMessage() {}

func (x *WaveformSettings) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaveformSettings.ProtoReflect.Descriptor instead.
func (*WaveformSettings) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{0}
}

func (x *WaveformSettings) GetVoltages() []float64 {
	if x != nil {
		return x.Voltages
	}
	return nil
}

func (x *WaveformSettings) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type DeviceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of measurements to take each second.
	//
	// Possible values are between 1000, and 10000.
	// If the value is outside of this range, it will be clamped within it
	//
	// This value cannot be changed during acquisition.
	SamplingFrequency *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=sampling_frequency,json=samplingFrequency,proto3" json:"sampling_frequency,omitempty"`
	// The value to apply as the ramp voltage (in millivolts)
	//
	// Valid values are in the range -1250mv..1250mv
	RampVoltage *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=ramp_voltage,json=rampVoltage,proto3" json:"ramp_voltage,omitempty"`
	// Settings controlling the device bias voltage
	//
	// Types that are assignable to BiasVoltageSetting:
	//	*DeviceSettings_BiasVoltage
	//	*DeviceSettings_BiasVoltageWaveform
	BiasVoltageSetting isDeviceSettings_BiasVoltageSetting `protobuf_oneof:"bias_voltage_setting"`
	// Enables saturation control on the device
	SaturationControlEnabled *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=saturation_control_enabled,json=saturationControlEnabled,proto3" json:"saturation_control_enabled,omitempty"`
	// Enable use of the fast calibration mode across the device
	FastCalibrationEnabled *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=fast_calibration_enabled,json=fastCalibrationEnabled,proto3" json:"fast_calibration_enabled,omitempty"`
	// If the device is capable (see device.get_device_info().temperature_controllable)
	// then this sets the minimum and maximum temperatures of the flow-cell.
	//
	// These values must be between the limits specified in the application config,
	// see: min_user_setpoint_temperature_celsius and max_user_setpoint_temperature_celsius
	TemperatureTarget *wrapperspb.FloatValue `protobuf:"bytes,7,opt,name=temperature_target,json=temperatureTarget,proto3" json:"temperature_target,omitempty"`
	// If specified, the device will adopt these timings to set how
	// long is spent at various stages of the current digitisation processes.
	// The message includes a way of returning to default timings.
	//
	// This value cannot be changed during acquisition
	Timings *TimingEnginePeriods `protobuf:"bytes,8,opt,name=timings,proto3" json:"timings,omitempty"`
}

func (x *DeviceSettings) Reset() {
	*x = DeviceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSettings) ProtoMessage() {}

func (x *DeviceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSettings.ProtoReflect.Descriptor instead.
func (*DeviceSettings) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceSettings) GetSamplingFrequency() *wrapperspb.Int32Value {
	if x != nil {
		return x.SamplingFrequency
	}
	return nil
}

func (x *DeviceSettings) GetRampVoltage() *wrapperspb.DoubleValue {
	if x != nil {
		return x.RampVoltage
	}
	return nil
}

func (m *DeviceSettings) GetBiasVoltageSetting() isDeviceSettings_BiasVoltageSetting {
	if m != nil {
		return m.BiasVoltageSetting
	}
	return nil
}

func (x *DeviceSettings) GetBiasVoltage() float64 {
	if x, ok := x.GetBiasVoltageSetting().(*DeviceSettings_BiasVoltage); ok {
		return x.BiasVoltage
	}
	return 0
}

func (x *DeviceSettings) GetBiasVoltageWaveform() *WaveformSettings {
	if x, ok := x.GetBiasVoltageSetting().(*DeviceSettings_BiasVoltageWaveform); ok {
		return x.BiasVoltageWaveform
	}
	return nil
}

func (x *DeviceSettings) GetSaturationControlEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.SaturationControlEnabled
	}
	return nil
}

func (x *DeviceSettings) GetFastCalibrationEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.FastCalibrationEnabled
	}
	return nil
}

func (x *DeviceSettings) GetTemperatureTarget() *wrapperspb.FloatValue {
	if x != nil {
		return x.TemperatureTarget
	}
	return nil
}

func (x *DeviceSettings) GetTimings() *TimingEnginePeriods {
	if x != nil {
		return x.Timings
	}
	return nil
}

type isDeviceSettings_BiasVoltageSetting interface {
	isDeviceSettings_BiasVoltageSetting()
}

type DeviceSettings_BiasVoltage struct {
	// The value to apply as the bias voltage (in millivolts)
	//
	// Valid values are in the range -1250mv..1250mv
	BiasVoltage float64 `protobuf:"fixed64,3,opt,name=bias_voltage,json=biasVoltage,proto3,oneof"`
}

type DeviceSettings_BiasVoltageWaveform struct {
	// The waveform settings
	BiasVoltageWaveform *WaveformSettings `protobuf:"bytes,4,opt,name=bias_voltage_waveform,json=biasVoltageWaveform,proto3,oneof"`
}

func (*DeviceSettings_BiasVoltage) isDeviceSettings_BiasVoltageSetting() {}

func (*DeviceSettings_BiasVoltageWaveform) isDeviceSettings_BiasVoltageSetting() {}

type TimingEnginePeriods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reset1 phase
	//
	// Note: Commands are written to the ASIC during this period, to allow
	// sufficient time to write the commands, this should never be less than
	// 1.2us or 240.
	RST1 *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=RST1,proto3" json:"RST1,omitempty"`
	// Reset1 to CDS1 transition
	RST1_CDS1 *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=RST1_CDS1,json=RST1CDS1,proto3" json:"RST1_CDS1,omitempty"`
	// CDS1 phase (Correlated Double Sampling) sample-point 1
	CDS1 *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=CDS1,proto3" json:"CDS1,omitempty"`
	// CDS1 to DATA transiton
	CDS1_DATA *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=CDS1_DATA,json=CDS1DATA,proto3" json:"CDS1_DATA,omitempty"`
	// DATA transfer phase
	DATA *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=DATA,proto3" json:"DATA,omitempty"`
	// DATA transfer to Reset2 transition.
	//
	// NOTE: Setting this value has no effect, MinKNOW will choose a value for
	// DATA_RST2 itself to maintain the required frame-rate. Reading it will
	// return the chosen DATA_RST2 period.
	DATA_RST2 *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=DATA_RST2,json=DATARST2,proto3" json:"DATA_RST2,omitempty"`
	// Reset2
	RST2 *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=RST2,proto3" json:"RST2,omitempty"`
	// Reset2 to CDS2 transition
	RST2_CDS2 *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=RST2_CDS2,json=RST2CDS2,proto3" json:"RST2_CDS2,omitempty"`
	// CDS2 Phase (sample-point 2)
	CDS2 *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=CDS2,proto3" json:"CDS2,omitempty"`
	// CDS2 to SH transition
	CDS2_SH *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=CDS2_SH,json=CDS2SH,proto3" json:"CDS2_SH,omitempty"`
	// SH phase (Sample and Hold)
	SH *wrapperspb.UInt32Value `protobuf:"bytes,11,opt,name=SH,proto3" json:"SH,omitempty"`
	// SH to Reset1 transition
	SH_RST1 *wrapperspb.UInt32Value `protobuf:"bytes,12,opt,name=SH_RST1,json=SHRST1,proto3" json:"SH_RST1,omitempty"`
	// If written true, other fields will be ignored and the hardware will use
	// default timings. When read will return true if previously set true,
	// it will not tell you if the timing periods you previously entered
	// are the same as the default values.
	UseDefaultValues *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=use_default_values,json=useDefaultValues,proto3" json:"use_default_values,omitempty"`
}

func (x *TimingEnginePeriods) Reset() {
	*x = TimingEnginePeriods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimingEnginePeriods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimingEnginePeriods) ProtoMessage() {}

func (x *TimingEnginePeriods) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimingEnginePeriods.ProtoReflect.Descriptor instead.
func (*TimingEnginePeriods) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{2}
}

func (x *TimingEnginePeriods) GetRST1() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RST1
	}
	return nil
}

func (x *TimingEnginePeriods) GetRST1_CDS1() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RST1_CDS1
	}
	return nil
}

func (x *TimingEnginePeriods) GetCDS1() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CDS1
	}
	return nil
}

func (x *TimingEnginePeriods) GetCDS1_DATA() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CDS1_DATA
	}
	return nil
}

func (x *TimingEnginePeriods) GetDATA() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DATA
	}
	return nil
}

func (x *TimingEnginePeriods) GetDATA_RST2() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DATA_RST2
	}
	return nil
}

func (x *TimingEnginePeriods) GetRST2() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RST2
	}
	return nil
}

func (x *TimingEnginePeriods) GetRST2_CDS2() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RST2_CDS2
	}
	return nil
}

func (x *TimingEnginePeriods) GetCDS2() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CDS2
	}
	return nil
}

func (x *TimingEnginePeriods) GetCDS2_SH() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CDS2_SH
	}
	return nil
}

func (x *TimingEnginePeriods) GetSH() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SH
	}
	return nil
}

func (x *TimingEnginePeriods) GetSH_RST1() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SH_RST1
	}
	return nil
}

func (x *TimingEnginePeriods) GetUseDefaultValues() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseDefaultValues
	}
	return nil
}

type PixelBlockSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Voltage clamp for regeneration circuit (in millivolts)
	//
	// The voltage in the regeneration circuit is clamped under this value,
	// whilst applying the current specified in each pixel's settings.
	//
	// The acceptable input range is -1000..1000 (inclusive)
	RegenCurrentVoltageClamp *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=regen_current_voltage_clamp,json=regenCurrentVoltageClamp,proto3" json:"regen_current_voltage_clamp,omitempty"`
	// The unblock voltage to apply when a pixel is unblocking.
	//
	// The acceptable input range is -1000..1000 (inclusive)
	UnblockVoltage *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=unblock_voltage,json=unblockVoltage,proto3" json:"unblock_voltage,omitempty"`
}

func (x *PixelBlockSettings) Reset() {
	*x = PixelBlockSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PixelBlockSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PixelBlockSettings) ProtoMessage() {}

func (x *PixelBlockSettings) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PixelBlockSettings.ProtoReflect.Descriptor instead.
func (*PixelBlockSettings) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{3}
}

func (x *PixelBlockSettings) GetRegenCurrentVoltageClamp() *wrapperspb.DoubleValue {
	if x != nil {
		return x.RegenCurrentVoltageClamp
	}
	return nil
}

func (x *PixelBlockSettings) GetUnblockVoltage() *wrapperspb.DoubleValue {
	if x != nil {
		return x.UnblockVoltage
	}
	return nil
}

type PixelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input driving the adv
	Input *PixelSettings_InputWell `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// The mode the asic uses to handle currents that go above its adc range.
	OverloadMode PixelSettings_OverloadMode `protobuf:"varint,2,opt,name=overload_mode,json=overloadMode,proto3,enum=minknow_api.promethion_device.PixelSettings_OverloadMode" json:"overload_mode,omitempty"`
	// Signal filter for input adc signal.
	CutoffFrequency PixelSettings_LowPassFilter `protobuf:"varint,3,opt,name=cutoff_frequency,json=cutoffFrequency,proto3,enum=minknow_api.promethion_device.PixelSettings_LowPassFilter" json:"cutoff_frequency,omitempty"`
	// Signal gain multiplier, applied to the integrator circuit.
	GainMultiplier PixelSettings_GainMultiplier `protobuf:"varint,4,opt,name=gain_multiplier,json=gainMultiplier,proto3,enum=minknow_api.promethion_device.PixelSettings_GainMultiplier" json:"gain_multiplier,omitempty"`
	// Gain capacitor, used in the integrtor circuit.
	GainCapacitor PixelSettings_GainCapacitor `protobuf:"varint,5,opt,name=gain_capacitor,json=gainCapacitor,proto3,enum=minknow_api.promethion_device.PixelSettings_GainCapacitor" json:"gain_capacitor,omitempty"`
	// The calibration mode to use.
	CalibrationMode PixelSettings_CalibrationMode `protobuf:"varint,6,opt,name=calibration_mode,json=calibrationMode,proto3,enum=minknow_api.promethion_device.PixelSettings_CalibrationMode" json:"calibration_mode,omitempty"`
	// Controls the application of the unblock voltage to the pixel.
	UnblockVoltage PixelSettings_UnblockMode `protobuf:"varint,7,opt,name=unblock_voltage,json=unblockVoltage,proto3,enum=minknow_api.promethion_device.PixelSettings_UnblockMode" json:"unblock_voltage,omitempty"`
	// Inverts the current's polarity.
	CurrentInverted *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=current_inverted,json=currentInverted,proto3" json:"current_inverted,omitempty"`
	// Control the state of the membrane simulation.
	MembraneSimulationEnabled *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=membrane_simulation_enabled,json=membraneSimulationEnabled,proto3" json:"membrane_simulation_enabled,omitempty"`
	// Control the regeneration current used when regenerating well's.
	RegenerationCurrent PixelSettings_RegenerationCurrent `protobuf:"varint,10,opt,name=regeneration_current,json=regenerationCurrent,proto3,enum=minknow_api.promethion_device.PixelSettings_RegenerationCurrent" json:"regeneration_current,omitempty"`
	// Control if the regeneration current test is enabled.
	//
	// This connects the regeneration current to the integration adc circuit and the input well.
	// and allows users to read regen current via the channel adc value.
	RegenerationCurrentTestEnabled *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=regeneration_current_test_enabled,json=regenerationCurrentTestEnabled,proto3" json:"regeneration_current_test_enabled,omitempty"`
	// The bias current for the amplifier - this controls the level of noise of the signal.
	// The higher the bias current, the lower the noise, but the bigger the heat and power drawn by
	// the amplifier. If it is set to off, no signal readings can be made.
	BiasCurrent PixelSettings_BiasCurrent `protobuf:"varint,12,opt,name=bias_current,json=biasCurrent,proto3,enum=minknow_api.promethion_device.PixelSettings_BiasCurrent" json:"bias_current,omitempty"`
}

func (x *PixelSettings) Reset() {
	*x = PixelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PixelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PixelSettings) ProtoMessage() {}

func (x *PixelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PixelSettings.ProtoReflect.Descriptor instead.
func (*PixelSettings) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4}
}

func (x *PixelSettings) GetInput() *PixelSettings_InputWell {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *PixelSettings) GetOverloadMode() PixelSettings_OverloadMode {
	if x != nil {
		return x.OverloadMode
	}
	return PixelSettings_OVERLOAD_KEEP
}

func (x *PixelSettings) GetCutoffFrequency() PixelSettings_LowPassFilter {
	if x != nil {
		return x.CutoffFrequency
	}
	return PixelSettings_LPF_KEEP
}

func (x *PixelSettings) GetGainMultiplier() PixelSettings_GainMultiplier {
	if x != nil {
		return x.GainMultiplier
	}
	return PixelSettings_INTGAIN_KEEP
}

func (x *PixelSettings) GetGainCapacitor() PixelSettings_GainCapacitor {
	if x != nil {
		return x.GainCapacitor
	}
	return PixelSettings_INTCAP_KEEP
}

func (x *PixelSettings) GetCalibrationMode() PixelSettings_CalibrationMode {
	if x != nil {
		return x.CalibrationMode
	}
	return PixelSettings_CALIB_KEEP
}

func (x *PixelSettings) GetUnblockVoltage() PixelSettings_UnblockMode {
	if x != nil {
		return x.UnblockVoltage
	}
	return PixelSettings_UNBLOCK_KEEP
}

func (x *PixelSettings) GetCurrentInverted() *wrapperspb.BoolValue {
	if x != nil {
		return x.CurrentInverted
	}
	return nil
}

func (x *PixelSettings) GetMembraneSimulationEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.MembraneSimulationEnabled
	}
	return nil
}

func (x *PixelSettings) GetRegenerationCurrent() PixelSettings_RegenerationCurrent {
	if x != nil {
		return x.RegenerationCurrent
	}
	return PixelSettings_REGEN_KEEP
}

func (x *PixelSettings) GetRegenerationCurrentTestEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.RegenerationCurrentTestEnabled
	}
	return nil
}

func (x *PixelSettings) GetBiasCurrent() PixelSettings_BiasCurrent {
	if x != nil {
		return x.BiasCurrent
	}
	return PixelSettings_BIAS_KEEP
}

type ChangeDeviceSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *DeviceSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *ChangeDeviceSettingsRequest) Reset() {
	*x = ChangeDeviceSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDeviceSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDeviceSettingsRequest) ProtoMessage() {}

func (x *ChangeDeviceSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDeviceSettingsRequest.ProtoReflect.Descriptor instead.
func (*ChangeDeviceSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeDeviceSettingsRequest) GetSettings() *DeviceSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type ChangeDeviceSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sampling frequency actually applied to the hardware, as
	// close as possible to the requested rate.
	//
	// Note: only returned if sampling rate was set as part of this call.
	RealSamplingFrequency *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=real_sampling_frequency,json=realSamplingFrequency,proto3" json:"real_sampling_frequency,omitempty"`
}

func (x *ChangeDeviceSettingsResponse) Reset() {
	*x = ChangeDeviceSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDeviceSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDeviceSettingsResponse) ProtoMessage() {}

func (x *ChangeDeviceSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDeviceSettingsResponse.ProtoReflect.Descriptor instead.
func (*ChangeDeviceSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeDeviceSettingsResponse) GetRealSamplingFrequency() *wrapperspb.Int32Value {
	if x != nil {
		return x.RealSamplingFrequency
	}
	return nil
}

type GetDeviceSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeviceSettingsRequest) Reset() {
	*x = GetDeviceSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceSettingsRequest) ProtoMessage() {}

func (x *GetDeviceSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{7}
}

type GetDeviceSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *DeviceSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *GetDeviceSettingsResponse) Reset() {
	*x = GetDeviceSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceSettingsResponse) ProtoMessage() {}

func (x *GetDeviceSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{8}
}

func (x *GetDeviceSettingsResponse) GetSettings() *DeviceSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type ChangePixelBlockSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1 based map of different pixel blocks settings, a sparse map
	// is accepted, keys should be integers between 1 and 12.
	PixelBlocks map[uint32]*PixelBlockSettings `protobuf:"bytes,1,rep,name=pixel_blocks,json=pixelBlocks,proto3" json:"pixel_blocks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If supplied, contains settings applied to every block before then
	// applying any specific settings in the per block settings.
	PixelBlockDefault *PixelBlockSettings `protobuf:"bytes,2,opt,name=pixel_block_default,json=pixelBlockDefault,proto3" json:"pixel_block_default,omitempty"`
}

func (x *ChangePixelBlockSettingsRequest) Reset() {
	*x = ChangePixelBlockSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePixelBlockSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePixelBlockSettingsRequest) ProtoMessage() {}

func (x *ChangePixelBlockSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePixelBlockSettingsRequest.ProtoReflect.Descriptor instead.
func (*ChangePixelBlockSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{9}
}

func (x *ChangePixelBlockSettingsRequest) GetPixelBlocks() map[uint32]*PixelBlockSettings {
	if x != nil {
		return x.PixelBlocks
	}
	return nil
}

func (x *ChangePixelBlockSettingsRequest) GetPixelBlockDefault() *PixelBlockSettings {
	if x != nil {
		return x.PixelBlockDefault
	}
	return nil
}

type ChangePixelBlockSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangePixelBlockSettingsResponse) Reset() {
	*x = ChangePixelBlockSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePixelBlockSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePixelBlockSettingsResponse) ProtoMessage() {}

func (x *ChangePixelBlockSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePixelBlockSettingsResponse.ProtoReflect.Descriptor instead.
func (*ChangePixelBlockSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{10}
}

type GetPixelBlockSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPixelBlockSettingsRequest) Reset() {
	*x = GetPixelBlockSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPixelBlockSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPixelBlockSettingsRequest) ProtoMessage() {}

func (x *GetPixelBlockSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPixelBlockSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetPixelBlockSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{11}
}

type GetPixelBlockSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1 based map of different pixel blocks settings, containing 12 entries.
	PixelBlocks map[uint32]*PixelBlockSettings `protobuf:"bytes,1,rep,name=pixel_blocks,json=pixelBlocks,proto3" json:"pixel_blocks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPixelBlockSettingsResponse) Reset() {
	*x = GetPixelBlockSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPixelBlockSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPixelBlockSettingsResponse) ProtoMessage() {}

func (x *GetPixelBlockSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPixelBlockSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetPixelBlockSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{12}
}

func (x *GetPixelBlockSettingsResponse) GetPixelBlocks() map[uint32]*PixelBlockSettings {
	if x != nil {
		return x.PixelBlocks
	}
	return nil
}

type ChangePixelSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1 based map of up to 3000 different pixel settings
	Pixels map[uint32]*PixelSettings `protobuf:"bytes,1,rep,name=pixels,proto3" json:"pixels,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If supplied, contains settings applied to every pixel before then
	// applying any specific settings in the per pixel settings.
	PixelDefault *PixelSettings `protobuf:"bytes,2,opt,name=pixel_default,json=pixelDefault,proto3" json:"pixel_default,omitempty"`
}

func (x *ChangePixelSettingsRequest) Reset() {
	*x = ChangePixelSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePixelSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePixelSettingsRequest) ProtoMessage() {}

func (x *ChangePixelSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePixelSettingsRequest.ProtoReflect.Descriptor instead.
func (*ChangePixelSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{13}
}

func (x *ChangePixelSettingsRequest) GetPixels() map[uint32]*PixelSettings {
	if x != nil {
		return x.Pixels
	}
	return nil
}

func (x *ChangePixelSettingsRequest) GetPixelDefault() *PixelSettings {
	if x != nil {
		return x.PixelDefault
	}
	return nil
}

type ChangePixelSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangePixelSettingsResponse) Reset() {
	*x = ChangePixelSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePixelSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePixelSettingsResponse) ProtoMessage() {}

func (x *ChangePixelSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePixelSettingsResponse.ProtoReflect.Descriptor instead.
func (*ChangePixelSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{14}
}

type GetPixelSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channels (one based) to return data for.
	// A sparse map is accepted
	Pixels []uint32 `protobuf:"varint,1,rep,packed,name=pixels,proto3" json:"pixels,omitempty"`
}

func (x *GetPixelSettingsRequest) Reset() {
	*x = GetPixelSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPixelSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPixelSettingsRequest) ProtoMessage() {}

func (x *GetPixelSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPixelSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetPixelSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{15}
}

func (x *GetPixelSettingsRequest) GetPixels() []uint32 {
	if x != nil {
		return x.Pixels
	}
	return nil
}

type GetPixelSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all requested pixel settings, in the order requested.
	Pixels []*PixelSettings `protobuf:"bytes,1,rep,name=pixels,proto3" json:"pixels,omitempty"`
}

func (x *GetPixelSettingsResponse) Reset() {
	*x = GetPixelSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPixelSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPixelSettingsResponse) ProtoMessage() {}

func (x *GetPixelSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPixelSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetPixelSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{16}
}

func (x *GetPixelSettingsResponse) GetPixels() []*PixelSettings {
	if x != nil {
		return x.Pixels
	}
	return nil
}

type StreamTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How often temperature updates should be sent
	// Defaults to a period of 1 second, if not specified, or set to 0
	PeriodSeconds uint32 `protobuf:"varint,1,opt,name=period_seconds,json=periodSeconds,proto3" json:"period_seconds,omitempty"`
}

func (x *StreamTemperatureRequest) Reset() {
	*x = StreamTemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTemperatureRequest) ProtoMessage() {}

func (x *StreamTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTemperatureRequest.ProtoReflect.Descriptor instead.
func (*StreamTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{17}
}

func (x *StreamTemperatureRequest) GetPeriodSeconds() uint32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

type GetTemperatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temperature as measured by thermistor TH2 on the P-Chip.
	FlowcellTemperature *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=flowcell_temperature,json=flowcellTemperature,proto3" json:"flowcell_temperature,omitempty"`
	// Flow-cell chamber-temperature, calculated from the pixel-block temperatures
	ChamberTemperature *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=chamber_temperature,json=chamberTemperature,proto3" json:"chamber_temperature,omitempty"`
	// Temperature measured at each sensor in the ASIC, there are 12 sensors,
	// one sensor per pixel-block
	PixelBlockTemperature []*wrapperspb.FloatValue `protobuf:"bytes,3,rep,name=pixel_block_temperature,json=pixelBlockTemperature,proto3" json:"pixel_block_temperature,omitempty"`
	// Return the temperature target the device is aiming to reach.
	TargetTemperature *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=target_temperature,json=targetTemperature,proto3" json:"target_temperature,omitempty"`
}

func (x *GetTemperatureResponse) Reset() {
	*x = GetTemperatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemperatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemperatureResponse) ProtoMessage() {}

func (x *GetTemperatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemperatureResponse.ProtoReflect.Descriptor instead.
func (*GetTemperatureResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{18}
}

func (x *GetTemperatureResponse) GetFlowcellTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.FlowcellTemperature
	}
	return nil
}

func (x *GetTemperatureResponse) GetChamberTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.ChamberTemperature
	}
	return nil
}

func (x *GetTemperatureResponse) GetPixelBlockTemperature() []*wrapperspb.FloatValue {
	if x != nil {
		return x.PixelBlockTemperature
	}
	return nil
}

func (x *GetTemperatureResponse) GetTargetTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.TargetTemperature
	}
	return nil
}

type PixelSettings_InputWell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control which well is driving the adc minknow reads from.
	//
	// ALL is not a valid value here (other values are acceptable).
	InputWell PixelSettings_InputWell_InputConfig `protobuf:"varint,1,opt,name=input_well,json=inputWell,proto3,enum=minknow_api.promethion_device.PixelSettings_InputWell_InputConfig" json:"input_well,omitempty"`
	// Control which wells are being regenerated (has the specified
	// regeneration current driven to it).
	//
	// All possible Input values are acceptable, as long as the input
	// is not the active adc input.
	// For example, { input: 1, regeneration: all } is invalid, as an well
	// cannot be both input and regenerated.
	RegenerationWell PixelSettings_InputWell_InputConfig `protobuf:"varint,2,opt,name=regeneration_well,json=regenerationWell,proto3,enum=minknow_api.promethion_device.PixelSettings_InputWell_InputConfig" json:"regeneration_well,omitempty"`
}

func (x *PixelSettings_InputWell) Reset() {
	*x = PixelSettings_InputWell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_promethion_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PixelSettings_InputWell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PixelSettings_InputWell) ProtoMessage() {}

func (x *PixelSettings_InputWell) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_promethion_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PixelSettings_InputWell.ProtoReflect.Descriptor instead.
func (*PixelSettings_InputWell) Descriptor() ([]byte, []int) {
	return file_minknow_api_promethion_device_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PixelSettings_InputWell) GetInputWell() PixelSettings_InputWell_InputConfig {
	if x != nil {
		return x.InputWell
	}
	return PixelSettings_InputWell_NONE
}

func (x *PixelSettings_InputWell) GetRegenerationWell() PixelSettings_InputWell_InputConfig {
	if x != nil {
		return x.RegenerationWell
	}
	return PixelSettings_InputWell_NONE
}

var File_minknow_api_promethion_device_proto protoreflect.FileDescriptor

var file_minknow_api_promethion_device_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x10, 0x57, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x8b, 0x05, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x6d, 0x70, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x61, 0x73, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x15, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x13, 0x62, 0x69, 0x61, 0x73, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x57, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x58, 0x0a,
	0x1a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x73,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x18, 0x66, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x66, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x62, 0x69, 0x61, 0x73, 0x5f,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0xe1, 0x05, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x52, 0x53, 0x54, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x52, 0x53, 0x54, 0x31, 0x12, 0x39, 0x0a, 0x09, 0x52, 0x53, 0x54,
	0x31, 0x5f, 0x43, 0x44, 0x53, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x52, 0x53, 0x54, 0x31,
	0x43, 0x44, 0x53, 0x31, 0x12, 0x30, 0x0a, 0x04, 0x43, 0x44, 0x53, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x43, 0x44, 0x53, 0x31, 0x12, 0x39, 0x0a, 0x09, 0x43, 0x44, 0x53, 0x31, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x43, 0x44, 0x53, 0x31, 0x44, 0x41, 0x54,
	0x41, 0x12, 0x30, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x44,
	0x41, 0x54, 0x41, 0x12, 0x39, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x53, 0x54, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x44, 0x41, 0x54, 0x41, 0x52, 0x53, 0x54, 0x32, 0x12, 0x30,
	0x0a, 0x04, 0x52, 0x53, 0x54, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x52, 0x53, 0x54, 0x32,
	0x12, 0x39, 0x0a, 0x09, 0x52, 0x53, 0x54, 0x32, 0x5f, 0x43, 0x44, 0x53, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x52, 0x53, 0x54, 0x32, 0x43, 0x44, 0x53, 0x32, 0x12, 0x30, 0x0a, 0x04, 0x43,
	0x44, 0x53, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x43, 0x44, 0x53, 0x32, 0x12, 0x35, 0x0a,
	0x07, 0x43, 0x44, 0x53, 0x32, 0x5f, 0x53, 0x48, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x43, 0x44,
	0x53, 0x32, 0x53, 0x48, 0x12, 0x2c, 0x0a, 0x02, 0x53, 0x48, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x53, 0x48, 0x12, 0x35, 0x0a, 0x07, 0x53, 0x48, 0x5f, 0x52, 0x53, 0x54, 0x31, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x53, 0x48, 0x52, 0x53, 0x54, 0x31, 0x12, 0x48, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5b, 0x0a, 0x1b, 0x72, 0x65,
	0x67, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x12, 0x45, 0x0a, 0x0f, 0x75, 0x6e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xa0,
	0x13, 0x0a, 0x0d, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x4c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x57, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e,
	0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x65,
	0x0a, 0x10, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x0f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x61, 0x69,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x67, 0x61, 0x69,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x0e, 0x67,
	0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x0d, 0x67, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x67,
	0x0a, 0x10, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x0f, 0x75, 0x6e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55,
	0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x75, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x5a, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x19, 0x6d, 0x65, 0x6d, 0x62, 0x72, 0x61, 0x6e, 0x65, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x73, 0x0a,
	0x14, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x65, 0x0a, 0x21, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x72, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x0c, 0x62, 0x69, 0x61,
	0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x69,
	0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x69, 0x61, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0xb1, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x57, 0x65, 0x6c, 0x6c, 0x12, 0x61, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x65,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x65, 0x6c, 0x6c,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x57, 0x65, 0x6c, 0x6c, 0x12, 0x6f, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x65, 0x6c, 0x6c, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x6c, 0x6c, 0x22, 0x50, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x4c,
	0x4c, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x34, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x22, 0x78, 0x0a, 0x0c, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x56,
	0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4c, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x04, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x50, 0x46, 0x5f, 0x4b, 0x45,
	0x45, 0x50, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x31, 0x30, 0x6b, 0x48,
	0x7a, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x32, 0x30, 0x6b, 0x48, 0x7a,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x33, 0x30, 0x6b, 0x48, 0x7a, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x34, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x35, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x36, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x37, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x50, 0x46, 0x5f, 0x38, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x08, 0x22, 0x40, 0x0a, 0x0e,
	0x47, 0x61, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x32, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x34, 0x10, 0x02, 0x22, 0x68,
	0x0a, 0x0d, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f, 0x31, 0x30, 0x30, 0x66, 0x46,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f, 0x32, 0x30, 0x30,
	0x66, 0x46, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f, 0x35,
	0x30, 0x30, 0x66, 0x46, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50,
	0x5f, 0x36, 0x30, 0x30, 0x66, 0x46, 0x10, 0x04, 0x22, 0x41, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x22, 0x40, 0x0a, 0x0b, 0x55,
	0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x22, 0xb6, 0x02,
	0x0a, 0x13, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x4b,
	0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x30,
	0x70, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x35, 0x30,
	0x70, 0x41, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x31, 0x30,
	0x30, 0x70, 0x41, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x31,
	0x35, 0x30, 0x70, 0x41, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f,
	0x34, 0x30, 0x30, 0x70, 0x41, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x45, 0x4e,
	0x5f, 0x34, 0x35, 0x30, 0x70, 0x41, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x45,
	0x4e, 0x5f, 0x35, 0x30, 0x30, 0x70, 0x41, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47,
	0x45, 0x4e, 0x5f, 0x35, 0x35, 0x30, 0x70, 0x41, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45,
	0x47, 0x45, 0x4e, 0x5f, 0x38, 0x30, 0x30, 0x70, 0x41, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x45, 0x47, 0x45, 0x4e, 0x5f, 0x38, 0x35, 0x30, 0x70, 0x41, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x39, 0x30, 0x30, 0x70, 0x41, 0x10, 0x0b, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x39, 0x35, 0x30, 0x70, 0x41, 0x10, 0x0c, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x31, 0x32, 0x30, 0x30, 0x70, 0x41, 0x10, 0x0d,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x31, 0x32, 0x35, 0x30, 0x70, 0x41,
	0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x31, 0x33, 0x30, 0x30,
	0x70, 0x41, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f, 0x31, 0x33,
	0x35, 0x30, 0x70, 0x41, 0x10, 0x10, 0x22, 0x59, 0x0a, 0x0b, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x41, 0x53, 0x5f, 0x4b, 0x45,
	0x45, 0x50, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x41, 0x53, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x41, 0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x41, 0x53, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x49, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10,
	0x04, 0x22, 0x6e, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x73, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xeb, 0x02, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x0c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x69, 0x78,
	0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x70, 0x69, 0x78, 0x65,
	0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x71, 0x0a, 0x10, 0x50,
	0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x22,
	0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x71, 0x0a, 0x10, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x02, 0x0a, 0x1a, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x70, 0x69, 0x78, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x70, 0x69,
	0x78, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x67, 0x0a, 0x0b, 0x50, 0x69,
	0x78, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x78,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x37, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x88,
	0xb5, 0x18, 0x01, 0x52, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x22, 0x41, 0x0a,
	0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0xd7, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x66,
	0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6c, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x70, 0x69, 0x78,
	0x65, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4a,
	0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0xb6, 0x08, 0x0a, 0x17, 0x50,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12,
	0x8d, 0x01, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12,
	0xa3, 0x01, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x3e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x9a, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69,
	0x78, 0x65, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x69,
	0x78, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x69,
	0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x8a, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x30, 0x01, 0x42, 0x5c, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70,
	0x6f, 0x72, 0x65, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75, 0x72, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50,
	0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minknow_api_promethion_device_proto_rawDescOnce sync.Once
	file_minknow_api_promethion_device_proto_rawDescData = file_minknow_api_promethion_device_proto_rawDesc
)

func file_minknow_api_promethion_device_proto_rawDescGZIP() []byte {
	file_minknow_api_promethion_device_proto_rawDescOnce.Do(func() {
		file_minknow_api_promethion_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_promethion_device_proto_rawDescData)
	})
	return file_minknow_api_promethion_device_proto_rawDescData
}

var file_minknow_api_promethion_device_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_minknow_api_promethion_device_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_minknow_api_promethion_device_proto_goTypes = []interface{}{
	(PixelSettings_OverloadMode)(0),          // 0: minknow_api.promethion_device.PixelSettings.OverloadMode
	(PixelSettings_LowPassFilter)(0),         // 1: minknow_api.promethion_device.PixelSettings.LowPassFilter
	(PixelSettings_GainMultiplier)(0),        // 2: minknow_api.promethion_device.PixelSettings.GainMultiplier
	(PixelSettings_GainCapacitor)(0),         // 3: minknow_api.promethion_device.PixelSettings.GainCapacitor
	(PixelSettings_CalibrationMode)(0),       // 4: minknow_api.promethion_device.PixelSettings.CalibrationMode
	(PixelSettings_UnblockMode)(0),           // 5: minknow_api.promethion_device.PixelSettings.UnblockMode
	(PixelSettings_RegenerationCurrent)(0),   // 6: minknow_api.promethion_device.PixelSettings.RegenerationCurrent
	(PixelSettings_BiasCurrent)(0),           // 7: minknow_api.promethion_device.PixelSettings.BiasCurrent
	(PixelSettings_InputWell_InputConfig)(0), // 8: minknow_api.promethion_device.PixelSettings.InputWell.InputConfig
	(*WaveformSettings)(nil),                 // 9: minknow_api.promethion_device.WaveformSettings
	(*DeviceSettings)(nil),                   // 10: minknow_api.promethion_device.DeviceSettings
	(*TimingEnginePeriods)(nil),              // 11: minknow_api.promethion_device.TimingEnginePeriods
	(*PixelBlockSettings)(nil),               // 12: minknow_api.promethion_device.PixelBlockSettings
	(*PixelSettings)(nil),                    // 13: minknow_api.promethion_device.PixelSettings
	(*ChangeDeviceSettingsRequest)(nil),      // 14: minknow_api.promethion_device.ChangeDeviceSettingsRequest
	(*ChangeDeviceSettingsResponse)(nil),     // 15: minknow_api.promethion_device.ChangeDeviceSettingsResponse
	(*GetDeviceSettingsRequest)(nil),         // 16: minknow_api.promethion_device.GetDeviceSettingsRequest
	(*GetDeviceSettingsResponse)(nil),        // 17: minknow_api.promethion_device.GetDeviceSettingsResponse
	(*ChangePixelBlockSettingsRequest)(nil),  // 18: minknow_api.promethion_device.ChangePixelBlockSettingsRequest
	(*ChangePixelBlockSettingsResponse)(nil), // 19: minknow_api.promethion_device.ChangePixelBlockSettingsResponse
	(*GetPixelBlockSettingsRequest)(nil),     // 20: minknow_api.promethion_device.GetPixelBlockSettingsRequest
	(*GetPixelBlockSettingsResponse)(nil),    // 21: minknow_api.promethion_device.GetPixelBlockSettingsResponse
	(*ChangePixelSettingsRequest)(nil),       // 22: minknow_api.promethion_device.ChangePixelSettingsRequest
	(*ChangePixelSettingsResponse)(nil),      // 23: minknow_api.promethion_device.ChangePixelSettingsResponse
	(*GetPixelSettingsRequest)(nil),          // 24: minknow_api.promethion_device.GetPixelSettingsRequest
	(*GetPixelSettingsResponse)(nil),         // 25: minknow_api.promethion_device.GetPixelSettingsResponse
	(*StreamTemperatureRequest)(nil),         // 26: minknow_api.promethion_device.StreamTemperatureRequest
	(*GetTemperatureResponse)(nil),           // 27: minknow_api.promethion_device.GetTemperatureResponse
	(*PixelSettings_InputWell)(nil),          // 28: minknow_api.promethion_device.PixelSettings.InputWell
	nil,                                      // 29: minknow_api.promethion_device.ChangePixelBlockSettingsRequest.PixelBlocksEntry
	nil,                                      // 30: minknow_api.promethion_device.GetPixelBlockSettingsResponse.PixelBlocksEntry
	nil,                                      // 31: minknow_api.promethion_device.ChangePixelSettingsRequest.PixelsEntry
	(*wrapperspb.Int32Value)(nil),            // 32: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),           // 33: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),             // 34: google.protobuf.BoolValue
	(*wrapperspb.FloatValue)(nil),            // 35: google.protobuf.FloatValue
	(*wrapperspb.UInt32Value)(nil),           // 36: google.protobuf.UInt32Value
}
var file_minknow_api_promethion_device_proto_depIdxs = []int32{
	32, // 0: minknow_api.promethion_device.DeviceSettings.sampling_frequency:type_name -> google.protobuf.Int32Value
	33, // 1: minknow_api.promethion_device.DeviceSettings.ramp_voltage:type_name -> google.protobuf.DoubleValue
	9,  // 2: minknow_api.promethion_device.DeviceSettings.bias_voltage_waveform:type_name -> minknow_api.promethion_device.WaveformSettings
	34, // 3: minknow_api.promethion_device.DeviceSettings.saturation_control_enabled:type_name -> google.protobuf.BoolValue
	34, // 4: minknow_api.promethion_device.DeviceSettings.fast_calibration_enabled:type_name -> google.protobuf.BoolValue
	35, // 5: minknow_api.promethion_device.DeviceSettings.temperature_target:type_name -> google.protobuf.FloatValue
	11, // 6: minknow_api.promethion_device.DeviceSettings.timings:type_name -> minknow_api.promethion_device.TimingEnginePeriods
	36, // 7: minknow_api.promethion_device.TimingEnginePeriods.RST1:type_name -> google.protobuf.UInt32Value
	36, // 8: minknow_api.promethion_device.TimingEnginePeriods.RST1_CDS1:type_name -> google.protobuf.UInt32Value
	36, // 9: minknow_api.promethion_device.TimingEnginePeriods.CDS1:type_name -> google.protobuf.UInt32Value
	36, // 10: minknow_api.promethion_device.TimingEnginePeriods.CDS1_DATA:type_name -> google.protobuf.UInt32Value
	36, // 11: minknow_api.promethion_device.TimingEnginePeriods.DATA:type_name -> google.protobuf.UInt32Value
	36, // 12: minknow_api.promethion_device.TimingEnginePeriods.DATA_RST2:type_name -> google.protobuf.UInt32Value
	36, // 13: minknow_api.promethion_device.TimingEnginePeriods.RST2:type_name -> google.protobuf.UInt32Value
	36, // 14: minknow_api.promethion_device.TimingEnginePeriods.RST2_CDS2:type_name -> google.protobuf.UInt32Value
	36, // 15: minknow_api.promethion_device.TimingEnginePeriods.CDS2:type_name -> google.protobuf.UInt32Value
	36, // 16: minknow_api.promethion_device.TimingEnginePeriods.CDS2_SH:type_name -> google.protobuf.UInt32Value
	36, // 17: minknow_api.promethion_device.TimingEnginePeriods.SH:type_name -> google.protobuf.UInt32Value
	36, // 18: minknow_api.promethion_device.TimingEnginePeriods.SH_RST1:type_name -> google.protobuf.UInt32Value
	34, // 19: minknow_api.promethion_device.TimingEnginePeriods.use_default_values:type_name -> google.protobuf.BoolValue
	33, // 20: minknow_api.promethion_device.PixelBlockSettings.regen_current_voltage_clamp:type_name -> google.protobuf.DoubleValue
	33, // 21: minknow_api.promethion_device.PixelBlockSettings.unblock_voltage:type_name -> google.protobuf.DoubleValue
	28, // 22: minknow_api.promethion_device.PixelSettings.input:type_name -> minknow_api.promethion_device.PixelSettings.InputWell
	0,  // 23: minknow_api.promethion_device.PixelSettings.overload_mode:type_name -> minknow_api.promethion_device.PixelSettings.OverloadMode
	1,  // 24: minknow_api.promethion_device.PixelSettings.cutoff_frequency:type_name -> minknow_api.promethion_device.PixelSettings.LowPassFilter
	2,  // 25: minknow_api.promethion_device.PixelSettings.gain_multiplier:type_name -> minknow_api.promethion_device.PixelSettings.GainMultiplier
	3,  // 26: minknow_api.promethion_device.PixelSettings.gain_capacitor:type_name -> minknow_api.promethion_device.PixelSettings.GainCapacitor
	4,  // 27: minknow_api.promethion_device.PixelSettings.calibration_mode:type_name -> minknow_api.promethion_device.PixelSettings.CalibrationMode
	5,  // 28: minknow_api.promethion_device.PixelSettings.unblock_voltage:type_name -> minknow_api.promethion_device.PixelSettings.UnblockMode
	34, // 29: minknow_api.promethion_device.PixelSettings.current_inverted:type_name -> google.protobuf.BoolValue
	34, // 30: minknow_api.promethion_device.PixelSettings.membrane_simulation_enabled:type_name -> google.protobuf.BoolValue
	6,  // 31: minknow_api.promethion_device.PixelSettings.regeneration_current:type_name -> minknow_api.promethion_device.PixelSettings.RegenerationCurrent
	34, // 32: minknow_api.promethion_device.PixelSettings.regeneration_current_test_enabled:type_name -> google.protobuf.BoolValue
	7,  // 33: minknow_api.promethion_device.PixelSettings.bias_current:type_name -> minknow_api.promethion_device.PixelSettings.BiasCurrent
	10, // 34: minknow_api.promethion_device.ChangeDeviceSettingsRequest.settings:type_name -> minknow_api.promethion_device.DeviceSettings
	32, // 35: minknow_api.promethion_device.ChangeDeviceSettingsResponse.real_sampling_frequency:type_name -> google.protobuf.Int32Value
	10, // 36: minknow_api.promethion_device.GetDeviceSettingsResponse.settings:type_name -> minknow_api.promethion_device.DeviceSettings
	29, // 37: minknow_api.promethion_device.ChangePixelBlockSettingsRequest.pixel_blocks:type_name -> minknow_api.promethion_device.ChangePixelBlockSettingsRequest.PixelBlocksEntry
	12, // 38: minknow_api.promethion_device.ChangePixelBlockSettingsRequest.pixel_block_default:type_name -> minknow_api.promethion_device.PixelBlockSettings
	30, // 39: minknow_api.promethion_device.GetPixelBlockSettingsResponse.pixel_blocks:type_name -> minknow_api.promethion_device.GetPixelBlockSettingsResponse.PixelBlocksEntry
	31, // 40: minknow_api.promethion_device.ChangePixelSettingsRequest.pixels:type_name -> minknow_api.promethion_device.ChangePixelSettingsRequest.PixelsEntry
	13, // 41: minknow_api.promethion_device.ChangePixelSettingsRequest.pixel_default:type_name -> minknow_api.promethion_device.PixelSettings
	13, // 42: minknow_api.promethion_device.GetPixelSettingsResponse.pixels:type_name -> minknow_api.promethion_device.PixelSettings
	35, // 43: minknow_api.promethion_device.GetTemperatureResponse.flowcell_temperature:type_name -> google.protobuf.FloatValue
	35, // 44: minknow_api.promethion_device.GetTemperatureResponse.chamber_temperature:type_name -> google.protobuf.FloatValue
	35, // 45: minknow_api.promethion_device.GetTemperatureResponse.pixel_block_temperature:type_name -> google.protobuf.FloatValue
	35, // 46: minknow_api.promethion_device.GetTemperatureResponse.target_temperature:type_name -> google.protobuf.FloatValue
	8,  // 47: minknow_api.promethion_device.PixelSettings.InputWell.input_well:type_name -> minknow_api.promethion_device.PixelSettings.InputWell.InputConfig
	8,  // 48: minknow_api.promethion_device.PixelSettings.InputWell.regeneration_well:type_name -> minknow_api.promethion_device.PixelSettings.InputWell.InputConfig
	12, // 49: minknow_api.promethion_device.ChangePixelBlockSettingsRequest.PixelBlocksEntry.value:type_name -> minknow_api.promethion_device.PixelBlockSettings
	12, // 50: minknow_api.promethion_device.GetPixelBlockSettingsResponse.PixelBlocksEntry.value:type_name -> minknow_api.promethion_device.PixelBlockSettings
	13, // 51: minknow_api.promethion_device.ChangePixelSettingsRequest.PixelsEntry.value:type_name -> minknow_api.promethion_device.PixelSettings
	14, // 52: minknow_api.promethion_device.PromethionDeviceService.change_device_settings:input_type -> minknow_api.promethion_device.ChangeDeviceSettingsRequest
	16, // 53: minknow_api.promethion_device.PromethionDeviceService.get_device_settings:input_type -> minknow_api.promethion_device.GetDeviceSettingsRequest
	18, // 54: minknow_api.promethion_device.PromethionDeviceService.change_pixel_block_settings:input_type -> minknow_api.promethion_device.ChangePixelBlockSettingsRequest
	20, // 55: minknow_api.promethion_device.PromethionDeviceService.get_pixel_block_settings:input_type -> minknow_api.promethion_device.GetPixelBlockSettingsRequest
	22, // 56: minknow_api.promethion_device.PromethionDeviceService.change_pixel_settings:input_type -> minknow_api.promethion_device.ChangePixelSettingsRequest
	24, // 57: minknow_api.promethion_device.PromethionDeviceService.get_pixel_settings:input_type -> minknow_api.promethion_device.GetPixelSettingsRequest
	26, // 58: minknow_api.promethion_device.PromethionDeviceService.stream_temperature:input_type -> minknow_api.promethion_device.StreamTemperatureRequest
	15, // 59: minknow_api.promethion_device.PromethionDeviceService.change_device_settings:output_type -> minknow_api.promethion_device.ChangeDeviceSettingsResponse
	17, // 60: minknow_api.promethion_device.PromethionDeviceService.get_device_settings:output_type -> minknow_api.promethion_device.GetDeviceSettingsResponse
	19, // 61: minknow_api.promethion_device.PromethionDeviceService.change_pixel_block_settings:output_type -> minknow_api.promethion_device.ChangePixelBlockSettingsResponse
	21, // 62: minknow_api.promethion_device.PromethionDeviceService.get_pixel_block_settings:output_type -> minknow_api.promethion_device.GetPixelBlockSettingsResponse
	23, // 63: minknow_api.promethion_device.PromethionDeviceService.change_pixel_settings:output_type -> minknow_api.promethion_device.ChangePixelSettingsResponse
	25, // 64: minknow_api.promethion_device.PromethionDeviceService.get_pixel_settings:output_type -> minknow_api.promethion_device.GetPixelSettingsResponse
	27, // 65: minknow_api.promethion_device.PromethionDeviceService.stream_temperature:output_type -> minknow_api.promethion_device.GetTemperatureResponse
	59, // [59:66] is the sub-list for method output_type
	52, // [52:59] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_minknow_api_promethion_device_proto_init() }
func file_minknow_api_promethion_device_proto_init() {
	if File_minknow_api_promethion_device_proto != nil {
		return
	}
	file_minknow_api_rpc_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_promethion_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaveformSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimingEnginePeriods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PixelBlockSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PixelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDeviceSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDeviceSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePixelBlockSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePixelBlockSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPixelBlockSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPixelBlockSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePixelSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePixelSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPixelSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPixelSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemperatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_promethion_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PixelSettings_InputWell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minknow_api_promethion_device_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*DeviceSettings_BiasVoltage)(nil),
		(*DeviceSettings_BiasVoltageWaveform)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_promethion_device_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_promethion_device_proto_goTypes,
		DependencyIndexes: file_minknow_api_promethion_device_proto_depIdxs,
		EnumInfos:         file_minknow_api_promethion_device_proto_enumTypes,
		MessageInfos:      file_minknow_api_promethion_device_proto_msgTypes,
	}.Build()
	File_minknow_api_promethion_device_proto = out.File
	file_minknow_api_promethion_device_proto_rawDesc = nil
	file_minknow_api_promethion_device_proto_goTypes = nil
	file_minknow_api_promethion_device_proto_depIdxs = nil
}
