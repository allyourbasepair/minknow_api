// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/data.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDataTypesResponse_DataType_Type int32

const (
	GetDataTypesResponse_DataType_SIGNED_INTEGER   GetDataTypesResponse_DataType_Type = 0
	GetDataTypesResponse_DataType_UNSIGNED_INTEGER GetDataTypesResponse_DataType_Type = 1
	GetDataTypesResponse_DataType_FLOATING_POINT   GetDataTypesResponse_DataType_Type = 2
)

// Enum value maps for GetDataTypesResponse_DataType_Type.
var (
	GetDataTypesResponse_DataType_Type_name = map[int32]string{
		0: "SIGNED_INTEGER",
		1: "UNSIGNED_INTEGER",
		2: "FLOATING_POINT",
	}
	GetDataTypesResponse_DataType_Type_value = map[string]int32{
		"SIGNED_INTEGER":   0,
		"UNSIGNED_INTEGER": 1,
		"FLOATING_POINT":   2,
	}
)

func (x GetDataTypesResponse_DataType_Type) Enum() *GetDataTypesResponse_DataType_Type {
	p := new(GetDataTypesResponse_DataType_Type)
	*p = x
	return p
}

func (x GetDataTypesResponse_DataType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDataTypesResponse_DataType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_data_proto_enumTypes[0].Descriptor()
}

func (GetDataTypesResponse_DataType_Type) Type() protoreflect.EnumType {
	return &file_minknow_api_data_proto_enumTypes[0]
}

func (x GetDataTypesResponse_DataType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDataTypesResponse_DataType_Type.Descriptor instead.
func (GetDataTypesResponse_DataType_Type) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{3, 0, 0}
}

type GetLiveReadsRequest_RawDataType int32

const (
	// Don't change the previously specified setting for raw data sent with live reads
	// note: If sent when there is no last setting, NONE is assumed.
	GetLiveReadsRequest_KEEP_LAST GetLiveReadsRequest_RawDataType = 0
	// No raw data required for live reads
	GetLiveReadsRequest_NONE GetLiveReadsRequest_RawDataType = 1
	// Calibrated raw data should be sent to the user with each read
	GetLiveReadsRequest_CALIBRATED GetLiveReadsRequest_RawDataType = 2
	// Uncalibrated data should be sent to the user with each read
	GetLiveReadsRequest_UNCALIBRATED GetLiveReadsRequest_RawDataType = 3
)

// Enum value maps for GetLiveReadsRequest_RawDataType.
var (
	GetLiveReadsRequest_RawDataType_name = map[int32]string{
		0: "KEEP_LAST",
		1: "NONE",
		2: "CALIBRATED",
		3: "UNCALIBRATED",
	}
	GetLiveReadsRequest_RawDataType_value = map[string]int32{
		"KEEP_LAST":    0,
		"NONE":         1,
		"CALIBRATED":   2,
		"UNCALIBRATED": 3,
	}
)

func (x GetLiveReadsRequest_RawDataType) Enum() *GetLiveReadsRequest_RawDataType {
	p := new(GetLiveReadsRequest_RawDataType)
	*p = x
	return p
}

func (x GetLiveReadsRequest_RawDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLiveReadsRequest_RawDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_data_proto_enumTypes[1].Descriptor()
}

func (GetLiveReadsRequest_RawDataType) Type() protoreflect.EnumType {
	return &file_minknow_api_data_proto_enumTypes[1]
}

func (x GetLiveReadsRequest_RawDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLiveReadsRequest_RawDataType.Descriptor instead.
func (GetLiveReadsRequest_RawDataType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{8, 0}
}

type GetLiveReadsResponse_ActionResponse_Response int32

const (
	GetLiveReadsResponse_ActionResponse_SUCCESS              GetLiveReadsResponse_ActionResponse_Response = 0
	GetLiveReadsResponse_ActionResponse_FAILED_READ_FINISHED GetLiveReadsResponse_ActionResponse_Response = 1
	GetLiveReadsResponse_ActionResponse_FAILED_READ_TOO_LONG GetLiveReadsResponse_ActionResponse_Response = 2
)

// Enum value maps for GetLiveReadsResponse_ActionResponse_Response.
var (
	GetLiveReadsResponse_ActionResponse_Response_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED_READ_FINISHED",
		2: "FAILED_READ_TOO_LONG",
	}
	GetLiveReadsResponse_ActionResponse_Response_value = map[string]int32{
		"SUCCESS":              0,
		"FAILED_READ_FINISHED": 1,
		"FAILED_READ_TOO_LONG": 2,
	}
)

func (x GetLiveReadsResponse_ActionResponse_Response) Enum() *GetLiveReadsResponse_ActionResponse_Response {
	p := new(GetLiveReadsResponse_ActionResponse_Response)
	*p = x
	return p
}

func (x GetLiveReadsResponse_ActionResponse_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLiveReadsResponse_ActionResponse_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_data_proto_enumTypes[2].Descriptor()
}

func (GetLiveReadsResponse_ActionResponse_Response) Type() protoreflect.EnumType {
	return &file_minknow_api_data_proto_enumTypes[2]
}

func (x GetLiveReadsResponse_ActionResponse_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLiveReadsResponse_ActionResponse_Response.Descriptor instead.
func (GetLiveReadsResponse_ActionResponse_Response) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{9, 1, 0}
}

// Whether to aggregate statistics on a read chunk or complete read basis.
//
// This will affect both durations (which will be the durations of read chunks or complete reads)
// and classification aggregation (which will be based on the read chunk classification or the
// complete read classification).
type GetReadStatisticsRequest_ReadSplit int32

const (
	GetReadStatisticsRequest_CHUNK          GetReadStatisticsRequest_ReadSplit = 0
	GetReadStatisticsRequest_COMPLETED_READ GetReadStatisticsRequest_ReadSplit = 1
)

// Enum value maps for GetReadStatisticsRequest_ReadSplit.
var (
	GetReadStatisticsRequest_ReadSplit_name = map[int32]string{
		0: "CHUNK",
		1: "COMPLETED_READ",
	}
	GetReadStatisticsRequest_ReadSplit_value = map[string]int32{
		"CHUNK":          0,
		"COMPLETED_READ": 1,
	}
)

func (x GetReadStatisticsRequest_ReadSplit) Enum() *GetReadStatisticsRequest_ReadSplit {
	p := new(GetReadStatisticsRequest_ReadSplit)
	*p = x
	return p
}

func (x GetReadStatisticsRequest_ReadSplit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetReadStatisticsRequest_ReadSplit) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_data_proto_enumTypes[3].Descriptor()
}

func (GetReadStatisticsRequest_ReadSplit) Type() protoreflect.EnumType {
	return &file_minknow_api_data_proto_enumTypes[3]
}

func (x GetReadStatisticsRequest_ReadSplit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetReadStatisticsRequest_ReadSplit.Descriptor instead.
func (GetReadStatisticsRequest_ReadSplit) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{12, 0}
}

type GetChannelStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first channel (inclusive) to return data for.
	//
	// Note that channel numbering starts at 1.
	FirstChannel uint32 `protobuf:"varint,1,opt,name=first_channel,json=firstChannel,proto3" json:"first_channel,omitempty"`
	// The last channel (inclusive) to return data for.
	//
	// Note that channel numbering starts at 1.
	LastChannel uint32 `protobuf:"varint,2,opt,name=last_channel,json=lastChannel,proto3" json:"last_channel,omitempty"`
	// If this is true, the returned messages will contain the
	// channel state id as opposed to the name. By default,
	// the response will contain channel states names.
	UseChannelStatesIds *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=use_channel_states_ids,json=useChannelStatesIds,proto3" json:"use_channel_states_ids,omitempty"`
	// If `wait_for_processing` is true, then get_channel_states will wait until minknow starts
	// acquiring data instead of returning with an error
	//
	// Defaults to false
	WaitForProcessing bool `protobuf:"varint,4,opt,name=wait_for_processing,json=waitForProcessing,proto3" json:"wait_for_processing,omitempty"`
	// Ensure the stream sends a message at least this often.
	//
	// There will usually be multiple channel updates a second, but in some circumstances (eg: a
	// flow cell with no sample loaded) there can be long periods of time without updates.
	//
	// Setting this value will ensure that if this period of time passes without there being any
	// channel state changes to report, an empty message will be sent. This can be useful to force a
	// minimum wakeup interval in the client code.
	Heartbeat *durationpb.Duration `protobuf:"bytes,5,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
}

func (x *GetChannelStatesRequest) Reset() {
	*x = GetChannelStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelStatesRequest) ProtoMessage() {}

func (x *GetChannelStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelStatesRequest.ProtoReflect.Descriptor instead.
func (*GetChannelStatesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{0}
}

func (x *GetChannelStatesRequest) GetFirstChannel() uint32 {
	if x != nil {
		return x.FirstChannel
	}
	return 0
}

func (x *GetChannelStatesRequest) GetLastChannel() uint32 {
	if x != nil {
		return x.LastChannel
	}
	return 0
}

func (x *GetChannelStatesRequest) GetUseChannelStatesIds() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseChannelStatesIds
	}
	return nil
}

func (x *GetChannelStatesRequest) GetWaitForProcessing() bool {
	if x != nil {
		return x.WaitForProcessing
	}
	return false
}

func (x *GetChannelStatesRequest) GetHeartbeat() *durationpb.Duration {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

type GetChannelStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streamed data for all channels will be appended to this vector.
	// After the request is made, all the channel state changes are streamed through
	// this array. This is implemented in the idea of a sparse array because we can have
	// channels that remain in the same state for a long time.
	ChannelStates []*GetChannelStatesResponse_ChannelStateData `protobuf:"bytes,1,rep,name=channel_states,json=channelStates,proto3" json:"channel_states,omitempty"`
}

func (x *GetChannelStatesResponse) Reset() {
	*x = GetChannelStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelStatesResponse) ProtoMessage() {}

func (x *GetChannelStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelStatesResponse.ProtoReflect.Descriptor instead.
func (*GetChannelStatesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{1}
}

func (x *GetChannelStatesResponse) GetChannelStates() []*GetChannelStatesResponse_ChannelStateData {
	if x != nil {
		return x.ChannelStates
	}
	return nil
}

type GetDataTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDataTypesRequest) Reset() {
	*x = GetDataTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataTypesRequest) ProtoMessage() {}

func (x *GetDataTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataTypesRequest.ProtoReflect.Descriptor instead.
func (*GetDataTypesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{2}
}

type GetDataTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The format of the uncalibrated (ADC) signal data returned by get_raw_signal_bytes().
	//
	// In the current release, this will describe 16-bit little-endian integers.
	UncalibratedSignal *GetDataTypesResponse_DataType `protobuf:"bytes,1,opt,name=uncalibrated_signal,json=uncalibratedSignal,proto3" json:"uncalibrated_signal,omitempty"`
	// The format of the calibrated (picoamp) signal data returned by get_raw_signal_bytes().
	//
	// In the current release, this will describe 32-bit IEEE 754 floating point values.
	CalibratedSignal *GetDataTypesResponse_DataType `protobuf:"bytes,2,opt,name=calibrated_signal,json=calibratedSignal,proto3" json:"calibrated_signal,omitempty"`
	// The format of the bias voltage data returned by get_raw_signal_bytes().
	//
	// In the current release, this will describe 16-bit little-endian integers.
	BiasVoltages *GetDataTypesResponse_DataType `protobuf:"bytes,3,opt,name=bias_voltages,json=biasVoltages,proto3" json:"bias_voltages,omitempty"`
}

func (x *GetDataTypesResponse) Reset() {
	*x = GetDataTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataTypesResponse) ProtoMessage() {}

func (x *GetDataTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataTypesResponse.ProtoReflect.Descriptor instead.
func (*GetDataTypesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{3}
}

func (x *GetDataTypesResponse) GetUncalibratedSignal() *GetDataTypesResponse_DataType {
	if x != nil {
		return x.UncalibratedSignal
	}
	return nil
}

func (x *GetDataTypesResponse) GetCalibratedSignal() *GetDataTypesResponse_DataType {
	if x != nil {
		return x.CalibratedSignal
	}
	return nil
}

func (x *GetDataTypesResponse) GetBiasVoltages() *GetDataTypesResponse_DataType {
	if x != nil {
		return x.BiasVoltages
	}
	return nil
}

type GetSignalBytesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of data to return.
	//
	// If this is omitted, data will be streamed until the call is cancelled.
	//
	// Types that are assignable to Length:
	//	*GetSignalBytesRequest_Seconds
	//	*GetSignalBytesRequest_Samples
	Length isGetSignalBytesRequest_Length `protobuf_oneof:"length"`
	// The first channel (inclusive) to return data for.
	//
	// Note that channel numbering starts at 1.
	FirstChannel uint32 `protobuf:"varint,3,opt,name=first_channel,json=firstChannel,proto3" json:"first_channel,omitempty"`
	// The last channel (inclusive) to return data for.
	//
	// Note that channel numbering starts at 1.
	LastChannel uint32 `protobuf:"varint,4,opt,name=last_channel,json=lastChannel,proto3" json:"last_channel,omitempty"`
	// Whether to include channel configuration settings.
	IncludeChannelConfigs bool `protobuf:"varint,5,opt,name=include_channel_configs,json=includeChannelConfigs,proto3" json:"include_channel_configs,omitempty"`
	// Whether to include bias voltage information.
	IncludeBiasVoltages bool `protobuf:"varint,6,opt,name=include_bias_voltages,json=includeBiasVoltages,proto3" json:"include_bias_voltages,omitempty"`
	// Whether the data should be calibrated.
	CalibratedData bool `protobuf:"varint,7,opt,name=calibrated_data,json=calibratedData,proto3" json:"calibrated_data,omitempty"`
	// When this value is set to true, then an empty message will be sent back
	// to the client to indicate that the backend has acknowleged the request,
	// and that any calls made that will affect the signal after that initial
	// response will be reflected in the next messages
	ReturnWhenListening bool `protobuf:"varint,8,opt,name=return_when_listening,json=returnWhenListening,proto3" json:"return_when_listening,omitempty"`
}

func (x *GetSignalBytesRequest) Reset() {
	*x = GetSignalBytesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalBytesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalBytesRequest) ProtoMessage() {}

func (x *GetSignalBytesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalBytesRequest.ProtoReflect.Descriptor instead.
func (*GetSignalBytesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{4}
}

func (m *GetSignalBytesRequest) GetLength() isGetSignalBytesRequest_Length {
	if m != nil {
		return m.Length
	}
	return nil
}

func (x *GetSignalBytesRequest) GetSeconds() float32 {
	if x, ok := x.GetLength().(*GetSignalBytesRequest_Seconds); ok {
		return x.Seconds
	}
	return 0
}

func (x *GetSignalBytesRequest) GetSamples() uint32 {
	if x, ok := x.GetLength().(*GetSignalBytesRequest_Samples); ok {
		return x.Samples
	}
	return 0
}

func (x *GetSignalBytesRequest) GetFirstChannel() uint32 {
	if x != nil {
		return x.FirstChannel
	}
	return 0
}

func (x *GetSignalBytesRequest) GetLastChannel() uint32 {
	if x != nil {
		return x.LastChannel
	}
	return 0
}

func (x *GetSignalBytesRequest) GetIncludeChannelConfigs() bool {
	if x != nil {
		return x.IncludeChannelConfigs
	}
	return false
}

func (x *GetSignalBytesRequest) GetIncludeBiasVoltages() bool {
	if x != nil {
		return x.IncludeBiasVoltages
	}
	return false
}

func (x *GetSignalBytesRequest) GetCalibratedData() bool {
	if x != nil {
		return x.CalibratedData
	}
	return false
}

func (x *GetSignalBytesRequest) GetReturnWhenListening() bool {
	if x != nil {
		return x.ReturnWhenListening
	}
	return false
}

type isGetSignalBytesRequest_Length interface {
	isGetSignalBytesRequest_Length()
}

type GetSignalBytesRequest_Seconds struct {
	// The amount of data to return in seconds.
	//
	// The number of samples returned will be just enough to cover this period of time. Cannot
	// be specified at the same time as ``samples``.
	Seconds float32 `protobuf:"fixed32,1,opt,name=seconds,proto3,oneof"`
}

type GetSignalBytesRequest_Samples struct {
	// The amount of data to return in samples.
	//
	// The result will contain exactly this many samples. If this is not possible, the call will
	// fail. Cannot be specified at the same time as ``seconds``.
	Samples uint32 `protobuf:"varint,2,opt,name=samples,proto3,oneof"`
}

func (*GetSignalBytesRequest_Seconds) isGetSignalBytesRequest_Length() {}

func (*GetSignalBytesRequest_Samples) isGetSignalBytesRequest_Length() {}

type GetSignalBytesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of samples collected before the first sample included in this response.
	//
	// This gives the position of the first data point on each channel in the overall stream of data
	// being acquired from the device (since this period of data acquisition was started).
	SamplesSinceStart uint64 `protobuf:"varint,1,opt,name=samples_since_start,json=samplesSinceStart,proto3" json:"samples_since_start,omitempty"`
	// The number of seconds elapsed since data acquisition started.
	//
	// This is the same as ``samples_since_start``, but expressed in seconds.
	SecondsSinceStart float64 `protobuf:"fixed64,2,opt,name=seconds_since_start,json=secondsSinceStart,proto3" json:"seconds_since_start,omitempty"`
	// The number of channels omitted at the start of the ``channels`` array.
	SkippedChannels uint32 `protobuf:"varint,3,opt,name=skipped_channels,json=skippedChannels,proto3" json:"skipped_channels,omitempty"`
	// The signal for each requested channel.
	//
	// Note that ``skipped_channels`` must be used to determine which channels are given here, as
	// not all channels will be included in every message. The channels that are provided are
	// contiguous and in order, with the first channel being ``first_channel + skipped_channels``
	// (where ``first_channel`` is from the request message).
	Channels []*GetSignalBytesResponse_ChannelData `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
	// The bias voltages set for each sample.
	//
	// If bias voltages were requested, this will provide voltage data, one voltage per sample. Note
	// that not every message may include bias_voltages (they will generally be included when
	// ``skipped_channels`` is 0, but that is not guaranteed).
	//
	// The get_data_types() RPC call should be used to determine the format of the data.
	BiasVoltages []byte `protobuf:"bytes,5,opt,name=bias_voltages,json=biasVoltages,proto3" json:"bias_voltages,omitempty"`
}

func (x *GetSignalBytesResponse) Reset() {
	*x = GetSignalBytesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalBytesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalBytesResponse) ProtoMessage() {}

func (x *GetSignalBytesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalBytesResponse.ProtoReflect.Descriptor instead.
func (*GetSignalBytesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{5}
}

func (x *GetSignalBytesResponse) GetSamplesSinceStart() uint64 {
	if x != nil {
		return x.SamplesSinceStart
	}
	return 0
}

func (x *GetSignalBytesResponse) GetSecondsSinceStart() float64 {
	if x != nil {
		return x.SecondsSinceStart
	}
	return 0
}

func (x *GetSignalBytesResponse) GetSkippedChannels() uint32 {
	if x != nil {
		return x.SkippedChannels
	}
	return 0
}

func (x *GetSignalBytesResponse) GetChannels() []*GetSignalBytesResponse_ChannelData {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetSignalBytesResponse) GetBiasVoltages() []byte {
	if x != nil {
		return x.BiasVoltages
	}
	return nil
}

type GetSignalMinMaxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first channel (inclusive) to return data for.
	//
	// Note that channel numbering starts at 1.
	FirstChannel uint32 `protobuf:"varint,3,opt,name=first_channel,json=firstChannel,proto3" json:"first_channel,omitempty"`
	// The last channel (inclusive) to return data for.
	//
	// Note that channel numbering starts at 1.
	LastChannel uint32 `protobuf:"varint,4,opt,name=last_channel,json=lastChannel,proto3" json:"last_channel,omitempty"`
	// The size of window to summarise.
	//
	// A value of zero will be rejected; there is no default.
	WindowSize uint32 `protobuf:"varint,5,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	// Whether the data should be calibrated.
	CalibratedData bool `protobuf:"varint,7,opt,name=calibrated_data,json=calibratedData,proto3" json:"calibrated_data,omitempty"`
}

func (x *GetSignalMinMaxRequest) Reset() {
	*x = GetSignalMinMaxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalMinMaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalMinMaxRequest) ProtoMessage() {}

func (x *GetSignalMinMaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalMinMaxRequest.ProtoReflect.Descriptor instead.
func (*GetSignalMinMaxRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{6}
}

func (x *GetSignalMinMaxRequest) GetFirstChannel() uint32 {
	if x != nil {
		return x.FirstChannel
	}
	return 0
}

func (x *GetSignalMinMaxRequest) GetLastChannel() uint32 {
	if x != nil {
		return x.LastChannel
	}
	return 0
}

func (x *GetSignalMinMaxRequest) GetWindowSize() uint32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (x *GetSignalMinMaxRequest) GetCalibratedData() bool {
	if x != nil {
		return x.CalibratedData
	}
	return false
}

type GetSignalMinMaxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of samples collected before the first sample included in this response.
	//
	// This gives the position of the first data point on each channel in the overall stream of data
	// being acquired from the device (since this period of data acquisition was started).
	SamplesSinceStart uint64 `protobuf:"varint,1,opt,name=samples_since_start,json=samplesSinceStart,proto3" json:"samples_since_start,omitempty"`
	// The number of seconds elapsed since data acquisition started.
	//
	// This is the same as ``samples_since_start``, but expressed in seconds.
	SecondsSinceStart float64 `protobuf:"fixed64,2,opt,name=seconds_since_start,json=secondsSinceStart,proto3" json:"seconds_since_start,omitempty"`
	// The number of channels omitted at the start of the ``channels`` array.
	SkippedChannels uint32 `protobuf:"varint,3,opt,name=skipped_channels,json=skippedChannels,proto3" json:"skipped_channels,omitempty"`
	// The window bounds for each requested channel.
	//
	// Note that ``skipped_channels`` must be used to determine which channels are given here, as
	// not all channels will be included in every message. The channels that are provided are
	// contiguous and in order, with the first channel being ``first_channel + skipped_channels``
	// (where ``first_channel`` is from the request message).
	Channels []*GetSignalMinMaxResponse_ChannelData `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *GetSignalMinMaxResponse) Reset() {
	*x = GetSignalMinMaxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalMinMaxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalMinMaxResponse) ProtoMessage() {}

func (x *GetSignalMinMaxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalMinMaxResponse.ProtoReflect.Descriptor instead.
func (*GetSignalMinMaxResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{7}
}

func (x *GetSignalMinMaxResponse) GetSamplesSinceStart() uint64 {
	if x != nil {
		return x.SamplesSinceStart
	}
	return 0
}

func (x *GetSignalMinMaxResponse) GetSecondsSinceStart() float64 {
	if x != nil {
		return x.SecondsSinceStart
	}
	return 0
}

func (x *GetSignalMinMaxResponse) GetSkippedChannels() uint32 {
	if x != nil {
		return x.SkippedChannels
	}
	return 0
}

func (x *GetSignalMinMaxResponse) GetChannels() []*GetSignalMinMaxResponse_ChannelData {
	if x != nil {
		return x.Channels
	}
	return nil
}

type GetLiveReadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*GetLiveReadsRequest_Setup
	//	*GetLiveReadsRequest_Actions_
	Request isGetLiveReadsRequest_Request `protobuf_oneof:"request"`
}

func (x *GetLiveReadsRequest) Reset() {
	*x = GetLiveReadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsRequest) ProtoMessage() {}

func (x *GetLiveReadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsRequest.ProtoReflect.Descriptor instead.
func (*GetLiveReadsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{8}
}

func (m *GetLiveReadsRequest) GetRequest() isGetLiveReadsRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *GetLiveReadsRequest) GetSetup() *GetLiveReadsRequest_StreamSetup {
	if x, ok := x.GetRequest().(*GetLiveReadsRequest_Setup); ok {
		return x.Setup
	}
	return nil
}

func (x *GetLiveReadsRequest) GetActions() *GetLiveReadsRequest_Actions {
	if x, ok := x.GetRequest().(*GetLiveReadsRequest_Actions_); ok {
		return x.Actions
	}
	return nil
}

type isGetLiveReadsRequest_Request interface {
	isGetLiveReadsRequest_Request()
}

type GetLiveReadsRequest_Setup struct {
	// Read setup request, initialises channel numbers and type of data returned.
	//
	// note: Must be specified in the first message sent to MinKNOW. Once MinKNOW
	// has the first setup message reads are sent to the caller as requested.
	// The user can then resend a setup message as frequently as they need to in order
	// to reconfigure live reads - for example by changing if raw data is sent with
	// reads or not.
	Setup *GetLiveReadsRequest_StreamSetup `protobuf:"bytes,1,opt,name=setup,proto3,oneof"`
}

type GetLiveReadsRequest_Actions_ struct {
	// Actions to take given data returned to the user - can only be sent once the setup
	// message above has been sent.
	Actions *GetLiveReadsRequest_Actions `protobuf:"bytes,2,opt,name=actions,proto3,oneof"`
}

func (*GetLiveReadsRequest_Setup) isGetLiveReadsRequest_Request() {}

func (*GetLiveReadsRequest_Actions_) isGetLiveReadsRequest_Request() {}

type GetLiveReadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of samples collected before the first sample included in this response.
	//
	// This gives the position of the first data point on each channel in the overall stream of data
	// being acquired from the device (since this period of data acquisition was started).
	SamplesSinceStart uint64 `protobuf:"varint,1,opt,name=samples_since_start,json=samplesSinceStart,proto3" json:"samples_since_start,omitempty"`
	// The number of seconds elapsed since data acquisition started.
	//
	// This is the same as ``samples_since_start``, but expressed in seconds.
	SecondsSinceStart float64 `protobuf:"fixed64,2,opt,name=seconds_since_start,json=secondsSinceStart,proto3" json:"seconds_since_start,omitempty"`
	// In progress reads for the requested channels.
	//
	// Sparsely populated as not all channels have new/incomplete reads.
	Channels map[uint32]*GetLiveReadsResponse_ReadData `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of repsonses to requested actions, informing the caller of results to requested
	// unblocks or discards of data.
	ActionResponses []*GetLiveReadsResponse_ActionResponse `protobuf:"bytes,5,rep,name=action_responses,json=actionResponses,proto3" json:"action_responses,omitempty"`
}

func (x *GetLiveReadsResponse) Reset() {
	*x = GetLiveReadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsResponse) ProtoMessage() {}

func (x *GetLiveReadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsResponse.ProtoReflect.Descriptor instead.
func (*GetLiveReadsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{9}
}

func (x *GetLiveReadsResponse) GetSamplesSinceStart() uint64 {
	if x != nil {
		return x.SamplesSinceStart
	}
	return 0
}

func (x *GetLiveReadsResponse) GetSecondsSinceStart() float64 {
	if x != nil {
		return x.SecondsSinceStart
	}
	return 0
}

func (x *GetLiveReadsResponse) GetChannels() map[uint32]*GetLiveReadsResponse_ReadData {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetLiveReadsResponse) GetActionResponses() []*GetLiveReadsResponse_ActionResponse {
	if x != nil {
		return x.ActionResponses
	}
	return nil
}

type ResetChannelStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetChannelStatesRequest) Reset() {
	*x = ResetChannelStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetChannelStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetChannelStatesRequest) ProtoMessage() {}

func (x *ResetChannelStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetChannelStatesRequest.ProtoReflect.Descriptor instead.
func (*ResetChannelStatesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{10}
}

type ResetChannelStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetChannelStatesResponse) Reset() {
	*x = ResetChannelStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetChannelStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetChannelStatesResponse) ProtoMessage() {}

func (x *ResetChannelStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetChannelStatesResponse.ProtoReflect.Descriptor instead.
func (*ResetChannelStatesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{11}
}

type GetReadStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of channels required, indexed from 1.
	Channels []uint32 `protobuf:"varint,1,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	// How long to collect the statistics for
	//
	// Types that are assignable to Duration:
	//	*GetReadStatisticsRequest_Seconds
	//	*GetReadStatisticsRequest_Samples
	Duration  isGetReadStatisticsRequest_Duration `protobuf_oneof:"duration"`
	ReadSplit GetReadStatisticsRequest_ReadSplit  `protobuf:"varint,4,opt,name=read_split,json=readSplit,proto3,enum=minknow_api.data.GetReadStatisticsRequest_ReadSplit" json:"read_split,omitempty"`
	// Disable current_statistics results in returned data.
	//
	// Intended for use when the consumer doesn't need specific fields
	// allowing the implementation to be more efficient.
	NoCurrentStatistics bool `protobuf:"varint,5,opt,name=no_current_statistics,json=noCurrentStatistics,proto3" json:"no_current_statistics,omitempty"`
	// Disable chunk_statistics results in returned data.
	//
	// Intended for use when the consumer doesn't need specific fields
	// allowing the implementation to be more efficient.
	NoChunkStatistics bool `protobuf:"varint,6,opt,name=no_chunk_statistics,json=noChunkStatistics,proto3" json:"no_chunk_statistics,omitempty"`
	// Specify classifications which the user wants information about.
	//
	// The default behaviour (when empty) is to return information on all classifications.
	//
	// Specifying which classifications the user needs information about may allow
	// the implementation to be more efficient.
	RequiredClassifications []string `protobuf:"bytes,7,rep,name=required_classifications,json=requiredClassifications,proto3" json:"required_classifications,omitempty"`
}

func (x *GetReadStatisticsRequest) Reset() {
	*x = GetReadStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadStatisticsRequest) ProtoMessage() {}

func (x *GetReadStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetReadStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{12}
}

func (x *GetReadStatisticsRequest) GetChannels() []uint32 {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (m *GetReadStatisticsRequest) GetDuration() isGetReadStatisticsRequest_Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (x *GetReadStatisticsRequest) GetSeconds() float32 {
	if x, ok := x.GetDuration().(*GetReadStatisticsRequest_Seconds); ok {
		return x.Seconds
	}
	return 0
}

func (x *GetReadStatisticsRequest) GetSamples() uint64 {
	if x, ok := x.GetDuration().(*GetReadStatisticsRequest_Samples); ok {
		return x.Samples
	}
	return 0
}

func (x *GetReadStatisticsRequest) GetReadSplit() GetReadStatisticsRequest_ReadSplit {
	if x != nil {
		return x.ReadSplit
	}
	return GetReadStatisticsRequest_CHUNK
}

func (x *GetReadStatisticsRequest) GetNoCurrentStatistics() bool {
	if x != nil {
		return x.NoCurrentStatistics
	}
	return false
}

func (x *GetReadStatisticsRequest) GetNoChunkStatistics() bool {
	if x != nil {
		return x.NoChunkStatistics
	}
	return false
}

func (x *GetReadStatisticsRequest) GetRequiredClassifications() []string {
	if x != nil {
		return x.RequiredClassifications
	}
	return nil
}

type isGetReadStatisticsRequest_Duration interface {
	isGetReadStatisticsRequest_Duration()
}

type GetReadStatisticsRequest_Seconds struct {
	Seconds float32 `protobuf:"fixed32,2,opt,name=seconds,proto3,oneof"`
}

type GetReadStatisticsRequest_Samples struct {
	Samples uint64 `protobuf:"varint,3,opt,name=samples,proto3,oneof"`
}

func (*GetReadStatisticsRequest_Seconds) isGetReadStatisticsRequest_Duration() {}

func (*GetReadStatisticsRequest_Samples) isGetReadStatisticsRequest_Duration() {}

type GetReadStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data for each requested channel, in the same order as requested.
	Channels []*GetReadStatisticsResponse_PerChannelData `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	// The number of samples collected before the first sample included in this response.
	//
	// This gives the position of the first data point which all channels share in the calculated
	// statistics. Each individual channel may have samples from read chunks previous to this sample
	// due to read boundaries not being consistent across channels.
	SamplesSinceStart uint64 `protobuf:"varint,2,opt,name=samples_since_start,json=samplesSinceStart,proto3" json:"samples_since_start,omitempty"`
	// The number of seconds elapsed before the first sample included in this response.
	//
	// This is the same as ``samples_since_start``, but expressed in seconds.
	SecondsSinceStart float64 `protobuf:"fixed64,3,opt,name=seconds_since_start,json=secondsSinceStart,proto3" json:"seconds_since_start,omitempty"`
}

func (x *GetReadStatisticsResponse) Reset() {
	*x = GetReadStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadStatisticsResponse) ProtoMessage() {}

func (x *GetReadStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetReadStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{13}
}

func (x *GetReadStatisticsResponse) GetChannels() []*GetReadStatisticsResponse_PerChannelData {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetReadStatisticsResponse) GetSamplesSinceStart() uint64 {
	if x != nil {
		return x.SamplesSinceStart
	}
	return 0
}

func (x *GetReadStatisticsResponse) GetSecondsSinceStart() float64 {
	if x != nil {
		return x.SecondsSinceStart
	}
	return 0
}

type LockChannelStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channels that we want to 'deactivate' = set them to the given state until we re-activate them
	// with unlock_channel_states
	// If the channels are already deactivated, it will update the state to the new forced state given (if different).
	// Channels are indexed from 1.
	Channels []uint64 `protobuf:"varint,1,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	// Channel state name as specified in the channel state configuration.
	// It HAS to be different to 'unclassified', which denotes that the channel is active, but had not met
	// any successful criteria yet.
	StateName string `protobuf:"bytes,2,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
}

func (x *LockChannelStatesRequest) Reset() {
	*x = LockChannelStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockChannelStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockChannelStatesRequest) ProtoMessage() {}

func (x *LockChannelStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockChannelStatesRequest.ProtoReflect.Descriptor instead.
func (*LockChannelStatesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{14}
}

func (x *LockChannelStatesRequest) GetChannels() []uint64 {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *LockChannelStatesRequest) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

type LockChannelStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockChannelStatesResponse) Reset() {
	*x = LockChannelStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockChannelStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockChannelStatesResponse) ProtoMessage() {}

func (x *LockChannelStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockChannelStatesResponse.ProtoReflect.Descriptor instead.
func (*LockChannelStatesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{15}
}

type UnlockChannelStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channels to activate (active = they will be considered for channel state evaluation in the future).
	// Channels are indexed from 1.
	Channels []uint64 `protobuf:"varint,1,rep,packed,name=channels,proto3" json:"channels,omitempty"`
}

func (x *UnlockChannelStatesRequest) Reset() {
	*x = UnlockChannelStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockChannelStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockChannelStatesRequest) ProtoMessage() {}

func (x *UnlockChannelStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockChannelStatesRequest.ProtoReflect.Descriptor instead.
func (*UnlockChannelStatesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{16}
}

func (x *UnlockChannelStatesRequest) GetChannels() []uint64 {
	if x != nil {
		return x.Channels
	}
	return nil
}

type UnlockChannelStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnlockChannelStatesResponse) Reset() {
	*x = UnlockChannelStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockChannelStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockChannelStatesResponse) ProtoMessage() {}

func (x *UnlockChannelStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockChannelStatesResponse.ProtoReflect.Descriptor instead.
func (*UnlockChannelStatesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{17}
}

type GetExperimentYieldInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetExperimentYieldInfoRequest) Reset() {
	*x = GetExperimentYieldInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoRequest) ProtoMessage() {}

func (x *GetExperimentYieldInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{18}
}

type GetExperimentYieldInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompleteReadInfo               *GetExperimentYieldInfoResponse_CompleteReadInfo              `protobuf:"bytes,1,opt,name=complete_read_info,json=completeReadInfo,proto3" json:"complete_read_info,omitempty"`
	AcquisitionInfo                *GetExperimentYieldInfoResponse_AcquisitionInfo               `protobuf:"bytes,2,opt,name=acquisition_info,json=acquisitionInfo,proto3" json:"acquisition_info,omitempty"`
	AnalyserInfo                   *GetExperimentYieldInfoResponse_AnalyserInfo                  `protobuf:"bytes,3,opt,name=analyser_info,json=analyserInfo,proto3" json:"analyser_info,omitempty"`
	BulkInfo                       *GetExperimentYieldInfoResponse_BulkInfo                      `protobuf:"bytes,4,opt,name=bulk_info,json=bulkInfo,proto3" json:"bulk_info,omitempty"`
	HdfWriterInfo                  *GetExperimentYieldInfoResponse_HdfWriterInfo                 `protobuf:"bytes,5,opt,name=hdf_writer_info,json=hdfWriterInfo,proto3" json:"hdf_writer_info,omitempty"`
	BasecallerStatistics           *GetExperimentYieldInfoResponse_BasecallStatistics            `protobuf:"bytes,6,opt,name=basecaller_statistics,json=basecallerStatistics,proto3" json:"basecaller_statistics,omitempty"`
	HdfMultiReadWritingStatisitics *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics `protobuf:"bytes,7,opt,name=hdf_multi_read_writing_statisitics,json=hdfMultiReadWritingStatisitics,proto3" json:"hdf_multi_read_writing_statisitics,omitempty"`
	FastqReadWritingStatistics     *GetExperimentYieldInfoResponse_FastqReadWritingStatistics    `protobuf:"bytes,8,opt,name=fastq_read_writing_statistics,json=fastqReadWritingStatistics,proto3" json:"fastq_read_writing_statistics,omitempty"`
	ProtobufReadWritingStatistics  *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics `protobuf:"bytes,9,opt,name=protobuf_read_writing_statistics,json=protobufReadWritingStatistics,proto3" json:"protobuf_read_writing_statistics,omitempty"`
	FileOperationQueueProgress     *GetExperimentYieldInfoResponse_FileOperationQueueProgress    `protobuf:"bytes,10,opt,name=file_operation_queue_progress,json=fileOperationQueueProgress,proto3" json:"file_operation_queue_progress,omitempty"`
}

func (x *GetExperimentYieldInfoResponse) Reset() {
	*x = GetExperimentYieldInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19}
}

func (x *GetExperimentYieldInfoResponse) GetCompleteReadInfo() *GetExperimentYieldInfoResponse_CompleteReadInfo {
	if x != nil {
		return x.CompleteReadInfo
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetAcquisitionInfo() *GetExperimentYieldInfoResponse_AcquisitionInfo {
	if x != nil {
		return x.AcquisitionInfo
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetAnalyserInfo() *GetExperimentYieldInfoResponse_AnalyserInfo {
	if x != nil {
		return x.AnalyserInfo
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetBulkInfo() *GetExperimentYieldInfoResponse_BulkInfo {
	if x != nil {
		return x.BulkInfo
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetHdfWriterInfo() *GetExperimentYieldInfoResponse_HdfWriterInfo {
	if x != nil {
		return x.HdfWriterInfo
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetBasecallerStatistics() *GetExperimentYieldInfoResponse_BasecallStatistics {
	if x != nil {
		return x.BasecallerStatistics
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetHdfMultiReadWritingStatisitics() *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics {
	if x != nil {
		return x.HdfMultiReadWritingStatisitics
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetFastqReadWritingStatistics() *GetExperimentYieldInfoResponse_FastqReadWritingStatistics {
	if x != nil {
		return x.FastqReadWritingStatistics
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetProtobufReadWritingStatistics() *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics {
	if x != nil {
		return x.ProtobufReadWritingStatistics
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse) GetFileOperationQueueProgress() *GetExperimentYieldInfoResponse_FileOperationQueueProgress {
	if x != nil {
		return x.FileOperationQueueProgress
	}
	return nil
}

type GetChannelStatesResponse_ChannelStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents the channel number, indexed from one. (i.e. what channel did the
	// channel state change happened on)
	Channel uint32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// depending on the channel state request, MinKNOW can fill in either the name
	// or the criteria id of the channel state. The criteria id (or state_id) is
	// the number passed in the channel states configuration. Note that MinKNOW also
	// has some default channel states (like unclassified, pending mux change) which
	// receive unique ids - these are numbers bigger than 200.
	//
	// Types that are assignable to State:
	//	*GetChannelStatesResponse_ChannelStateData_StateId
	//	*GetChannelStatesResponse_ChannelStateData_StateName
	State isGetChannelStatesResponse_ChannelStateData_State `protobuf_oneof:"state"`
	// Indices of when the channel state was first seen.
	// For example, if a request is done half way through the experiment,
	// the first message will contain the current state on the requested
	// channels. The acquisition/analysis index of these would be from
	// when the channel states were set. These are exactly the same numbers
	// we see in the bulk file, in the 'states' table
	AcquisitionRawIndex uint64 `protobuf:"varint,4,opt,name=acquisition_raw_index,json=acquisitionRawIndex,proto3" json:"acquisition_raw_index,omitempty"`
	AnalysisRawIndex    uint64 `protobuf:"varint,5,opt,name=analysis_raw_index,json=analysisRawIndex,proto3" json:"analysis_raw_index,omitempty"`
	TriggerTime         uint64 `protobuf:"varint,7,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	// Channel config (mux state) the channel state was determined on.
	Config *ReturnedChannelConfiguration `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetChannelStatesResponse_ChannelStateData) Reset() {
	*x = GetChannelStatesResponse_ChannelStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelStatesResponse_ChannelStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelStatesResponse_ChannelStateData) ProtoMessage() {}

func (x *GetChannelStatesResponse_ChannelStateData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelStatesResponse_ChannelStateData.ProtoReflect.Descriptor instead.
func (*GetChannelStatesResponse_ChannelStateData) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetChannelStatesResponse_ChannelStateData) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (m *GetChannelStatesResponse_ChannelStateData) GetState() isGetChannelStatesResponse_ChannelStateData_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *GetChannelStatesResponse_ChannelStateData) GetStateId() uint32 {
	if x, ok := x.GetState().(*GetChannelStatesResponse_ChannelStateData_StateId); ok {
		return x.StateId
	}
	return 0
}

func (x *GetChannelStatesResponse_ChannelStateData) GetStateName() string {
	if x, ok := x.GetState().(*GetChannelStatesResponse_ChannelStateData_StateName); ok {
		return x.StateName
	}
	return ""
}

func (x *GetChannelStatesResponse_ChannelStateData) GetAcquisitionRawIndex() uint64 {
	if x != nil {
		return x.AcquisitionRawIndex
	}
	return 0
}

func (x *GetChannelStatesResponse_ChannelStateData) GetAnalysisRawIndex() uint64 {
	if x != nil {
		return x.AnalysisRawIndex
	}
	return 0
}

func (x *GetChannelStatesResponse_ChannelStateData) GetTriggerTime() uint64 {
	if x != nil {
		return x.TriggerTime
	}
	return 0
}

func (x *GetChannelStatesResponse_ChannelStateData) GetConfig() *ReturnedChannelConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

type isGetChannelStatesResponse_ChannelStateData_State interface {
	isGetChannelStatesResponse_ChannelStateData_State()
}

type GetChannelStatesResponse_ChannelStateData_StateId struct {
	StateId uint32 `protobuf:"varint,2,opt,name=state_id,json=stateId,proto3,oneof"`
}

type GetChannelStatesResponse_ChannelStateData_StateName struct {
	StateName string `protobuf:"bytes,3,opt,name=state_name,json=stateName,proto3,oneof"`
}

func (*GetChannelStatesResponse_ChannelStateData_StateId) isGetChannelStatesResponse_ChannelStateData_State() {
}

func (*GetChannelStatesResponse_ChannelStateData_StateName) isGetChannelStatesResponse_ChannelStateData_State() {
}

type GetDataTypesResponse_DataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The basic type of the data item.
	Type GetDataTypesResponse_DataType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=minknow_api.data.GetDataTypesResponse_DataType_Type" json:"type,omitempty"`
	// Whether the type is big-endian (high-byte first).
	//
	// For numeric data types, if this is not set, they are little-endian (low-byte first).
	BigEndian bool `protobuf:"varint,2,opt,name=big_endian,json=bigEndian,proto3" json:"big_endian,omitempty"`
	// The size of the data type in bytes.
	Size uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetDataTypesResponse_DataType) Reset() {
	*x = GetDataTypesResponse_DataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataTypesResponse_DataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataTypesResponse_DataType) ProtoMessage() {}

func (x *GetDataTypesResponse_DataType) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataTypesResponse_DataType.ProtoReflect.Descriptor instead.
func (*GetDataTypesResponse_DataType) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetDataTypesResponse_DataType) GetType() GetDataTypesResponse_DataType_Type {
	if x != nil {
		return x.Type
	}
	return GetDataTypesResponse_DataType_SIGNED_INTEGER
}

func (x *GetDataTypesResponse_DataType) GetBigEndian() bool {
	if x != nil {
		return x.BigEndian
	}
	return false
}

func (x *GetDataTypesResponse_DataType) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetSignalBytesResponse_ChannelConfigChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new channel configuration.
	Config *ReturnedChannelConfiguration `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The offset in the returned data where the change was applied.
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetSignalBytesResponse_ChannelConfigChange) Reset() {
	*x = GetSignalBytesResponse_ChannelConfigChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalBytesResponse_ChannelConfigChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalBytesResponse_ChannelConfigChange) ProtoMessage() {}

func (x *GetSignalBytesResponse_ChannelConfigChange) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalBytesResponse_ChannelConfigChange.ProtoReflect.Descriptor instead.
func (*GetSignalBytesResponse_ChannelConfigChange) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetSignalBytesResponse_ChannelConfigChange) GetConfig() *ReturnedChannelConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetSignalBytesResponse_ChannelConfigChange) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetSignalBytesResponse_ChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signal data.
	//
	// This is the byte representation of a C-style array of values. Values are stored in order
	// and adjacent to each other.
	//
	// The type of the elements will depend on whether calibrated data was chosen. The
	// get_data_types() RPC call should be used to determine the precise format of the data, but
	// in general terms, uncalibrated data will be signed integers and calibrated data will be
	// floating-point numbers.
	//
	// Returning the data in this format allows it to be efficiently processed in dynamic
	// languages that can pass the data straight down to a native runtime. For example, in
	// Python, this data can be intepreted directly into a numpy array using numpy.fromstring().
	//
	// Calibrated data is in picoamps. Uncalibrated data is the raw values output by the
	// device's ADC (analogue-digital converter).
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The configuration changes on the channel during data collection.
	//
	// If channel configuration changes were requested, this will contain all the channel
	// configuration changes that affect the returned data. This will include at least one
	// element, with offset 0, that describes the configuration at the time the first sample was
	// taken.
	//
	// Note that the offset is the zero-based index into the adc or picoamps list.
	//
	// The changes will be ordered by offset.
	ConfigChanges []*GetSignalBytesResponse_ChannelConfigChange `protobuf:"bytes,3,rep,name=config_changes,json=configChanges,proto3" json:"config_changes,omitempty"`
}

func (x *GetSignalBytesResponse_ChannelData) Reset() {
	*x = GetSignalBytesResponse_ChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalBytesResponse_ChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalBytesResponse_ChannelData) ProtoMessage() {}

func (x *GetSignalBytesResponse_ChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalBytesResponse_ChannelData.ProtoReflect.Descriptor instead.
func (*GetSignalBytesResponse_ChannelData) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GetSignalBytesResponse_ChannelData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSignalBytesResponse_ChannelData) GetConfigChanges() []*GetSignalBytesResponse_ChannelConfigChange {
	if x != nil {
		return x.ConfigChanges
	}
	return nil
}

type GetSignalMinMaxResponse_ChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum value for each window.
	//
	// The type of the elements will depend on whether calibrated data was chosen.
	// Uncalibrated data will be signed integers and calibrated data will be
	// floating-point numbers.
	//
	// It would be nice to use the "oneof" enum-like type to
	// capture this, but you can't have repeated members in a oneof, and nor can
	// you have a repeated oneof field.  We can simply include message fields for both
	// types of data, as all fields are optional in proto3.  We will rely on the
	// code that constructs this message to guarantee that we don't try and put both
	// types of data into the same message.
	//
	// Calibrated data is in picoamps. Uncalibrated data is the raw values output by the
	// device's ADC (analogue-digital converter).
	//
	// This is guaranteed to be the same size as the respective foo_maxima field.
	CalibratedMinima []float32 `protobuf:"fixed32,1,rep,packed,name=calibrated_minima,json=calibratedMinima,proto3" json:"calibrated_minima,omitempty"`
	RawMinima        []int32   `protobuf:"varint,2,rep,packed,name=raw_minima,json=rawMinima,proto3" json:"raw_minima,omitempty"`
	// The maximum value for each window.
	//
	// See comments for the "minima" fields above for details of calibrated and
	// uncalibrated data.
	//
	// This is guaranteed to be the same size as the respective foo_minima field.
	CalibratedMaxima []float32 `protobuf:"fixed32,3,rep,packed,name=calibrated_maxima,json=calibratedMaxima,proto3" json:"calibrated_maxima,omitempty"`
	RawMaxima        []int32   `protobuf:"varint,4,rep,packed,name=raw_maxima,json=rawMaxima,proto3" json:"raw_maxima,omitempty"`
}

func (x *GetSignalMinMaxResponse_ChannelData) Reset() {
	*x = GetSignalMinMaxResponse_ChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignalMinMaxResponse_ChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalMinMaxResponse_ChannelData) ProtoMessage() {}

func (x *GetSignalMinMaxResponse_ChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalMinMaxResponse_ChannelData.ProtoReflect.Descriptor instead.
func (*GetSignalMinMaxResponse_ChannelData) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetSignalMinMaxResponse_ChannelData) GetCalibratedMinima() []float32 {
	if x != nil {
		return x.CalibratedMinima
	}
	return nil
}

func (x *GetSignalMinMaxResponse_ChannelData) GetRawMinima() []int32 {
	if x != nil {
		return x.RawMinima
	}
	return nil
}

func (x *GetSignalMinMaxResponse_ChannelData) GetCalibratedMaxima() []float32 {
	if x != nil {
		return x.CalibratedMaxima
	}
	return nil
}

func (x *GetSignalMinMaxResponse_ChannelData) GetRawMaxima() []int32 {
	if x != nil {
		return x.RawMaxima
	}
	return nil
}

type GetLiveReadsRequest_UnblockAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration of unblock in seconds.
	Duration float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *GetLiveReadsRequest_UnblockAction) Reset() {
	*x = GetLiveReadsRequest_UnblockAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsRequest_UnblockAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsRequest_UnblockAction) ProtoMessage() {}

func (x *GetLiveReadsRequest_UnblockAction) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsRequest_UnblockAction.ProtoReflect.Descriptor instead.
func (*GetLiveReadsRequest_UnblockAction) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetLiveReadsRequest_UnblockAction) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type GetLiveReadsRequest_StopFurtherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLiveReadsRequest_StopFurtherData) Reset() {
	*x = GetLiveReadsRequest_StopFurtherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsRequest_StopFurtherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsRequest_StopFurtherData) ProtoMessage() {}

func (x *GetLiveReadsRequest_StopFurtherData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsRequest_StopFurtherData.ProtoReflect.Descriptor instead.
func (*GetLiveReadsRequest_StopFurtherData) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{8, 1}
}

type GetLiveReadsRequest_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId string `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Channel name to unblock
	Channel uint32 `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Identifier for the read to act on.
	//
	// If the read requested is no longer in progress, the action fails.
	//
	// Types that are assignable to Read:
	//	*GetLiveReadsRequest_Action_Id
	//	*GetLiveReadsRequest_Action_Number
	Read isGetLiveReadsRequest_Action_Read `protobuf_oneof:"read"`
	// Types that are assignable to Action:
	//	*GetLiveReadsRequest_Action_Unblock
	//	*GetLiveReadsRequest_Action_StopFurtherData
	Action isGetLiveReadsRequest_Action_Action `protobuf_oneof:"action"`
}

func (x *GetLiveReadsRequest_Action) Reset() {
	*x = GetLiveReadsRequest_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsRequest_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsRequest_Action) ProtoMessage() {}

func (x *GetLiveReadsRequest_Action) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsRequest_Action.ProtoReflect.Descriptor instead.
func (*GetLiveReadsRequest_Action) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{8, 2}
}

func (x *GetLiveReadsRequest_Action) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *GetLiveReadsRequest_Action) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (m *GetLiveReadsRequest_Action) GetRead() isGetLiveReadsRequest_Action_Read {
	if m != nil {
		return m.Read
	}
	return nil
}

func (x *GetLiveReadsRequest_Action) GetId() string {
	if x, ok := x.GetRead().(*GetLiveReadsRequest_Action_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetLiveReadsRequest_Action) GetNumber() uint32 {
	if x, ok := x.GetRead().(*GetLiveReadsRequest_Action_Number); ok {
		return x.Number
	}
	return 0
}

func (m *GetLiveReadsRequest_Action) GetAction() isGetLiveReadsRequest_Action_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *GetLiveReadsRequest_Action) GetUnblock() *GetLiveReadsRequest_UnblockAction {
	if x, ok := x.GetAction().(*GetLiveReadsRequest_Action_Unblock); ok {
		return x.Unblock
	}
	return nil
}

func (x *GetLiveReadsRequest_Action) GetStopFurtherData() *GetLiveReadsRequest_StopFurtherData {
	if x, ok := x.GetAction().(*GetLiveReadsRequest_Action_StopFurtherData); ok {
		return x.StopFurtherData
	}
	return nil
}

type isGetLiveReadsRequest_Action_Read interface {
	isGetLiveReadsRequest_Action_Read()
}

type GetLiveReadsRequest_Action_Id struct {
	Id string `protobuf:"bytes,3,opt,name=id,proto3,oneof"`
}

type GetLiveReadsRequest_Action_Number struct {
	Number uint32 `protobuf:"varint,4,opt,name=number,proto3,oneof"`
}

func (*GetLiveReadsRequest_Action_Id) isGetLiveReadsRequest_Action_Read() {}

func (*GetLiveReadsRequest_Action_Number) isGetLiveReadsRequest_Action_Read() {}

type isGetLiveReadsRequest_Action_Action interface {
	isGetLiveReadsRequest_Action_Action()
}

type GetLiveReadsRequest_Action_Unblock struct {
	// Unblock a read and skip further data from this read.
	Unblock *GetLiveReadsRequest_UnblockAction `protobuf:"bytes,5,opt,name=unblock,proto3,oneof"`
}

type GetLiveReadsRequest_Action_StopFurtherData struct {
	// Skip further data from this read, doesn't affect the read data.
	StopFurtherData *GetLiveReadsRequest_StopFurtherData `protobuf:"bytes,6,opt,name=stop_further_data,json=stopFurtherData,proto3,oneof"`
}

func (*GetLiveReadsRequest_Action_Unblock) isGetLiveReadsRequest_Action_Action() {}

func (*GetLiveReadsRequest_Action_StopFurtherData) isGetLiveReadsRequest_Action_Action() {}

type GetLiveReadsRequest_StreamSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first channel (inclusive) to return data for.
	//
	// Note that channel numbering starts at 1.
	FirstChannel uint32 `protobuf:"varint,1,opt,name=first_channel,json=firstChannel,proto3" json:"first_channel,omitempty"`
	// The last channel (inclusive) to return data for.
	//
	// Note that channel numbering starts at 1.
	LastChannel uint32 `protobuf:"varint,2,opt,name=last_channel,json=lastChannel,proto3" json:"last_channel,omitempty"`
	// Specify the type of raw data to retrieve
	RawDataType GetLiveReadsRequest_RawDataType `protobuf:"varint,3,opt,name=raw_data_type,json=rawDataType,proto3,enum=minknow_api.data.GetLiveReadsRequest_RawDataType" json:"raw_data_type,omitempty"`
	// Minimum chunk size read data is returned in.
	SampleMinimumChunkSize uint64 `protobuf:"varint,4,opt,name=sample_minimum_chunk_size,json=sampleMinimumChunkSize,proto3" json:"sample_minimum_chunk_size,omitempty"`
	// Maximum read length MinKNOW will attempt to unblock
	// reads beyond this length will not be unblocked when Action's request,
	// instead minknow will skip any further data from the read.
	//
	// Types that are assignable to MaxUnblockReadLength:
	//	*GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSamples
	//	*GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSeconds
	MaxUnblockReadLength isGetLiveReadsRequest_StreamSetup_MaxUnblockReadLength `protobuf_oneof:"max_unblock_read_length"`
}

func (x *GetLiveReadsRequest_StreamSetup) Reset() {
	*x = GetLiveReadsRequest_StreamSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsRequest_StreamSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsRequest_StreamSetup) ProtoMessage() {}

func (x *GetLiveReadsRequest_StreamSetup) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsRequest_StreamSetup.ProtoReflect.Descriptor instead.
func (*GetLiveReadsRequest_StreamSetup) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{8, 3}
}

func (x *GetLiveReadsRequest_StreamSetup) GetFirstChannel() uint32 {
	if x != nil {
		return x.FirstChannel
	}
	return 0
}

func (x *GetLiveReadsRequest_StreamSetup) GetLastChannel() uint32 {
	if x != nil {
		return x.LastChannel
	}
	return 0
}

func (x *GetLiveReadsRequest_StreamSetup) GetRawDataType() GetLiveReadsRequest_RawDataType {
	if x != nil {
		return x.RawDataType
	}
	return GetLiveReadsRequest_KEEP_LAST
}

func (x *GetLiveReadsRequest_StreamSetup) GetSampleMinimumChunkSize() uint64 {
	if x != nil {
		return x.SampleMinimumChunkSize
	}
	return 0
}

func (m *GetLiveReadsRequest_StreamSetup) GetMaxUnblockReadLength() isGetLiveReadsRequest_StreamSetup_MaxUnblockReadLength {
	if m != nil {
		return m.MaxUnblockReadLength
	}
	return nil
}

func (x *GetLiveReadsRequest_StreamSetup) GetMaxUnblockReadLengthSamples() uint64 {
	if x, ok := x.GetMaxUnblockReadLength().(*GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSamples); ok {
		return x.MaxUnblockReadLengthSamples
	}
	return 0
}

func (x *GetLiveReadsRequest_StreamSetup) GetMaxUnblockReadLengthSeconds() float64 {
	if x, ok := x.GetMaxUnblockReadLength().(*GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSeconds); ok {
		return x.MaxUnblockReadLengthSeconds
	}
	return 0
}

type isGetLiveReadsRequest_StreamSetup_MaxUnblockReadLength interface {
	isGetLiveReadsRequest_StreamSetup_MaxUnblockReadLength()
}

type GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSamples struct {
	// Maximum read length MinKNOW will attempt to unblock (in samples).
	//
	// A value of 0 will cause minknow to unblock reads of any length.
	//
	MaxUnblockReadLengthSamples uint64 `protobuf:"varint,5,opt,name=max_unblock_read_length_samples,json=maxUnblockReadLengthSamples,proto3,oneof"`
}

type GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSeconds struct {
	// Maximum read length MinKNOW will attempt to unblock (in seconds).
	//
	// A value of 0.0 will cause minknow to unblock reads of any length.
	//
	MaxUnblockReadLengthSeconds float64 `protobuf:"fixed64,6,opt,name=max_unblock_read_length_seconds,json=maxUnblockReadLengthSeconds,proto3,oneof"`
}

func (*GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSamples) isGetLiveReadsRequest_StreamSetup_MaxUnblockReadLength() {
}

func (*GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSeconds) isGetLiveReadsRequest_StreamSetup_MaxUnblockReadLength() {
}

type GetLiveReadsRequest_Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*GetLiveReadsRequest_Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *GetLiveReadsRequest_Actions) Reset() {
	*x = GetLiveReadsRequest_Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsRequest_Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsRequest_Actions) ProtoMessage() {}

func (x *GetLiveReadsRequest_Actions) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsRequest_Actions.ProtoReflect.Descriptor instead.
func (*GetLiveReadsRequest_Actions) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{8, 4}
}

func (x *GetLiveReadsRequest_Actions) GetActions() []*GetLiveReadsRequest_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type GetLiveReadsResponse_ReadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of this read, this id is unique for every read ever produced.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The minknow assigned number of this read
	//
	// Read numbers always increment throughout the experiment, and are unique per channel -
	// however they are not necessarily contiguous.
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// Absolute start point of this read
	StartSample uint64 `protobuf:"varint,3,opt,name=start_sample,json=startSample,proto3" json:"start_sample,omitempty"`
	// Absolute start point through the experiment of this chunk
	ChunkStartSample uint64 `protobuf:"varint,4,opt,name=chunk_start_sample,json=chunkStartSample,proto3" json:"chunk_start_sample,omitempty"`
	// Length of the chunk in samples
	ChunkLength uint64 `protobuf:"varint,5,opt,name=chunk_length,json=chunkLength,proto3" json:"chunk_length,omitempty"`
	// All Classifications given to intermediate chunks by analysis
	//
	// See analysis_configuration.get_read_classifications for how to map these integers to names.
	ChunkClassifications []int32 `protobuf:"varint,6,rep,packed,name=chunk_classifications,json=chunkClassifications,proto3" json:"chunk_classifications,omitempty"`
	// Any raw data selected by the request
	//
	// The type of the elements will depend on whether calibrated data was chosen. The
	// get_data_types() RPC call should be used to determine the precise format of the data, but
	// in general terms, uncalibrated data will be signed integers and calibrated data will be
	// floating-point numbers.
	RawData []byte `protobuf:"bytes,7,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	// The median of the read previous to this read.
	// intended to allow querying of the approximate level of this read, comapred to the last.
	//
	// For example, a user could try to verify this is a strand be ensuring the median of the
	// current read is lower than the median_before level.
	MedianBefore float32 `protobuf:"fixed32,8,opt,name=median_before,json=medianBefore,proto3" json:"median_before,omitempty"`
	// The media pA level of this read from all aggregated read chunks so far.
	Median float32 `protobuf:"fixed32,9,opt,name=median,proto3" json:"median,omitempty"`
}

func (x *GetLiveReadsResponse_ReadData) Reset() {
	*x = GetLiveReadsResponse_ReadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsResponse_ReadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsResponse_ReadData) ProtoMessage() {}

func (x *GetLiveReadsResponse_ReadData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsResponse_ReadData.ProtoReflect.Descriptor instead.
func (*GetLiveReadsResponse_ReadData) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetLiveReadsResponse_ReadData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetLiveReadsResponse_ReadData) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *GetLiveReadsResponse_ReadData) GetStartSample() uint64 {
	if x != nil {
		return x.StartSample
	}
	return 0
}

func (x *GetLiveReadsResponse_ReadData) GetChunkStartSample() uint64 {
	if x != nil {
		return x.ChunkStartSample
	}
	return 0
}

func (x *GetLiveReadsResponse_ReadData) GetChunkLength() uint64 {
	if x != nil {
		return x.ChunkLength
	}
	return 0
}

func (x *GetLiveReadsResponse_ReadData) GetChunkClassifications() []int32 {
	if x != nil {
		return x.ChunkClassifications
	}
	return nil
}

func (x *GetLiveReadsResponse_ReadData) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *GetLiveReadsResponse_ReadData) GetMedianBefore() float32 {
	if x != nil {
		return x.MedianBefore
	}
	return 0
}

func (x *GetLiveReadsResponse_ReadData) GetMedian() float32 {
	if x != nil {
		return x.Median
	}
	return 0
}

type GetLiveReadsResponse_ActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId string                                       `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	Response GetLiveReadsResponse_ActionResponse_Response `protobuf:"varint,2,opt,name=response,proto3,enum=minknow_api.data.GetLiveReadsResponse_ActionResponse_Response" json:"response,omitempty"`
}

func (x *GetLiveReadsResponse_ActionResponse) Reset() {
	*x = GetLiveReadsResponse_ActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveReadsResponse_ActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveReadsResponse_ActionResponse) ProtoMessage() {}

func (x *GetLiveReadsResponse_ActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveReadsResponse_ActionResponse.ProtoReflect.Descriptor instead.
func (*GetLiveReadsResponse_ActionResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{9, 1}
}

func (x *GetLiveReadsResponse_ActionResponse) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *GetLiveReadsResponse_ActionResponse) GetResponse() GetLiveReadsResponse_ActionResponse_Response {
	if x != nil {
		return x.Response
	}
	return GetLiveReadsResponse_ActionResponse_SUCCESS
}

type GetReadStatisticsResponse_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min    float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Max    float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
	Mean   float64 `protobuf:"fixed64,3,opt,name=mean,proto3" json:"mean,omitempty"`
	SD     float64 `protobuf:"fixed64,4,opt,name=s_d,json=sD,proto3" json:"s_d,omitempty"`
	Median float64 `protobuf:"fixed64,6,opt,name=median,proto3" json:"median,omitempty"`
	Q_5    float64 `protobuf:"fixed64,7,opt,name=q_5,json=q5,proto3" json:"q_5,omitempty"` // Quantiles (percentiles)
	Q_10   float64 `protobuf:"fixed64,8,opt,name=q_10,json=q10,proto3" json:"q_10,omitempty"`
	Q_25   float64 `protobuf:"fixed64,9,opt,name=q_25,json=q25,proto3" json:"q_25,omitempty"`
	Q_75   float64 `protobuf:"fixed64,10,opt,name=q_75,json=q75,proto3" json:"q_75,omitempty"`
	Q_90   float64 `protobuf:"fixed64,11,opt,name=q_90,json=q90,proto3" json:"q_90,omitempty"`
	Q_95   float64 `protobuf:"fixed64,12,opt,name=q_95,json=q95,proto3" json:"q_95,omitempty"`
}

func (x *GetReadStatisticsResponse_Statistics) Reset() {
	*x = GetReadStatisticsResponse_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadStatisticsResponse_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadStatisticsResponse_Statistics) ProtoMessage() {}

func (x *GetReadStatisticsResponse_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadStatisticsResponse_Statistics.ProtoReflect.Descriptor instead.
func (*GetReadStatisticsResponse_Statistics) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetReadStatisticsResponse_Statistics) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetSD() float64 {
	if x != nil {
		return x.SD
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetMedian() float64 {
	if x != nil {
		return x.Median
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetQ_5() float64 {
	if x != nil {
		return x.Q_5
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetQ_10() float64 {
	if x != nil {
		return x.Q_10
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetQ_25() float64 {
	if x != nil {
		return x.Q_25
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetQ_75() float64 {
	if x != nil {
		return x.Q_75
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetQ_90() float64 {
	if x != nil {
		return x.Q_90
	}
	return 0
}

func (x *GetReadStatisticsResponse_Statistics) GetQ_95() float64 {
	if x != nil {
		return x.Q_95
	}
	return 0
}

type GetReadStatisticsResponse_ChunkStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggregated median_sd value from all classified reads.
	// Computed as median(median_sd[...])
	MedianSd float64 `protobuf:"fixed64,1,opt,name=median_sd,json=medianSd,proto3" json:"median_sd,omitempty"`
	// Aggregated median_sd value from all classified reads.
	//
	// Computed as median(median[...])
	Median float64 `protobuf:"fixed64,2,opt,name=median,proto3" json:"median,omitempty"`
	// Aggregated range value from all classified reads.
	//
	// Computed as median(q90[...] - q10[...])
	Range float64 `protobuf:"fixed64,3,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *GetReadStatisticsResponse_ChunkStatistics) Reset() {
	*x = GetReadStatisticsResponse_ChunkStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadStatisticsResponse_ChunkStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadStatisticsResponse_ChunkStatistics) ProtoMessage() {}

func (x *GetReadStatisticsResponse_ChunkStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadStatisticsResponse_ChunkStatistics.ProtoReflect.Descriptor instead.
func (*GetReadStatisticsResponse_ChunkStatistics) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{13, 1}
}

func (x *GetReadStatisticsResponse_ChunkStatistics) GetMedianSd() float64 {
	if x != nil {
		return x.MedianSd
	}
	return 0
}

func (x *GetReadStatisticsResponse_ChunkStatistics) GetMedian() float64 {
	if x != nil {
		return x.Median
	}
	return 0
}

func (x *GetReadStatisticsResponse_ChunkStatistics) GetRange() float64 {
	if x != nil {
		return x.Range
	}
	return 0
}

type GetReadStatisticsResponse_PerClassificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statistics of read (chunk) durations. These will be in the same units as the requested
	// duration (if you ask for X seconds of data, you will get durations back in seconds, but if
	// you ask for X samples of data, you will get durations back in samples).
	//
	// NB: statistics may be estimates.
	DurationStatistics *GetReadStatisticsResponse_Statistics `protobuf:"bytes,1,opt,name=duration_statistics,json=durationStatistics,proto3" json:"duration_statistics,omitempty"`
	// Statistics for all current (signal) values for all reads under this
	// channel/configuration/classification combination.
	//
	// NB: Statistics are calculated from raw data.
	CurrentStatistics *GetReadStatisticsResponse_Statistics `protobuf:"bytes,2,opt,name=current_statistics,json=currentStatistics,proto3" json:"current_statistics,omitempty"`
	// Statistics generated from the analysed read chunks (or complete reads), rather
	// than the raw signal.
	ChunkStatistics *GetReadStatisticsResponse_ChunkStatistics `protobuf:"bytes,6,opt,name=chunk_statistics,json=chunkStatistics,proto3" json:"chunk_statistics,omitempty"`
	// The number of samples seen with this classification on this channel in this channel
	// configuration.
	SamplesDuration uint64 `protobuf:"varint,4,opt,name=samples_duration,json=samplesDuration,proto3" json:"samples_duration,omitempty"`
	// The number of seconds spent in this classification on this channel in this channel
	// configuration.
	//
	// This is the same as ``samples_duration``, but expressed in seconds.
	SecondsDuration float64 `protobuf:"fixed64,5,opt,name=seconds_duration,json=secondsDuration,proto3" json:"seconds_duration,omitempty"`
}

func (x *GetReadStatisticsResponse_PerClassificationData) Reset() {
	*x = GetReadStatisticsResponse_PerClassificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadStatisticsResponse_PerClassificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadStatisticsResponse_PerClassificationData) ProtoMessage() {}

func (x *GetReadStatisticsResponse_PerClassificationData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadStatisticsResponse_PerClassificationData.ProtoReflect.Descriptor instead.
func (*GetReadStatisticsResponse_PerClassificationData) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{13, 2}
}

func (x *GetReadStatisticsResponse_PerClassificationData) GetDurationStatistics() *GetReadStatisticsResponse_Statistics {
	if x != nil {
		return x.DurationStatistics
	}
	return nil
}

func (x *GetReadStatisticsResponse_PerClassificationData) GetCurrentStatistics() *GetReadStatisticsResponse_Statistics {
	if x != nil {
		return x.CurrentStatistics
	}
	return nil
}

func (x *GetReadStatisticsResponse_PerClassificationData) GetChunkStatistics() *GetReadStatisticsResponse_ChunkStatistics {
	if x != nil {
		return x.ChunkStatistics
	}
	return nil
}

func (x *GetReadStatisticsResponse_PerClassificationData) GetSamplesDuration() uint64 {
	if x != nil {
		return x.SamplesDuration
	}
	return 0
}

func (x *GetReadStatisticsResponse_PerClassificationData) GetSecondsDuration() float64 {
	if x != nil {
		return x.SecondsDuration
	}
	return 0
}

type GetReadStatisticsResponse_PerConfigurationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel configuration active during the reads these statistics were gathered for.
	ChannelConfiguration *ReturnedChannelConfiguration `protobuf:"bytes,1,opt,name=channel_configuration,json=channelConfiguration,proto3" json:"channel_configuration,omitempty"`
	// Map from classification names to statistics about read (chunks) with that classification.
	Classifications map[string]*GetReadStatisticsResponse_PerClassificationData `protobuf:"bytes,2,rep,name=classifications,proto3" json:"classifications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If statistics about complete reads were requested, this field may contain data for a final,
	// incomplete read (whose classification is therefore unknown).
	//
	// This field will not be set if read chunks were requested, or if the data capture happened to
	// end at a complete read boundary.
	Incomplete *GetReadStatisticsResponse_PerClassificationData `protobuf:"bytes,3,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
}

func (x *GetReadStatisticsResponse_PerConfigurationData) Reset() {
	*x = GetReadStatisticsResponse_PerConfigurationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadStatisticsResponse_PerConfigurationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadStatisticsResponse_PerConfigurationData) ProtoMessage() {}

func (x *GetReadStatisticsResponse_PerConfigurationData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadStatisticsResponse_PerConfigurationData.ProtoReflect.Descriptor instead.
func (*GetReadStatisticsResponse_PerConfigurationData) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{13, 3}
}

func (x *GetReadStatisticsResponse_PerConfigurationData) GetChannelConfiguration() *ReturnedChannelConfiguration {
	if x != nil {
		return x.ChannelConfiguration
	}
	return nil
}

func (x *GetReadStatisticsResponse_PerConfigurationData) GetClassifications() map[string]*GetReadStatisticsResponse_PerClassificationData {
	if x != nil {
		return x.Classifications
	}
	return nil
}

func (x *GetReadStatisticsResponse_PerConfigurationData) GetIncomplete() *GetReadStatisticsResponse_PerClassificationData {
	if x != nil {
		return x.Incomplete
	}
	return nil
}

type GetReadStatisticsResponse_PerChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data for each channel configuration seen on this channel.
	//
	// Note that each channel configuration will only appear once in this list, and this list is
	// *not* in any way ordered by time. The only reason it is not a map is because of restrictions
	// on map key types.
	Configurations []*GetReadStatisticsResponse_PerConfigurationData `protobuf:"bytes,6,rep,name=configurations,proto3" json:"configurations,omitempty"`
	// The number of samples collected before this channel's first sample.
	SamplesSinceStart uint64 `protobuf:"varint,2,opt,name=samples_since_start,json=samplesSinceStart,proto3" json:"samples_since_start,omitempty"`
	// The number of seconds elapsed since data acquisition started.
	//
	// This is the same as ``samples_since_start``, but expressed in seconds.
	SecondsSinceStart float64 `protobuf:"fixed64,3,opt,name=seconds_since_start,json=secondsSinceStart,proto3" json:"seconds_since_start,omitempty"`
	// The number of samples collected for this channel.
	SamplesDuration uint64 `protobuf:"varint,4,opt,name=samples_duration,json=samplesDuration,proto3" json:"samples_duration,omitempty"`
	// The number of seconds of data captured for this session.
	//
	// This is the same as ``samples_duration``, but expressed in seconds.
	SecondsDuration float64 `protobuf:"fixed64,5,opt,name=seconds_duration,json=secondsDuration,proto3" json:"seconds_duration,omitempty"`
}

func (x *GetReadStatisticsResponse_PerChannelData) Reset() {
	*x = GetReadStatisticsResponse_PerChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadStatisticsResponse_PerChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadStatisticsResponse_PerChannelData) ProtoMessage() {}

func (x *GetReadStatisticsResponse_PerChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadStatisticsResponse_PerChannelData.ProtoReflect.Descriptor instead.
func (*GetReadStatisticsResponse_PerChannelData) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{13, 4}
}

func (x *GetReadStatisticsResponse_PerChannelData) GetConfigurations() []*GetReadStatisticsResponse_PerConfigurationData {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *GetReadStatisticsResponse_PerChannelData) GetSamplesSinceStart() uint64 {
	if x != nil {
		return x.SamplesSinceStart
	}
	return 0
}

func (x *GetReadStatisticsResponse_PerChannelData) GetSecondsSinceStart() float64 {
	if x != nil {
		return x.SecondsSinceStart
	}
	return 0
}

func (x *GetReadStatisticsResponse_PerChannelData) GetSamplesDuration() uint64 {
	if x != nil {
		return x.SamplesDuration
	}
	return 0
}

func (x *GetReadStatisticsResponse_PerChannelData) GetSecondsDuration() float64 {
	if x != nil {
		return x.SecondsDuration
	}
	return 0
}

type GetExperimentYieldInfoResponse_CompleteReadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingChunks                   uint64 `protobuf:"varint,1,opt,name=pending_chunks,json=pendingChunks,proto3" json:"pending_chunks,omitempty"`
	PendingMemoryReads              uint64 `protobuf:"varint,2,opt,name=pending_memory_reads,json=pendingMemoryReads,proto3" json:"pending_memory_reads,omitempty"`
	PendingDiskReads                uint64 `protobuf:"varint,15,opt,name=pending_disk_reads,json=pendingDiskReads,proto3" json:"pending_disk_reads,omitempty"`
	PendingMultiDiskReads           uint64 `protobuf:"varint,3,opt,name=pending_multi_disk_reads,json=pendingMultiDiskReads,proto3" json:"pending_multi_disk_reads,omitempty"`
	PendingSkippedReads             uint64 `protobuf:"varint,4,opt,name=pending_skipped_reads,json=pendingSkippedReads,proto3" json:"pending_skipped_reads,omitempty"`
	PendingForceSkippedReads        uint64 `protobuf:"varint,5,opt,name=pending_force_skipped_reads,json=pendingForceSkippedReads,proto3" json:"pending_force_skipped_reads,omitempty"`
	ProcessedMemoryReads            uint64 `protobuf:"varint,6,opt,name=processed_memory_reads,json=processedMemoryReads,proto3" json:"processed_memory_reads,omitempty"`
	ProcessedDiskReads              uint64 `protobuf:"varint,7,opt,name=processed_disk_reads,json=processedDiskReads,proto3" json:"processed_disk_reads,omitempty"`
	ProcessedSkippedReads           uint64 `protobuf:"varint,8,opt,name=processed_skipped_reads,json=processedSkippedReads,proto3" json:"processed_skipped_reads,omitempty"`
	ProcessedForceSkippedReads      uint64 `protobuf:"varint,9,opt,name=processed_force_skipped_reads,json=processedForceSkippedReads,proto3" json:"processed_force_skipped_reads,omitempty"`
	StoredReadsBytesMemory          uint64 `protobuf:"varint,10,opt,name=stored_reads_bytes_memory,json=storedReadsBytesMemory,proto3" json:"stored_reads_bytes_memory,omitempty"`
	StoredReadSupportingBytesMemory uint64 `protobuf:"varint,16,opt,name=stored_read_supporting_bytes_memory,json=storedReadSupportingBytesMemory,proto3" json:"stored_read_supporting_bytes_memory,omitempty"`
	StoredReadsBytesDisk            uint64 `protobuf:"varint,11,opt,name=stored_reads_bytes_disk,json=storedReadsBytesDisk,proto3" json:"stored_reads_bytes_disk,omitempty"`
	DiscardedErrorBytes             uint64 `protobuf:"varint,12,opt,name=discarded_error_bytes,json=discardedErrorBytes,proto3" json:"discarded_error_bytes,omitempty"`
	ChannelsWritingToDisk           uint64 `protobuf:"varint,13,opt,name=channels_writing_to_disk,json=channelsWritingToDisk,proto3" json:"channels_writing_to_disk,omitempty"`
	ChannelsWritingToDiskTmp        uint64 `protobuf:"varint,14,opt,name=channels_writing_to_disk_tmp,json=channelsWritingToDiskTmp,proto3" json:"channels_writing_to_disk_tmp,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) Reset() {
	*x = GetExperimentYieldInfoResponse_CompleteReadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_CompleteReadInfo) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_CompleteReadInfo.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_CompleteReadInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetPendingChunks() uint64 {
	if x != nil {
		return x.PendingChunks
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetPendingMemoryReads() uint64 {
	if x != nil {
		return x.PendingMemoryReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetPendingDiskReads() uint64 {
	if x != nil {
		return x.PendingDiskReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetPendingMultiDiskReads() uint64 {
	if x != nil {
		return x.PendingMultiDiskReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetPendingSkippedReads() uint64 {
	if x != nil {
		return x.PendingSkippedReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetPendingForceSkippedReads() uint64 {
	if x != nil {
		return x.PendingForceSkippedReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetProcessedMemoryReads() uint64 {
	if x != nil {
		return x.ProcessedMemoryReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetProcessedDiskReads() uint64 {
	if x != nil {
		return x.ProcessedDiskReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetProcessedSkippedReads() uint64 {
	if x != nil {
		return x.ProcessedSkippedReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetProcessedForceSkippedReads() uint64 {
	if x != nil {
		return x.ProcessedForceSkippedReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetStoredReadsBytesMemory() uint64 {
	if x != nil {
		return x.StoredReadsBytesMemory
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetStoredReadSupportingBytesMemory() uint64 {
	if x != nil {
		return x.StoredReadSupportingBytesMemory
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetStoredReadsBytesDisk() uint64 {
	if x != nil {
		return x.StoredReadsBytesDisk
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetDiscardedErrorBytes() uint64 {
	if x != nil {
		return x.DiscardedErrorBytes
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetChannelsWritingToDisk() uint64 {
	if x != nil {
		return x.ChannelsWritingToDisk
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_CompleteReadInfo) GetChannelsWritingToDiskTmp() uint64 {
	if x != nil {
		return x.ChannelsWritingToDiskTmp
	}
	return 0
}

type GetExperimentYieldInfoResponse_AcquisitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawPerChannel        uint64 `protobuf:"varint,1,opt,name=raw_per_channel,json=rawPerChannel,proto3" json:"raw_per_channel,omitempty"`
	FrameDiscontinuities uint64 `protobuf:"varint,2,opt,name=frame_discontinuities,json=frameDiscontinuities,proto3" json:"frame_discontinuities,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_AcquisitionInfo) Reset() {
	*x = GetExperimentYieldInfoResponse_AcquisitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_AcquisitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_AcquisitionInfo) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_AcquisitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_AcquisitionInfo.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_AcquisitionInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 1}
}

func (x *GetExperimentYieldInfoResponse_AcquisitionInfo) GetRawPerChannel() uint64 {
	if x != nil {
		return x.RawPerChannel
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_AcquisitionInfo) GetFrameDiscontinuities() uint64 {
	if x != nil {
		return x.FrameDiscontinuities
	}
	return 0
}

type GetExperimentYieldInfoResponse_AnalyserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawPerChannel                 uint64 `protobuf:"varint,1,opt,name=raw_per_channel,json=rawPerChannel,proto3" json:"raw_per_channel,omitempty"`
	TotalSelectedRaw              uint64 `protobuf:"varint,2,opt,name=total_selected_raw,json=totalSelectedRaw,proto3" json:"total_selected_raw,omitempty"`
	TotalSelectedEvents           uint64 `protobuf:"varint,3,opt,name=total_selected_events,json=totalSelectedEvents,proto3" json:"total_selected_events,omitempty"`
	TotalEvents                   uint64 `protobuf:"varint,4,opt,name=total_events,json=totalEvents,proto3" json:"total_events,omitempty"`
	TotalReadChunks               uint64 `protobuf:"varint,5,opt,name=total_read_chunks,json=totalReadChunks,proto3" json:"total_read_chunks,omitempty"`
	CompletedSelectedReadsCount   uint64 `protobuf:"varint,6,opt,name=completed_selected_reads_count,json=completedSelectedReadsCount,proto3" json:"completed_selected_reads_count,omitempty"`
	CompletedUnselectedReadsCount uint64 `protobuf:"varint,7,opt,name=completed_unselected_reads_count,json=completedUnselectedReadsCount,proto3" json:"completed_unselected_reads_count,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) Reset() {
	*x = GetExperimentYieldInfoResponse_AnalyserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_AnalyserInfo) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_AnalyserInfo.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_AnalyserInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 2}
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) GetRawPerChannel() uint64 {
	if x != nil {
		return x.RawPerChannel
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) GetTotalSelectedRaw() uint64 {
	if x != nil {
		return x.TotalSelectedRaw
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) GetTotalSelectedEvents() uint64 {
	if x != nil {
		return x.TotalSelectedEvents
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) GetTotalEvents() uint64 {
	if x != nil {
		return x.TotalEvents
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) GetTotalReadChunks() uint64 {
	if x != nil {
		return x.TotalReadChunks
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) GetCompletedSelectedReadsCount() uint64 {
	if x != nil {
		return x.CompletedSelectedReadsCount
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_AnalyserInfo) GetCompletedUnselectedReadsCount() uint64 {
	if x != nil {
		return x.CompletedUnselectedReadsCount
	}
	return 0
}

type GetExperimentYieldInfoResponse_BulkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRaw    uint64 `protobuf:"varint,1,opt,name=total_raw,json=totalRaw,proto3" json:"total_raw,omitempty"`
	TotalEvents uint64 `protobuf:"varint,2,opt,name=total_events,json=totalEvents,proto3" json:"total_events,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_BulkInfo) Reset() {
	*x = GetExperimentYieldInfoResponse_BulkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_BulkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_BulkInfo) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_BulkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_BulkInfo.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_BulkInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 3}
}

func (x *GetExperimentYieldInfoResponse_BulkInfo) GetTotalRaw() uint64 {
	if x != nil {
		return x.TotalRaw
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BulkInfo) GetTotalEvents() uint64 {
	if x != nil {
		return x.TotalEvents
	}
	return 0
}

type GetExperimentYieldInfoResponse_HdfWriterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingCompressions      uint64 `protobuf:"varint,1,opt,name=pending_compressions,json=pendingCompressions,proto3" json:"pending_compressions,omitempty"`
	PendingWrites            uint64 `protobuf:"varint,2,opt,name=pending_writes,json=pendingWrites,proto3" json:"pending_writes,omitempty"`
	PendingHdfTasks          uint64 `protobuf:"varint,3,opt,name=pending_hdf_tasks,json=pendingHdfTasks,proto3" json:"pending_hdf_tasks,omitempty"`
	CompletedWrites          uint64 `protobuf:"varint,4,opt,name=completed_writes,json=completedWrites,proto3" json:"completed_writes,omitempty"`
	DatasetBytesDataInFlight uint64 `protobuf:"varint,5,opt,name=dataset_bytes_data_in_flight,json=datasetBytesDataInFlight,proto3" json:"dataset_bytes_data_in_flight,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_HdfWriterInfo) Reset() {
	*x = GetExperimentYieldInfoResponse_HdfWriterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_HdfWriterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_HdfWriterInfo) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_HdfWriterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_HdfWriterInfo.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_HdfWriterInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 4}
}

func (x *GetExperimentYieldInfoResponse_HdfWriterInfo) GetPendingCompressions() uint64 {
	if x != nil {
		return x.PendingCompressions
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfWriterInfo) GetPendingWrites() uint64 {
	if x != nil {
		return x.PendingWrites
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfWriterInfo) GetPendingHdfTasks() uint64 {
	if x != nil {
		return x.PendingHdfTasks
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfWriterInfo) GetCompletedWrites() uint64 {
	if x != nil {
		return x.CompletedWrites
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfWriterInfo) GetDatasetBytesDataInFlight() uint64 {
	if x != nil {
		return x.DatasetBytesDataInFlight
	}
	return 0
}

type GetExperimentYieldInfoResponse_BasecallStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadsInProgress            uint64 `protobuf:"varint,1,opt,name=reads_in_progress,json=readsInProgress,proto3" json:"reads_in_progress,omitempty"`
	ReadsProcessed             uint64 `protobuf:"varint,2,opt,name=reads_processed,json=readsProcessed,proto3" json:"reads_processed,omitempty"`
	ReadsSkipped               uint64 `protobuf:"varint,3,opt,name=reads_skipped,json=readsSkipped,proto3" json:"reads_skipped,omitempty"`
	ReadsForceSkipped          uint64 `protobuf:"varint,4,opt,name=reads_force_skipped,json=readsForceSkipped,proto3" json:"reads_force_skipped,omitempty"`
	ReadsFailedCallingFiltered uint64 `protobuf:"varint,5,opt,name=reads_failed_calling_filtered,json=readsFailedCallingFiltered,proto3" json:"reads_failed_calling_filtered,omitempty"`
	ReadsFailedCalling         uint64 `protobuf:"varint,6,opt,name=reads_failed_calling,json=readsFailedCalling,proto3" json:"reads_failed_calling,omitempty"`
	ReadsCalled                uint64 `protobuf:"varint,7,opt,name=reads_called,json=readsCalled,proto3" json:"reads_called,omitempty"`
	SamplesCalled              uint64 `protobuf:"varint,8,opt,name=samples_called,json=samplesCalled,proto3" json:"samples_called,omitempty"`
	SamplesSkipped             uint64 `protobuf:"varint,9,opt,name=samples_skipped,json=samplesSkipped,proto3" json:"samples_skipped,omitempty"`
	BasesPassedCalled          uint64 `protobuf:"varint,10,opt,name=bases_passed_called,json=basesPassedCalled,proto3" json:"bases_passed_called,omitempty"`
	BasesFailedCalled          uint64 `protobuf:"varint,12,opt,name=bases_failed_called,json=basesFailedCalled,proto3" json:"bases_failed_called,omitempty"`
	EventsCalled               uint64 `protobuf:"varint,11,opt,name=events_called,json=eventsCalled,proto3" json:"events_called,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) Reset() {
	*x = GetExperimentYieldInfoResponse_BasecallStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_BasecallStatistics) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_BasecallStatistics.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_BasecallStatistics) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 5}
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetReadsInProgress() uint64 {
	if x != nil {
		return x.ReadsInProgress
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetReadsProcessed() uint64 {
	if x != nil {
		return x.ReadsProcessed
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetReadsSkipped() uint64 {
	if x != nil {
		return x.ReadsSkipped
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetReadsForceSkipped() uint64 {
	if x != nil {
		return x.ReadsForceSkipped
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetReadsFailedCallingFiltered() uint64 {
	if x != nil {
		return x.ReadsFailedCallingFiltered
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetReadsFailedCalling() uint64 {
	if x != nil {
		return x.ReadsFailedCalling
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetReadsCalled() uint64 {
	if x != nil {
		return x.ReadsCalled
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetSamplesCalled() uint64 {
	if x != nil {
		return x.SamplesCalled
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetSamplesSkipped() uint64 {
	if x != nil {
		return x.SamplesSkipped
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetBasesPassedCalled() uint64 {
	if x != nil {
		return x.BasesPassedCalled
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetBasesFailedCalled() uint64 {
	if x != nil {
		return x.BasesFailedCalled
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_BasecallStatistics) GetEventsCalled() uint64 {
	if x != nil {
		return x.EventsCalled
	}
	return 0
}

type GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadsWritten               uint64 `protobuf:"varint,1,opt,name=reads_written,json=readsWritten,proto3" json:"reads_written,omitempty"`
	PassedReadsWritten         uint64 `protobuf:"varint,2,opt,name=passed_reads_written,json=passedReadsWritten,proto3" json:"passed_reads_written,omitempty"`
	FailedReadsWritten         uint64 `protobuf:"varint,3,opt,name=failed_reads_written,json=failedReadsWritten,proto3" json:"failed_reads_written,omitempty"`
	ForceSkippedReadsWritten   uint64 `protobuf:"varint,4,opt,name=force_skipped_reads_written,json=forceSkippedReadsWritten,proto3" json:"force_skipped_reads_written,omitempty"`
	RawBytesWritten            uint64 `protobuf:"varint,5,opt,name=raw_bytes_written,json=rawBytesWritten,proto3" json:"raw_bytes_written,omitempty"`
	FastqBytesWritten          uint64 `protobuf:"varint,6,opt,name=fastq_bytes_written,json=fastqBytesWritten,proto3" json:"fastq_bytes_written,omitempty"`
	BasecallEventsBytesWritten uint64 `protobuf:"varint,7,opt,name=basecall_events_bytes_written,json=basecallEventsBytesWritten,proto3" json:"basecall_events_bytes_written,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) Reset() {
	*x = GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 6}
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) GetReadsWritten() uint64 {
	if x != nil {
		return x.ReadsWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) GetPassedReadsWritten() uint64 {
	if x != nil {
		return x.PassedReadsWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) GetFailedReadsWritten() uint64 {
	if x != nil {
		return x.FailedReadsWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) GetForceSkippedReadsWritten() uint64 {
	if x != nil {
		return x.ForceSkippedReadsWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) GetRawBytesWritten() uint64 {
	if x != nil {
		return x.RawBytesWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) GetFastqBytesWritten() uint64 {
	if x != nil {
		return x.FastqBytesWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics) GetBasecallEventsBytesWritten() uint64 {
	if x != nil {
		return x.BasecallEventsBytesWritten
	}
	return 0
}

type GetExperimentYieldInfoResponse_FastqReadWritingStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassedReadsWritten   uint64 `protobuf:"varint,1,opt,name=passed_reads_written,json=passedReadsWritten,proto3" json:"passed_reads_written,omitempty"`
	SkippedReads         uint64 `protobuf:"varint,2,opt,name=skipped_reads,json=skippedReads,proto3" json:"skipped_reads,omitempty"`
	ForcedSkipped        uint64 `protobuf:"varint,3,opt,name=forced_skipped,json=forcedSkipped,proto3" json:"forced_skipped,omitempty"`
	FailedReadsWritten   uint64 `protobuf:"varint,4,opt,name=failed_reads_written,json=failedReadsWritten,proto3" json:"failed_reads_written,omitempty"`
	FailedReadsDiscarded uint64 `protobuf:"varint,5,opt,name=failed_reads_discarded,json=failedReadsDiscarded,proto3" json:"failed_reads_discarded,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_FastqReadWritingStatistics) Reset() {
	*x = GetExperimentYieldInfoResponse_FastqReadWritingStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_FastqReadWritingStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_FastqReadWritingStatistics) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_FastqReadWritingStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_FastqReadWritingStatistics.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_FastqReadWritingStatistics) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 7}
}

func (x *GetExperimentYieldInfoResponse_FastqReadWritingStatistics) GetPassedReadsWritten() uint64 {
	if x != nil {
		return x.PassedReadsWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FastqReadWritingStatistics) GetSkippedReads() uint64 {
	if x != nil {
		return x.SkippedReads
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FastqReadWritingStatistics) GetForcedSkipped() uint64 {
	if x != nil {
		return x.ForcedSkipped
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FastqReadWritingStatistics) GetFailedReadsWritten() uint64 {
	if x != nil {
		return x.FailedReadsWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FastqReadWritingStatistics) GetFailedReadsDiscarded() uint64 {
	if x != nil {
		return x.FailedReadsDiscarded
	}
	return 0
}

type GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadChunksWritten   uint64 `protobuf:"varint,1,opt,name=read_chunks_written,json=readChunksWritten,proto3" json:"read_chunks_written,omitempty"`
	ReadChunksDiscarded uint64 `protobuf:"varint,2,opt,name=read_chunks_discarded,json=readChunksDiscarded,proto3" json:"read_chunks_discarded,omitempty"`
	ReadsWritten        uint64 `protobuf:"varint,3,opt,name=reads_written,json=readsWritten,proto3" json:"reads_written,omitempty"`
	ReadsDiscarded      uint64 `protobuf:"varint,4,opt,name=reads_discarded,json=readsDiscarded,proto3" json:"reads_discarded,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) Reset() {
	*x = GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 8}
}

func (x *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) GetReadChunksWritten() uint64 {
	if x != nil {
		return x.ReadChunksWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) GetReadChunksDiscarded() uint64 {
	if x != nil {
		return x.ReadChunksDiscarded
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) GetReadsWritten() uint64 {
	if x != nil {
		return x.ReadsWritten
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics) GetReadsDiscarded() uint64 {
	if x != nil {
		return x.ReadsDiscarded
	}
	return 0
}

type GetExperimentYieldInfoResponse_FileOperationQueueProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingOperations            uint64                                                                  `protobuf:"varint,1,opt,name=pending_operations,json=pendingOperations,proto3" json:"pending_operations,omitempty"`
	CompleteSuccessfulOperations uint64                                                                  `protobuf:"varint,2,opt,name=complete_successful_operations,json=completeSuccessfulOperations,proto3" json:"complete_successful_operations,omitempty"`
	CompleteFailedOperations     uint64                                                                  `protobuf:"varint,3,opt,name=complete_failed_operations,json=completeFailedOperations,proto3" json:"complete_failed_operations,omitempty"`
	BytesToMovePosted            uint64                                                                  `protobuf:"varint,4,opt,name=bytes_to_move_posted,json=bytesToMovePosted,proto3" json:"bytes_to_move_posted,omitempty"`
	BytesToMoveFailed            uint64                                                                  `protobuf:"varint,5,opt,name=bytes_to_move_failed,json=bytesToMoveFailed,proto3" json:"bytes_to_move_failed,omitempty"`
	BytesToMoveCompleted         uint64                                                                  `protobuf:"varint,6,opt,name=bytes_to_move_completed,json=bytesToMoveCompleted,proto3" json:"bytes_to_move_completed,omitempty"`
	Fast5                        *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo `protobuf:"bytes,7,opt,name=fast5,proto3" json:"fast5,omitempty"`
	Fastq                        *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo `protobuf:"bytes,8,opt,name=fastq,proto3" json:"fastq,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) Reset() {
	*x = GetExperimentYieldInfoResponse_FileOperationQueueProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_FileOperationQueueProgress) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_FileOperationQueueProgress.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_FileOperationQueueProgress) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 9}
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) GetPendingOperations() uint64 {
	if x != nil {
		return x.PendingOperations
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) GetCompleteSuccessfulOperations() uint64 {
	if x != nil {
		return x.CompleteSuccessfulOperations
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) GetCompleteFailedOperations() uint64 {
	if x != nil {
		return x.CompleteFailedOperations
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) GetBytesToMovePosted() uint64 {
	if x != nil {
		return x.BytesToMovePosted
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) GetBytesToMoveFailed() uint64 {
	if x != nil {
		return x.BytesToMoveFailed
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) GetBytesToMoveCompleted() uint64 {
	if x != nil {
		return x.BytesToMoveCompleted
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) GetFast5() *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo {
	if x != nil {
		return x.Fast5
	}
	return nil
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress) GetFastq() *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo {
	if x != nil {
		return x.Fastq
	}
	return nil
}

type GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesMovedSuccessfully uint64 `protobuf:"varint,1,opt,name=files_moved_successfully,json=filesMovedSuccessfully,proto3" json:"files_moved_successfully,omitempty"`
	FilesMovedToFallback   uint64 `protobuf:"varint,2,opt,name=files_moved_to_fallback,json=filesMovedToFallback,proto3" json:"files_moved_to_fallback,omitempty"`
	FilesFailedToMove      uint64 `protobuf:"varint,3,opt,name=files_failed_to_move,json=filesFailedToMove,proto3" json:"files_failed_to_move,omitempty"`
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo) Reset() {
	*x = GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo) ProtoMessage() {}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo.ProtoReflect.Descriptor instead.
func (*GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_data_proto_rawDescGZIP(), []int{19, 9, 0}
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo) GetFilesMovedSuccessfully() uint64 {
	if x != nil {
		return x.FilesMovedSuccessfully
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo) GetFilesMovedToFallback() uint64 {
	if x != nil {
		return x.FilesMovedToFallback
	}
	return 0
}

func (x *GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo) GetFilesFailedToMove() uint64 {
	if x != nil {
		return x.FilesFailedToMove
	}
	return 0
}

var File_minknow_api_data_proto protoreflect.FileDescriptor

var file_minknow_api_data_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x22, 0xc3, 0x03,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xc2,
	0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x61, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfc, 0x03, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x0d, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x69, 0x61,
	0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xcd, 0x01, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x69, 0x67, 0x45, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x22, 0xf6, 0x02, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88, 0xb5,
	0x18, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x36, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42,
	0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0x9c, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69,
	0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x62, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x77, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x86, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d,
	0x69, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0d,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88,
	0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x25, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x9f, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x69,
	0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x77,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x61, 0x22, 0xde, 0x08, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x75, 0x70, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x2b, 0x0a, 0x0d, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x0a,
	0x0f, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0xb3, 0x02, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f,
	0x0a, 0x07, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x07, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x63, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x92, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x55,
	0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x46, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x61, 0x78,
	0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f,
	0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x42, 0x19, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x51, 0x0a, 0x07, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48,
	0x0a, 0x0b, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x41, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xa7, 0x07, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x60,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x1a, 0xb3, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x1a, 0xd6, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4b, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x1a,
	0x6c, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1b, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x6e, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x2a, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x0d, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x1a, 0xdd, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x0f, 0x0a, 0x03, 0x73, 0x5f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x6e, 0x12, 0x0f, 0x0a, 0x03, 0x71, 0x5f, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x71, 0x35, 0x12, 0x11, 0x0a, 0x04, 0x71, 0x5f, 0x31, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x71, 0x31, 0x30, 0x12, 0x11, 0x0a, 0x04, 0x71, 0x5f, 0x32, 0x35, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x32, 0x35, 0x12, 0x11, 0x0a, 0x04, 0x71, 0x5f, 0x37, 0x35,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x37, 0x35, 0x12, 0x11, 0x0a, 0x04, 0x71,
	0x5f, 0x39, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x39, 0x30, 0x12, 0x11,
	0x0a, 0x04, 0x71, 0x5f, 0x39, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x39,
	0x35, 0x1a, 0x5c, 0x0a, 0x0f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x73,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x53,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0xa5, 0x03, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x13, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x12,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x66, 0x0a, 0x10, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe9, 0x03, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x65, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x85, 0x01, 0x0a, 0x14,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xb0, 0x02, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x68, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x18, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x6f, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x1a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd2, 0x28, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x10, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x09, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x75, 0x6c, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x66, 0x0a, 0x0f, 0x68, 0x64, 0x66, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48,
	0x64, 0x66, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x68, 0x64,
	0x66, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x78, 0x0a, 0x15, 0x62,
	0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x14, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x22, 0x68, 0x64, 0x66, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x69, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x64, 0x66, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61,
	0x64, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x1e, 0x68, 0x64, 0x66, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x64,
	0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x1d, 0x66, 0x61, 0x73, 0x74, 0x71, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x73,
	0x74, 0x71, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1a, 0x66, 0x61, 0x73, 0x74, 0x71, 0x52, 0x65,
	0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x8e, 0x01,
	0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x95,
	0x07, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x61, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x23, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x3e, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x74, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44,
	0x69, 0x73, 0x6b, 0x54, 0x6d, 0x70, 0x1a, 0x6e, 0x0a, 0x0f, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x77,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xf5, 0x02, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x72, 0x61, 0x77, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x61, 0x77, 0x12, 0x32, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x4a,
	0x0a, 0x08, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x80, 0x02, 0x0a, 0x0d, 0x48,
	0x64, 0x66, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x14,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x64, 0x66, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x64, 0x66, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x1c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xab, 0x04,
	0x0a, 0x12, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x64, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x72, 0x65, 0x61, 0x64, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x53,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x86, 0x03, 0x0a, 0x1d,
	0x48, 0x64, 0x66, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x72, 0x61, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x73, 0x74, 0x71, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x66, 0x61, 0x73, 0x74, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x1a, 0x82, 0x02, 0x0a, 0x1a, 0x46, 0x61, 0x73, 0x74, 0x71, 0x52, 0x65,
	0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x57, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x1a, 0xd1, 0x01, 0x0a, 0x1d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x1a, 0xfb, 0x05,
	0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2f, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x05, 0x66, 0x61, 0x73, 0x74,
	0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x66, 0x61, 0x73, 0x74, 0x35, 0x12, 0x6e, 0x0a, 0x05, 0x66, 0x61, 0x73, 0x74,
	0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x66, 0x61, 0x73, 0x74, 0x71, 0x1a, 0xb0, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x64,
	0x54, 0x6f, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x32, 0x8b, 0x09, 0x0a, 0x0b,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x12, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12,
	0x64, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x6c, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x73, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x15,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x28, 0x01, 0x30, 0x01, 0x12, 0x73,
	0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x42, 0x5c, 0x0a, 0x1c, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75, 0x72, 0x62, 0x61, 0x73,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0xa2,
	0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minknow_api_data_proto_rawDescOnce sync.Once
	file_minknow_api_data_proto_rawDescData = file_minknow_api_data_proto_rawDesc
)

func file_minknow_api_data_proto_rawDescGZIP() []byte {
	file_minknow_api_data_proto_rawDescOnce.Do(func() {
		file_minknow_api_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_data_proto_rawDescData)
	})
	return file_minknow_api_data_proto_rawDescData
}

var file_minknow_api_data_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_minknow_api_data_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_minknow_api_data_proto_goTypes = []interface{}{
	(GetDataTypesResponse_DataType_Type)(0),            // 0: minknow_api.data.GetDataTypesResponse.DataType.Type
	(GetLiveReadsRequest_RawDataType)(0),               // 1: minknow_api.data.GetLiveReadsRequest.RawDataType
	(GetLiveReadsResponse_ActionResponse_Response)(0),  // 2: minknow_api.data.GetLiveReadsResponse.ActionResponse.Response
	(GetReadStatisticsRequest_ReadSplit)(0),            // 3: minknow_api.data.GetReadStatisticsRequest.ReadSplit
	(*GetChannelStatesRequest)(nil),                    // 4: minknow_api.data.GetChannelStatesRequest
	(*GetChannelStatesResponse)(nil),                   // 5: minknow_api.data.GetChannelStatesResponse
	(*GetDataTypesRequest)(nil),                        // 6: minknow_api.data.GetDataTypesRequest
	(*GetDataTypesResponse)(nil),                       // 7: minknow_api.data.GetDataTypesResponse
	(*GetSignalBytesRequest)(nil),                      // 8: minknow_api.data.GetSignalBytesRequest
	(*GetSignalBytesResponse)(nil),                     // 9: minknow_api.data.GetSignalBytesResponse
	(*GetSignalMinMaxRequest)(nil),                     // 10: minknow_api.data.GetSignalMinMaxRequest
	(*GetSignalMinMaxResponse)(nil),                    // 11: minknow_api.data.GetSignalMinMaxResponse
	(*GetLiveReadsRequest)(nil),                        // 12: minknow_api.data.GetLiveReadsRequest
	(*GetLiveReadsResponse)(nil),                       // 13: minknow_api.data.GetLiveReadsResponse
	(*ResetChannelStatesRequest)(nil),                  // 14: minknow_api.data.ResetChannelStatesRequest
	(*ResetChannelStatesResponse)(nil),                 // 15: minknow_api.data.ResetChannelStatesResponse
	(*GetReadStatisticsRequest)(nil),                   // 16: minknow_api.data.GetReadStatisticsRequest
	(*GetReadStatisticsResponse)(nil),                  // 17: minknow_api.data.GetReadStatisticsResponse
	(*LockChannelStatesRequest)(nil),                   // 18: minknow_api.data.LockChannelStatesRequest
	(*LockChannelStatesResponse)(nil),                  // 19: minknow_api.data.LockChannelStatesResponse
	(*UnlockChannelStatesRequest)(nil),                 // 20: minknow_api.data.UnlockChannelStatesRequest
	(*UnlockChannelStatesResponse)(nil),                // 21: minknow_api.data.UnlockChannelStatesResponse
	(*GetExperimentYieldInfoRequest)(nil),              // 22: minknow_api.data.GetExperimentYieldInfoRequest
	(*GetExperimentYieldInfoResponse)(nil),             // 23: minknow_api.data.GetExperimentYieldInfoResponse
	(*GetChannelStatesResponse_ChannelStateData)(nil),  // 24: minknow_api.data.GetChannelStatesResponse.ChannelStateData
	(*GetDataTypesResponse_DataType)(nil),              // 25: minknow_api.data.GetDataTypesResponse.DataType
	(*GetSignalBytesResponse_ChannelConfigChange)(nil), // 26: minknow_api.data.GetSignalBytesResponse.ChannelConfigChange
	(*GetSignalBytesResponse_ChannelData)(nil),         // 27: minknow_api.data.GetSignalBytesResponse.ChannelData
	(*GetSignalMinMaxResponse_ChannelData)(nil),        // 28: minknow_api.data.GetSignalMinMaxResponse.ChannelData
	(*GetLiveReadsRequest_UnblockAction)(nil),          // 29: minknow_api.data.GetLiveReadsRequest.UnblockAction
	(*GetLiveReadsRequest_StopFurtherData)(nil),        // 30: minknow_api.data.GetLiveReadsRequest.StopFurtherData
	(*GetLiveReadsRequest_Action)(nil),                 // 31: minknow_api.data.GetLiveReadsRequest.Action
	(*GetLiveReadsRequest_StreamSetup)(nil),            // 32: minknow_api.data.GetLiveReadsRequest.StreamSetup
	(*GetLiveReadsRequest_Actions)(nil),                // 33: minknow_api.data.GetLiveReadsRequest.Actions
	(*GetLiveReadsResponse_ReadData)(nil),              // 34: minknow_api.data.GetLiveReadsResponse.ReadData
	(*GetLiveReadsResponse_ActionResponse)(nil),        // 35: minknow_api.data.GetLiveReadsResponse.ActionResponse
	nil, // 36: minknow_api.data.GetLiveReadsResponse.ChannelsEntry
	(*GetReadStatisticsResponse_Statistics)(nil),            // 37: minknow_api.data.GetReadStatisticsResponse.Statistics
	(*GetReadStatisticsResponse_ChunkStatistics)(nil),       // 38: minknow_api.data.GetReadStatisticsResponse.ChunkStatistics
	(*GetReadStatisticsResponse_PerClassificationData)(nil), // 39: minknow_api.data.GetReadStatisticsResponse.PerClassificationData
	(*GetReadStatisticsResponse_PerConfigurationData)(nil),  // 40: minknow_api.data.GetReadStatisticsResponse.PerConfigurationData
	(*GetReadStatisticsResponse_PerChannelData)(nil),        // 41: minknow_api.data.GetReadStatisticsResponse.PerChannelData
	nil, // 42: minknow_api.data.GetReadStatisticsResponse.PerConfigurationData.ClassificationsEntry
	(*GetExperimentYieldInfoResponse_CompleteReadInfo)(nil),                        // 43: minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo
	(*GetExperimentYieldInfoResponse_AcquisitionInfo)(nil),                         // 44: minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo
	(*GetExperimentYieldInfoResponse_AnalyserInfo)(nil),                            // 45: minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo
	(*GetExperimentYieldInfoResponse_BulkInfo)(nil),                                // 46: minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo
	(*GetExperimentYieldInfoResponse_HdfWriterInfo)(nil),                           // 47: minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo
	(*GetExperimentYieldInfoResponse_BasecallStatistics)(nil),                      // 48: minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics
	(*GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics)(nil),           // 49: minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics
	(*GetExperimentYieldInfoResponse_FastqReadWritingStatistics)(nil),              // 50: minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics
	(*GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics)(nil),           // 51: minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics
	(*GetExperimentYieldInfoResponse_FileOperationQueueProgress)(nil),              // 52: minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress
	(*GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo)(nil), // 53: minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo
	(*wrapperspb.BoolValue)(nil),                                                   // 54: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),                                                    // 55: google.protobuf.Duration
	(*ReturnedChannelConfiguration)(nil),                                           // 56: minknow_api.device.ReturnedChannelConfiguration
}
var file_minknow_api_data_proto_depIdxs = []int32{
	54, // 0: minknow_api.data.GetChannelStatesRequest.use_channel_states_ids:type_name -> google.protobuf.BoolValue
	55, // 1: minknow_api.data.GetChannelStatesRequest.heartbeat:type_name -> google.protobuf.Duration
	24, // 2: minknow_api.data.GetChannelStatesResponse.channel_states:type_name -> minknow_api.data.GetChannelStatesResponse.ChannelStateData
	25, // 3: minknow_api.data.GetDataTypesResponse.uncalibrated_signal:type_name -> minknow_api.data.GetDataTypesResponse.DataType
	25, // 4: minknow_api.data.GetDataTypesResponse.calibrated_signal:type_name -> minknow_api.data.GetDataTypesResponse.DataType
	25, // 5: minknow_api.data.GetDataTypesResponse.bias_voltages:type_name -> minknow_api.data.GetDataTypesResponse.DataType
	27, // 6: minknow_api.data.GetSignalBytesResponse.channels:type_name -> minknow_api.data.GetSignalBytesResponse.ChannelData
	28, // 7: minknow_api.data.GetSignalMinMaxResponse.channels:type_name -> minknow_api.data.GetSignalMinMaxResponse.ChannelData
	32, // 8: minknow_api.data.GetLiveReadsRequest.setup:type_name -> minknow_api.data.GetLiveReadsRequest.StreamSetup
	33, // 9: minknow_api.data.GetLiveReadsRequest.actions:type_name -> minknow_api.data.GetLiveReadsRequest.Actions
	36, // 10: minknow_api.data.GetLiveReadsResponse.channels:type_name -> minknow_api.data.GetLiveReadsResponse.ChannelsEntry
	35, // 11: minknow_api.data.GetLiveReadsResponse.action_responses:type_name -> minknow_api.data.GetLiveReadsResponse.ActionResponse
	3,  // 12: minknow_api.data.GetReadStatisticsRequest.read_split:type_name -> minknow_api.data.GetReadStatisticsRequest.ReadSplit
	41, // 13: minknow_api.data.GetReadStatisticsResponse.channels:type_name -> minknow_api.data.GetReadStatisticsResponse.PerChannelData
	43, // 14: minknow_api.data.GetExperimentYieldInfoResponse.complete_read_info:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo
	44, // 15: minknow_api.data.GetExperimentYieldInfoResponse.acquisition_info:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo
	45, // 16: minknow_api.data.GetExperimentYieldInfoResponse.analyser_info:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo
	46, // 17: minknow_api.data.GetExperimentYieldInfoResponse.bulk_info:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo
	47, // 18: minknow_api.data.GetExperimentYieldInfoResponse.hdf_writer_info:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo
	48, // 19: minknow_api.data.GetExperimentYieldInfoResponse.basecaller_statistics:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics
	49, // 20: minknow_api.data.GetExperimentYieldInfoResponse.hdf_multi_read_writing_statisitics:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics
	50, // 21: minknow_api.data.GetExperimentYieldInfoResponse.fastq_read_writing_statistics:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics
	51, // 22: minknow_api.data.GetExperimentYieldInfoResponse.protobuf_read_writing_statistics:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics
	52, // 23: minknow_api.data.GetExperimentYieldInfoResponse.file_operation_queue_progress:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress
	56, // 24: minknow_api.data.GetChannelStatesResponse.ChannelStateData.config:type_name -> minknow_api.device.ReturnedChannelConfiguration
	0,  // 25: minknow_api.data.GetDataTypesResponse.DataType.type:type_name -> minknow_api.data.GetDataTypesResponse.DataType.Type
	56, // 26: minknow_api.data.GetSignalBytesResponse.ChannelConfigChange.config:type_name -> minknow_api.device.ReturnedChannelConfiguration
	26, // 27: minknow_api.data.GetSignalBytesResponse.ChannelData.config_changes:type_name -> minknow_api.data.GetSignalBytesResponse.ChannelConfigChange
	29, // 28: minknow_api.data.GetLiveReadsRequest.Action.unblock:type_name -> minknow_api.data.GetLiveReadsRequest.UnblockAction
	30, // 29: minknow_api.data.GetLiveReadsRequest.Action.stop_further_data:type_name -> minknow_api.data.GetLiveReadsRequest.StopFurtherData
	1,  // 30: minknow_api.data.GetLiveReadsRequest.StreamSetup.raw_data_type:type_name -> minknow_api.data.GetLiveReadsRequest.RawDataType
	31, // 31: minknow_api.data.GetLiveReadsRequest.Actions.actions:type_name -> minknow_api.data.GetLiveReadsRequest.Action
	2,  // 32: minknow_api.data.GetLiveReadsResponse.ActionResponse.response:type_name -> minknow_api.data.GetLiveReadsResponse.ActionResponse.Response
	34, // 33: minknow_api.data.GetLiveReadsResponse.ChannelsEntry.value:type_name -> minknow_api.data.GetLiveReadsResponse.ReadData
	37, // 34: minknow_api.data.GetReadStatisticsResponse.PerClassificationData.duration_statistics:type_name -> minknow_api.data.GetReadStatisticsResponse.Statistics
	37, // 35: minknow_api.data.GetReadStatisticsResponse.PerClassificationData.current_statistics:type_name -> minknow_api.data.GetReadStatisticsResponse.Statistics
	38, // 36: minknow_api.data.GetReadStatisticsResponse.PerClassificationData.chunk_statistics:type_name -> minknow_api.data.GetReadStatisticsResponse.ChunkStatistics
	56, // 37: minknow_api.data.GetReadStatisticsResponse.PerConfigurationData.channel_configuration:type_name -> minknow_api.device.ReturnedChannelConfiguration
	42, // 38: minknow_api.data.GetReadStatisticsResponse.PerConfigurationData.classifications:type_name -> minknow_api.data.GetReadStatisticsResponse.PerConfigurationData.ClassificationsEntry
	39, // 39: minknow_api.data.GetReadStatisticsResponse.PerConfigurationData.incomplete:type_name -> minknow_api.data.GetReadStatisticsResponse.PerClassificationData
	40, // 40: minknow_api.data.GetReadStatisticsResponse.PerChannelData.configurations:type_name -> minknow_api.data.GetReadStatisticsResponse.PerConfigurationData
	39, // 41: minknow_api.data.GetReadStatisticsResponse.PerConfigurationData.ClassificationsEntry.value:type_name -> minknow_api.data.GetReadStatisticsResponse.PerClassificationData
	53, // 42: minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.fast5:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo
	53, // 43: minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.fastq:type_name -> minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo
	4,  // 44: minknow_api.data.DataService.get_channel_states:input_type -> minknow_api.data.GetChannelStatesRequest
	6,  // 45: minknow_api.data.DataService.get_data_types:input_type -> minknow_api.data.GetDataTypesRequest
	8,  // 46: minknow_api.data.DataService.get_signal_bytes:input_type -> minknow_api.data.GetSignalBytesRequest
	10, // 47: minknow_api.data.DataService.get_signal_min_max:input_type -> minknow_api.data.GetSignalMinMaxRequest
	14, // 48: minknow_api.data.DataService.reset_channel_states:input_type -> minknow_api.data.ResetChannelStatesRequest
	18, // 49: minknow_api.data.DataService.lock_channel_states:input_type -> minknow_api.data.LockChannelStatesRequest
	20, // 50: minknow_api.data.DataService.unlock_channel_states:input_type -> minknow_api.data.UnlockChannelStatesRequest
	12, // 51: minknow_api.data.DataService.get_live_reads:input_type -> minknow_api.data.GetLiveReadsRequest
	16, // 52: minknow_api.data.DataService.get_read_statistics:input_type -> minknow_api.data.GetReadStatisticsRequest
	22, // 53: minknow_api.data.DataService.get_experiment_yield_info:input_type -> minknow_api.data.GetExperimentYieldInfoRequest
	5,  // 54: minknow_api.data.DataService.get_channel_states:output_type -> minknow_api.data.GetChannelStatesResponse
	7,  // 55: minknow_api.data.DataService.get_data_types:output_type -> minknow_api.data.GetDataTypesResponse
	9,  // 56: minknow_api.data.DataService.get_signal_bytes:output_type -> minknow_api.data.GetSignalBytesResponse
	11, // 57: minknow_api.data.DataService.get_signal_min_max:output_type -> minknow_api.data.GetSignalMinMaxResponse
	15, // 58: minknow_api.data.DataService.reset_channel_states:output_type -> minknow_api.data.ResetChannelStatesResponse
	19, // 59: minknow_api.data.DataService.lock_channel_states:output_type -> minknow_api.data.LockChannelStatesResponse
	21, // 60: minknow_api.data.DataService.unlock_channel_states:output_type -> minknow_api.data.UnlockChannelStatesResponse
	13, // 61: minknow_api.data.DataService.get_live_reads:output_type -> minknow_api.data.GetLiveReadsResponse
	17, // 62: minknow_api.data.DataService.get_read_statistics:output_type -> minknow_api.data.GetReadStatisticsResponse
	23, // 63: minknow_api.data.DataService.get_experiment_yield_info:output_type -> minknow_api.data.GetExperimentYieldInfoResponse
	54, // [54:64] is the sub-list for method output_type
	44, // [44:54] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_minknow_api_data_proto_init() }
func file_minknow_api_data_proto_init() {
	if File_minknow_api_data_proto != nil {
		return
	}
	file_minknow_api_rpc_options_proto_init()
	file_minknow_api_device_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalBytesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalBytesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalMinMaxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalMinMaxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetChannelStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetChannelStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockChannelStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockChannelStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockChannelStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockChannelStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelStatesResponse_ChannelStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataTypesResponse_DataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalBytesResponse_ChannelConfigChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalBytesResponse_ChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignalMinMaxResponse_ChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsRequest_UnblockAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsRequest_StopFurtherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsRequest_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsRequest_StreamSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsRequest_Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsResponse_ReadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveReadsResponse_ActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadStatisticsResponse_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadStatisticsResponse_ChunkStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadStatisticsResponse_PerClassificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadStatisticsResponse_PerConfigurationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadStatisticsResponse_PerChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_CompleteReadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_AcquisitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_AnalyserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_BulkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_HdfWriterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_BasecallStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_FastqReadWritingStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_FileOperationQueueProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minknow_api_data_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GetSignalBytesRequest_Seconds)(nil),
		(*GetSignalBytesRequest_Samples)(nil),
	}
	file_minknow_api_data_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GetLiveReadsRequest_Setup)(nil),
		(*GetLiveReadsRequest_Actions_)(nil),
	}
	file_minknow_api_data_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GetReadStatisticsRequest_Seconds)(nil),
		(*GetReadStatisticsRequest_Samples)(nil),
	}
	file_minknow_api_data_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*GetChannelStatesResponse_ChannelStateData_StateId)(nil),
		(*GetChannelStatesResponse_ChannelStateData_StateName)(nil),
	}
	file_minknow_api_data_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*GetLiveReadsRequest_Action_Id)(nil),
		(*GetLiveReadsRequest_Action_Number)(nil),
		(*GetLiveReadsRequest_Action_Unblock)(nil),
		(*GetLiveReadsRequest_Action_StopFurtherData)(nil),
	}
	file_minknow_api_data_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSamples)(nil),
		(*GetLiveReadsRequest_StreamSetup_MaxUnblockReadLengthSeconds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_data_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_data_proto_goTypes,
		DependencyIndexes: file_minknow_api_data_proto_depIdxs,
		EnumInfos:         file_minknow_api_data_proto_enumTypes,
		MessageInfos:      file_minknow_api_data_proto_msgTypes,
	}.Build()
	File_minknow_api_data_proto = out.File
	file_minknow_api_data_proto_rawDesc = nil
	file_minknow_api_data_proto_goTypes = nil
	file_minknow_api_data_proto_depIdxs = nil
}
