// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/minion_device.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SamplingFrequencyParameters_ClockSpeed int32

const (
	SamplingFrequencyParameters_CLOCK_128MHz SamplingFrequencyParameters_ClockSpeed = 0
	SamplingFrequencyParameters_CLOCK_64MHz  SamplingFrequencyParameters_ClockSpeed = 1
	SamplingFrequencyParameters_CLOCK_32MHz  SamplingFrequencyParameters_ClockSpeed = 2
	SamplingFrequencyParameters_CLOCK_16MHz  SamplingFrequencyParameters_ClockSpeed = 3
	SamplingFrequencyParameters_CLOCK_8MHz   SamplingFrequencyParameters_ClockSpeed = 4
)

// Enum value maps for SamplingFrequencyParameters_ClockSpeed.
var (
	SamplingFrequencyParameters_ClockSpeed_name = map[int32]string{
		0: "CLOCK_128MHz",
		1: "CLOCK_64MHz",
		2: "CLOCK_32MHz",
		3: "CLOCK_16MHz",
		4: "CLOCK_8MHz",
	}
	SamplingFrequencyParameters_ClockSpeed_value = map[string]int32{
		"CLOCK_128MHz": 0,
		"CLOCK_64MHz":  1,
		"CLOCK_32MHz":  2,
		"CLOCK_16MHz":  3,
		"CLOCK_8MHz":   4,
	}
)

func (x SamplingFrequencyParameters_ClockSpeed) Enum() *SamplingFrequencyParameters_ClockSpeed {
	p := new(SamplingFrequencyParameters_ClockSpeed)
	*p = x
	return p
}

func (x SamplingFrequencyParameters_ClockSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplingFrequencyParameters_ClockSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_minion_device_proto_enumTypes[0].Descriptor()
}

func (SamplingFrequencyParameters_ClockSpeed) Type() protoreflect.EnumType {
	return &file_minknow_api_minion_device_proto_enumTypes[0]
}

func (x SamplingFrequencyParameters_ClockSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplingFrequencyParameters_ClockSpeed.Descriptor instead.
func (SamplingFrequencyParameters_ClockSpeed) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{1, 0}
}

type MinionDeviceSettings_Gain int32

const (
	MinionDeviceSettings_GAIN_KEEP MinionDeviceSettings_Gain = 0
	MinionDeviceSettings_GAIN_1    MinionDeviceSettings_Gain = 1
	MinionDeviceSettings_GAIN_5    MinionDeviceSettings_Gain = 2
)

// Enum value maps for MinionDeviceSettings_Gain.
var (
	MinionDeviceSettings_Gain_name = map[int32]string{
		0: "GAIN_KEEP",
		1: "GAIN_1",
		2: "GAIN_5",
	}
	MinionDeviceSettings_Gain_value = map[string]int32{
		"GAIN_KEEP": 0,
		"GAIN_1":    1,
		"GAIN_5":    2,
	}
)

func (x MinionDeviceSettings_Gain) Enum() *MinionDeviceSettings_Gain {
	p := new(MinionDeviceSettings_Gain)
	*p = x
	return p
}

func (x MinionDeviceSettings_Gain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinionDeviceSettings_Gain) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_minion_device_proto_enumTypes[1].Descriptor()
}

func (MinionDeviceSettings_Gain) Type() protoreflect.EnumType {
	return &file_minknow_api_minion_device_proto_enumTypes[1]
}

func (x MinionDeviceSettings_Gain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinionDeviceSettings_Gain.Descriptor instead.
func (MinionDeviceSettings_Gain) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{2, 0}
}

type MinionDeviceSettings_Decimation int32

const (
	MinionDeviceSettings_DECIMATION_KEEP MinionDeviceSettings_Decimation = 0
	MinionDeviceSettings_DECIMATION_32   MinionDeviceSettings_Decimation = 1
	MinionDeviceSettings_DECIMATION_64   MinionDeviceSettings_Decimation = 2
)

// Enum value maps for MinionDeviceSettings_Decimation.
var (
	MinionDeviceSettings_Decimation_name = map[int32]string{
		0: "DECIMATION_KEEP",
		1: "DECIMATION_32",
		2: "DECIMATION_64",
	}
	MinionDeviceSettings_Decimation_value = map[string]int32{
		"DECIMATION_KEEP": 0,
		"DECIMATION_32":   1,
		"DECIMATION_64":   2,
	}
)

func (x MinionDeviceSettings_Decimation) Enum() *MinionDeviceSettings_Decimation {
	p := new(MinionDeviceSettings_Decimation)
	*p = x
	return p
}

func (x MinionDeviceSettings_Decimation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinionDeviceSettings_Decimation) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_minion_device_proto_enumTypes[2].Descriptor()
}

func (MinionDeviceSettings_Decimation) Type() protoreflect.EnumType {
	return &file_minknow_api_minion_device_proto_enumTypes[2]
}

func (x MinionDeviceSettings_Decimation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinionDeviceSettings_Decimation.Descriptor instead.
func (MinionDeviceSettings_Decimation) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{2, 1}
}

type MinionDeviceSettings_LowPassFilter int32

const (
	MinionDeviceSettings_LPF_KEEP     MinionDeviceSettings_LowPassFilter = 0
	MinionDeviceSettings_LPF_5kHz     MinionDeviceSettings_LowPassFilter = 1
	MinionDeviceSettings_LPF_10kHz    MinionDeviceSettings_LowPassFilter = 2
	MinionDeviceSettings_LPF_20kHz    MinionDeviceSettings_LowPassFilter = 3
	MinionDeviceSettings_LPF_40kHz    MinionDeviceSettings_LowPassFilter = 4
	MinionDeviceSettings_LPF_80kHz    MinionDeviceSettings_LowPassFilter = 5
	MinionDeviceSettings_LPF_DISABLED MinionDeviceSettings_LowPassFilter = 6
)

// Enum value maps for MinionDeviceSettings_LowPassFilter.
var (
	MinionDeviceSettings_LowPassFilter_name = map[int32]string{
		0: "LPF_KEEP",
		1: "LPF_5kHz",
		2: "LPF_10kHz",
		3: "LPF_20kHz",
		4: "LPF_40kHz",
		5: "LPF_80kHz",
		6: "LPF_DISABLED",
	}
	MinionDeviceSettings_LowPassFilter_value = map[string]int32{
		"LPF_KEEP":     0,
		"LPF_5kHz":     1,
		"LPF_10kHz":    2,
		"LPF_20kHz":    3,
		"LPF_40kHz":    4,
		"LPF_80kHz":    5,
		"LPF_DISABLED": 6,
	}
)

func (x MinionDeviceSettings_LowPassFilter) Enum() *MinionDeviceSettings_LowPassFilter {
	p := new(MinionDeviceSettings_LowPassFilter)
	*p = x
	return p
}

func (x MinionDeviceSettings_LowPassFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinionDeviceSettings_LowPassFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_minion_device_proto_enumTypes[3].Descriptor()
}

func (MinionDeviceSettings_LowPassFilter) Type() protoreflect.EnumType {
	return &file_minknow_api_minion_device_proto_enumTypes[3]
}

func (x MinionDeviceSettings_LowPassFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinionDeviceSettings_LowPassFilter.Descriptor instead.
func (MinionDeviceSettings_LowPassFilter) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{2, 2}
}

type MinionDeviceSettings_NonOverlapClock int32

const (
	MinionDeviceSettings_NOC_KEEP       MinionDeviceSettings_NonOverlapClock = 0
	MinionDeviceSettings_NOC_1_HS_CLOCK MinionDeviceSettings_NonOverlapClock = 1
	MinionDeviceSettings_NOC_2_HS_CLOCK MinionDeviceSettings_NonOverlapClock = 2
)

// Enum value maps for MinionDeviceSettings_NonOverlapClock.
var (
	MinionDeviceSettings_NonOverlapClock_name = map[int32]string{
		0: "NOC_KEEP",
		1: "NOC_1_HS_CLOCK",
		2: "NOC_2_HS_CLOCK",
	}
	MinionDeviceSettings_NonOverlapClock_value = map[string]int32{
		"NOC_KEEP":       0,
		"NOC_1_HS_CLOCK": 1,
		"NOC_2_HS_CLOCK": 2,
	}
)

func (x MinionDeviceSettings_NonOverlapClock) Enum() *MinionDeviceSettings_NonOverlapClock {
	p := new(MinionDeviceSettings_NonOverlapClock)
	*p = x
	return p
}

func (x MinionDeviceSettings_NonOverlapClock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinionDeviceSettings_NonOverlapClock) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_minion_device_proto_enumTypes[4].Descriptor()
}

func (MinionDeviceSettings_NonOverlapClock) Type() protoreflect.EnumType {
	return &file_minknow_api_minion_device_proto_enumTypes[4]
}

func (x MinionDeviceSettings_NonOverlapClock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinionDeviceSettings_NonOverlapClock.Descriptor instead.
func (MinionDeviceSettings_NonOverlapClock) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{2, 3}
}

type MinionDeviceSettings_IntegrationCapacitor int32

const (
	MinionDeviceSettings_INTCAP_KEEP     MinionDeviceSettings_IntegrationCapacitor = 0
	MinionDeviceSettings_INTCAP_62_5fF   MinionDeviceSettings_IntegrationCapacitor = 1
	MinionDeviceSettings_INTCAP_250fF    MinionDeviceSettings_IntegrationCapacitor = 2
	MinionDeviceSettings_INTCAP_1pF      MinionDeviceSettings_IntegrationCapacitor = 3
	MinionDeviceSettings_INTCAP_1_1875pF MinionDeviceSettings_IntegrationCapacitor = 4
)

// Enum value maps for MinionDeviceSettings_IntegrationCapacitor.
var (
	MinionDeviceSettings_IntegrationCapacitor_name = map[int32]string{
		0: "INTCAP_KEEP",
		1: "INTCAP_62_5fF",
		2: "INTCAP_250fF",
		3: "INTCAP_1pF",
		4: "INTCAP_1_1875pF",
	}
	MinionDeviceSettings_IntegrationCapacitor_value = map[string]int32{
		"INTCAP_KEEP":     0,
		"INTCAP_62_5fF":   1,
		"INTCAP_250fF":    2,
		"INTCAP_1pF":      3,
		"INTCAP_1_1875pF": 4,
	}
)

func (x MinionDeviceSettings_IntegrationCapacitor) Enum() *MinionDeviceSettings_IntegrationCapacitor {
	p := new(MinionDeviceSettings_IntegrationCapacitor)
	*p = x
	return p
}

func (x MinionDeviceSettings_IntegrationCapacitor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinionDeviceSettings_IntegrationCapacitor) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_minion_device_proto_enumTypes[5].Descriptor()
}

func (MinionDeviceSettings_IntegrationCapacitor) Type() protoreflect.EnumType {
	return &file_minknow_api_minion_device_proto_enumTypes[5]
}

func (x MinionDeviceSettings_IntegrationCapacitor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinionDeviceSettings_IntegrationCapacitor.Descriptor instead.
func (MinionDeviceSettings_IntegrationCapacitor) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{2, 4}
}

type MinionDeviceSettings_FanSpeed int32

const (
	MinionDeviceSettings_FANSPEED_KEEP MinionDeviceSettings_FanSpeed = 0
	MinionDeviceSettings_FANSPEED_OFF  MinionDeviceSettings_FanSpeed = 1
	MinionDeviceSettings_FANSPEED_LOW  MinionDeviceSettings_FanSpeed = 2
	MinionDeviceSettings_FANSPEED_HIGH MinionDeviceSettings_FanSpeed = 3
	MinionDeviceSettings_FANSPEED_MAX  MinionDeviceSettings_FanSpeed = 4
)

// Enum value maps for MinionDeviceSettings_FanSpeed.
var (
	MinionDeviceSettings_FanSpeed_name = map[int32]string{
		0: "FANSPEED_KEEP",
		1: "FANSPEED_OFF",
		2: "FANSPEED_LOW",
		3: "FANSPEED_HIGH",
		4: "FANSPEED_MAX",
	}
	MinionDeviceSettings_FanSpeed_value = map[string]int32{
		"FANSPEED_KEEP": 0,
		"FANSPEED_OFF":  1,
		"FANSPEED_LOW":  2,
		"FANSPEED_HIGH": 3,
		"FANSPEED_MAX":  4,
	}
)

func (x MinionDeviceSettings_FanSpeed) Enum() *MinionDeviceSettings_FanSpeed {
	p := new(MinionDeviceSettings_FanSpeed)
	*p = x
	return p
}

func (x MinionDeviceSettings_FanSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinionDeviceSettings_FanSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_minion_device_proto_enumTypes[6].Descriptor()
}

func (MinionDeviceSettings_FanSpeed) Type() protoreflect.EnumType {
	return &file_minknow_api_minion_device_proto_enumTypes[6]
}

func (x MinionDeviceSettings_FanSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinionDeviceSettings_FanSpeed.Descriptor instead.
func (MinionDeviceSettings_FanSpeed) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{2, 5}
}

// The configuration for a channel.
type MinionDeviceSettings_ChannelConfig int32

const (
	// Keep the existing channel configuration.
	MinionDeviceSettings_CHANNEL_CONFIG_KEEP MinionDeviceSettings_ChannelConfig = 0
	// Disconnect the channel completely.
	MinionDeviceSettings_DISCONNECTED MinionDeviceSettings_ChannelConfig = 1
	// Normal measurement through well 1.
	//
	// The voltage level can be adjusted with the bias_voltage setting.
	MinionDeviceSettings_WELL_1_BIAS_VOLTAGE MinionDeviceSettings_ChannelConfig = 2
	// Normal measurement through well 2.
	//
	// The voltage level can be adjusted with the bias_voltage setting.
	MinionDeviceSettings_WELL_2_BIAS_VOLTAGE MinionDeviceSettings_ChannelConfig = 3
	// Normal measurement through well 3.
	//
	// The voltage level can be adjusted with the bias_voltage setting.
	MinionDeviceSettings_WELL_3_BIAS_VOLTAGE MinionDeviceSettings_ChannelConfig = 4
	// Normal measurement through well 4.
	//
	// The voltage level can be adjusted with the bias_voltage setting.
	MinionDeviceSettings_WELL_4_BIAS_VOLTAGE MinionDeviceSettings_ChannelConfig = 5
	// Send a test current through the channel.
	//
	// This is an electronics-only connection: the channel is otherwise disconnected. It can be
	// used for calibrating the measurement circuitry.
	//
	// The current level can be adjusted with the test_current setting.
	MinionDeviceSettings_TEST_CURRENT MinionDeviceSettings_ChannelConfig = 6
	// Reverse voltage through well 1.
	//
	// This can be used to clear the well.
	MinionDeviceSettings_WELL_1_UNBLOCK_VOLTAGE MinionDeviceSettings_ChannelConfig = 7
	// Reverse voltage through well 2.
	//
	// This can be used to clear the well.
	MinionDeviceSettings_WELL_2_UNBLOCK_VOLTAGE MinionDeviceSettings_ChannelConfig = 8
	// Reverse voltage through well 3.
	//
	// This can be used to clear the well.
	MinionDeviceSettings_WELL_3_UNBLOCK_VOLTAGE MinionDeviceSettings_ChannelConfig = 9
	// Reverse voltage through well 4.
	//
	// This can be used to clear the well.
	MinionDeviceSettings_WELL_4_UNBLOCK_VOLTAGE MinionDeviceSettings_ChannelConfig = 10
	// Send a test current via the switch circuit for well 1.
	//
	// This is only necessary for testing the chip electronics. It should not normally be used.
	//
	// The current level can be adjusted with the test_current setting.
	MinionDeviceSettings_TEST_CURRENT_VIA_WELL_1 MinionDeviceSettings_ChannelConfig = 11
	// Send a test current via the switch circuit for well 2.
	//
	// This is only necessary for testing the chip electronics. It should not normally be used.
	//
	// The current level can be adjusted with the test_current setting.
	MinionDeviceSettings_TEST_CURRENT_VIA_WELL_2 MinionDeviceSettings_ChannelConfig = 12
	// Send a test current via the switch circuit for well 3.
	//
	// This is only necessary for testing the chip electronics. It should not normally be used.
	//
	// The current level can be adjusted with the test_current setting.
	MinionDeviceSettings_TEST_CURRENT_VIA_WELL_3 MinionDeviceSettings_ChannelConfig = 13
	// Send a test current via the switch circuit for well 4.
	//
	// This is only necessary for testing the chip electronics. It should not normally be used.
	//
	// The current level can be adjusted with the test_current setting.
	MinionDeviceSettings_TEST_CURRENT_VIA_WELL_4 MinionDeviceSettings_ChannelConfig = 14
	// Connect the channel sensors to ground via a 4MOhm resistor.
	//
	// This is only necessary for testing the chip electronics. It should not normally be used.
	MinionDeviceSettings_GROUND_THROUGH_RESISTOR MinionDeviceSettings_ChannelConfig = 15
	// Connect the channel sensors to ground.
	//
	// This is only necessary for testing the chip electronics. It should not normally be used.
	MinionDeviceSettings_GROUND MinionDeviceSettings_ChannelConfig = 16
)

// Enum value maps for MinionDeviceSettings_ChannelConfig.
var (
	MinionDeviceSettings_ChannelConfig_name = map[int32]string{
		0:  "CHANNEL_CONFIG_KEEP",
		1:  "DISCONNECTED",
		2:  "WELL_1_BIAS_VOLTAGE",
		3:  "WELL_2_BIAS_VOLTAGE",
		4:  "WELL_3_BIAS_VOLTAGE",
		5:  "WELL_4_BIAS_VOLTAGE",
		6:  "TEST_CURRENT",
		7:  "WELL_1_UNBLOCK_VOLTAGE",
		8:  "WELL_2_UNBLOCK_VOLTAGE",
		9:  "WELL_3_UNBLOCK_VOLTAGE",
		10: "WELL_4_UNBLOCK_VOLTAGE",
		11: "TEST_CURRENT_VIA_WELL_1",
		12: "TEST_CURRENT_VIA_WELL_2",
		13: "TEST_CURRENT_VIA_WELL_3",
		14: "TEST_CURRENT_VIA_WELL_4",
		15: "GROUND_THROUGH_RESISTOR",
		16: "GROUND",
	}
	MinionDeviceSettings_ChannelConfig_value = map[string]int32{
		"CHANNEL_CONFIG_KEEP":     0,
		"DISCONNECTED":            1,
		"WELL_1_BIAS_VOLTAGE":     2,
		"WELL_2_BIAS_VOLTAGE":     3,
		"WELL_3_BIAS_VOLTAGE":     4,
		"WELL_4_BIAS_VOLTAGE":     5,
		"TEST_CURRENT":            6,
		"WELL_1_UNBLOCK_VOLTAGE":  7,
		"WELL_2_UNBLOCK_VOLTAGE":  8,
		"WELL_3_UNBLOCK_VOLTAGE":  9,
		"WELL_4_UNBLOCK_VOLTAGE":  10,
		"TEST_CURRENT_VIA_WELL_1": 11,
		"TEST_CURRENT_VIA_WELL_2": 12,
		"TEST_CURRENT_VIA_WELL_3": 13,
		"TEST_CURRENT_VIA_WELL_4": 14,
		"GROUND_THROUGH_RESISTOR": 15,
		"GROUND":                  16,
	}
)

func (x MinionDeviceSettings_ChannelConfig) Enum() *MinionDeviceSettings_ChannelConfig {
	p := new(MinionDeviceSettings_ChannelConfig)
	*p = x
	return p
}

func (x MinionDeviceSettings_ChannelConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinionDeviceSettings_ChannelConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_minion_device_proto_enumTypes[7].Descriptor()
}

func (MinionDeviceSettings_ChannelConfig) Type() protoreflect.EnumType {
	return &file_minknow_api_minion_device_proto_enumTypes[7]
}

func (x MinionDeviceSettings_ChannelConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinionDeviceSettings_ChannelConfig.Descriptor instead.
func (MinionDeviceSettings_ChannelConfig) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{2, 6}
}

// Temperature range.
type TemperatureRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum temperature in degrees Celsius.
	//
	// If temperature control is enabled, the device will attempt to keep its temperature at or
	// above this value.
	//
	// Must be less than or equal to max.
	//
	// When soft temperature control is enabled, this value is not used.
	Min float32 `protobuf:"fixed32,5,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum temperature in degrees Celsius.
	//
	// If temperature control is enabled, the device will attempt to keep its temperature at or
	// below this value.
	//
	// Must be less than or equal to min.
	//
	// When soft temperature control is enabled, this is used as the target temperature, and ``min``
	// is not used.
	Max float32 `protobuf:"fixed32,6,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *TemperatureRange) Reset() {
	*x = TemperatureRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureRange) ProtoMessage() {}

func (x *TemperatureRange) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureRange.ProtoReflect.Descriptor instead.
func (*TemperatureRange) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{0}
}

func (x *TemperatureRange) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *TemperatureRange) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// These values control the sampling frequency.
type SamplingFrequencyParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clock divider.
	//
	// Values over 31 cannot be set.
	ClockDivider uint32 `protobuf:"varint,1,opt,name=clock_divider,json=clockDivider,proto3" json:"clock_divider,omitempty"`
	// The time spent sampling a data point, in microseconds.
	//
	// Must be between 30 and 1023 (inclusive).
	//
	// Note that setting the integration_time to less than 50 will force the sinc_decimation value
	// to 32.
	IntegrationTime uint32 `protobuf:"varint,2,opt,name=integration_time,json=integrationTime,proto3" json:"integration_time,omitempty"`
	// The speed of the high-speed clock.
	ClockSpeed SamplingFrequencyParameters_ClockSpeed `protobuf:"varint,3,opt,name=clock_speed,json=clockSpeed,proto3,enum=minknow_api.minion_device.SamplingFrequencyParameters_ClockSpeed" json:"clock_speed,omitempty"`
}

func (x *SamplingFrequencyParameters) Reset() {
	*x = SamplingFrequencyParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingFrequencyParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingFrequencyParameters) ProtoMessage() {}

func (x *SamplingFrequencyParameters) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingFrequencyParameters.ProtoReflect.Descriptor instead.
func (*SamplingFrequencyParameters) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{1}
}

func (x *SamplingFrequencyParameters) GetClockDivider() uint32 {
	if x != nil {
		return x.ClockDivider
	}
	return 0
}

func (x *SamplingFrequencyParameters) GetIntegrationTime() uint32 {
	if x != nil {
		return x.IntegrationTime
	}
	return 0
}

func (x *SamplingFrequencyParameters) GetClockSpeed() SamplingFrequencyParameters_ClockSpeed {
	if x != nil {
		return x.ClockSpeed
	}
	return SamplingFrequencyParameters_CLOCK_128MHz
}

// Describes the MinION device settings.
//
// Both unset structures and *_KEEP values in enums indicate "no change". When changing settings,
// these are the default values.
type MinionDeviceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The voltage potential to be applied across the wells (in millivolts).
	//
	// This voltage drives the process of forcing molecules through the nanopores.
	//
	// The range of possible values is -1275 to 1275 inclusive, in 5mv steps.
	//
	// When setting this value, if the provided value is not a multiple of 5, an error will be
	// returned.
	BiasVoltage *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=bias_voltage,json=biasVoltage,proto3" json:"bias_voltage,omitempty"`
	// The number of measurements to take each second.
	//
	// This value is derived from the sampling_frequency_params values, and so not all values are
	// possible.
	//
	// When changing the sampling frequency, either this value can be provided, or the values in
	// sampling_frequency_params can be provided (attempting to provide both will cause the RPC to
	// fail with an error). If this value is provided, the nearest admissible value will be used
	// (eg: if 3000Hz is requested, 3012Hz will be applied).
	//
	// This value cannot be changed during acquisition, and changing it will invalidate the current
	// calibration.
	//
	// Note that setting the sampling frequency to over 20000Hz (20KHz) will force the
	// sinc_decimation value to 32.
	SamplingFrequency *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=sampling_frequency,json=samplingFrequency,proto3" json:"sampling_frequency,omitempty"`
	// The per-channel configuration.
	//
	// Each channel can be set to one of 16 states, which specifies the set of electrical
	// connections to make. This includes which, if any, of the four wells linked to the channel to
	// use.
	//
	// Note that channel names start at 1. If you pass 0 as a key in this map, it will result in
	// an error.
	//
	// When changing the device settings, any omitted channels (or channels set to
	// CHANNEL_CONFIG_KEEP) will use the default value set in
	// ChangeSettingsRequest.channel_config_default.
	ChannelConfig map[uint32]MinionDeviceSettings_ChannelConfig `protobuf:"bytes,3,rep,name=channel_config,json=channelConfig,proto3" json:"channel_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=minknow_api.minion_device.MinionDeviceSettings_ChannelConfig"`
	// Whether to enable temperature control.
	//
	// If true, the device will attempt to keep its temperature within the bounds given by
	// ``temperature_lower_bound`` and ``temperature_upper_bound``. If false, it will not do any
	// temperature control.
	//
	// Default is enabled.
	//
	// It is recommended that this is enabled. If temperature control is disabled, the device may
	// overheat. In this case, it will turn itself off, and must be unplugged and allowed to cool
	// before using again.
	EnableTemperatureControl *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=enable_temperature_control,json=enableTemperatureControl,proto3" json:"enable_temperature_control,omitempty"`
	// The target temperature range for the device.
	//
	// If enable_temperature_control is set to true, the device will attempt to keep its temperature
	// between the min and max values provided here.
	//
	// Default is defined in application config.
	//
	// Note that if soft temperature control is enabled, only the ``max`` temperature is used.
	TemperatureTarget *TemperatureRange `protobuf:"bytes,5,opt,name=temperature_target,json=temperatureTarget,proto3" json:"temperature_target,omitempty"`
	// Integration capacitor value.
	//
	// This affects the sensitivity of the measurement: lower capacitor values give more
	// sensitive measurements (but also more noise). Changing this will invalidate the current
	// calibration.
	//
	// Default is 250.0
	IntCapacitor MinionDeviceSettings_IntegrationCapacitor `protobuf:"varint,6,opt,name=int_capacitor,json=intCapacitor,proto3,enum=minknow_api.minion_device.MinionDeviceSettings_IntegrationCapacitor" json:"int_capacitor,omitempty"`
	// The level of current used in the TEST_CURRENT channel configuration.
	//
	// This can be set in the range 0pA to 350pA in 50pA intervals, default is 100.0
	TestCurrent *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=test_current,json=testCurrent,proto3" json:"test_current,omitempty"`
	// The unblock voltage potential (in millivolts).
	//
	// When a channel is set to one of the UNBLOCK configurations, the specified well will have this
	// voltage applied across it, rather than bias_voltage.
	//
	// The range of possible values is -372 to 0 inclusive, in 12mv steps,  default is 0.
	//
	// When setting this value, if the provided value is not a multiple of 12, an error will be
	// returned.
	UnblockVoltage *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=unblock_voltage,json=unblockVoltage,proto3" json:"unblock_voltage,omitempty"`
	// Whether to enable detection of excessive current.
	//
	// The ADC output of a channel that trips the overcurrent depends on what track and hold gain
	// has been set to.
	//
	// Default is enabled.
	OvercurrentLimit *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=overcurrent_limit,json=overcurrentLimit,proto3" json:"overcurrent_limit,omitempty"`
	// The the number of integrator resets per sample.
	//
	// The range of possible values is 0 to 255, default is 1
	SamplesToReset *wrapperspb.UInt32Value `protobuf:"bytes,11,opt,name=samples_to_reset,json=samplesToReset,proto3" json:"samples_to_reset,omitempty"`
	// Track/Hold gain.
	//
	// Default is 5.0
	ThGain MinionDeviceSettings_Gain `protobuf:"varint,12,opt,name=th_gain,json=thGain,proto3,enum=minknow_api.minion_device.MinionDeviceSettings_Gain" json:"th_gain,omitempty"`
	// Delay from 2:1 mux switch to sinc filter enable in ADC clocks.
	//
	// The range of possible values is 0 to 15, default is 4.0
	SincDelay *wrapperspb.UInt32Value `protobuf:"bytes,13,opt,name=sinc_delay,json=sincDelay,proto3" json:"sinc_delay,omitempty"`
	// Track/Hold sample time in microseconds (us).
	//
	// The range of possible values is 0.5us to 7.5us in steps of 0.5us, default is 0.5.
	ThSampleTime *wrapperspb.FloatValue `protobuf:"bytes,14,opt,name=th_sample_time,json=thSampleTime,proto3" json:"th_sample_time,omitempty"`
	// Integrator reset time in microseconds (us).
	//
	// This value forms a part of the integration time specified in the sampling frequency
	// parameters.
	//
	// The range of possible values is 1us to 16us in steps of 0.5us, default is 3.5.
	IntResetTime *wrapperspb.FloatValue `protobuf:"bytes,15,opt,name=int_reset_time,json=intResetTime,proto3" json:"int_reset_time,omitempty"`
	// Decimation.
	//
	// If the integration time is set to less than 50us (or, equivalently, the sampling frequency is
	// set to greater than 20KHz), this value will be forced to 32.
	//
	// Default is 64.0.
	SincDecimation MinionDeviceSettings_Decimation `protobuf:"varint,16,opt,name=sinc_decimation,json=sincDecimation,proto3,enum=minknow_api.minion_device.MinionDeviceSettings_Decimation" json:"sinc_decimation,omitempty"`
	// Low pass filter that should be applied.
	//
	// Default is 40kHz
	LowPassFilter MinionDeviceSettings_LowPassFilter `protobuf:"varint,17,opt,name=low_pass_filter,json=lowPassFilter,proto3,enum=minknow_api.minion_device.MinionDeviceSettings_LowPassFilter" json:"low_pass_filter,omitempty"`
	// Amount of non-overlap for non-overlapping clocks.
	//
	// Default is NOC_1_HS_CLOCK.
	NonOverlapClock MinionDeviceSettings_NonOverlapClock `protobuf:"varint,18,opt,name=non_overlap_clock,json=nonOverlapClock,proto3,enum=minknow_api.minion_device.MinionDeviceSettings_NonOverlapClock" json:"non_overlap_clock,omitempty"`
	// Bias current.
	//
	// This can be set in the range 0 to 15 in intervals of 5, default is 5.
	BiasCurrent *wrapperspb.UInt32Value `protobuf:"bytes,19,opt,name=bias_current,json=biasCurrent,proto3" json:"bias_current,omitempty"`
	// Compensation capacitor value.
	//
	// This can be set in the range 0 to 49 in intervals of 7, default is 14.
	CompensationCapacitor *wrapperspb.UInt32Value `protobuf:"bytes,20,opt,name=compensation_capacitor,json=compensationCapacitor,proto3" json:"compensation_capacitor,omitempty"`
	// Sampling frequency parameters.
	//
	// The sampling_frequency value is calculated from these settings.
	//
	// When changing the sampling frequency, either the values here can be provided, or a
	// sampling_frequency can be provided (attempting to provide both will cause the RPC to fail
	// with an error).
	//
	// WARNING: This should not be used in a change_settings call without consulting the hardware
	// documentation for permissible combinations of values. MinKNOW will only do minimal checking
	// of the values given here; if you use invalid combinations of settings, the device will be
	// unable to acquire data, and may even be permanently damaged.
	//
	// This value cannot be changed during acquisition.
	SamplingFrequencyParams *SamplingFrequencyParameters `protobuf:"bytes,21,opt,name=sampling_frequency_params,json=samplingFrequencyParams,proto3" json:"sampling_frequency_params,omitempty"`
	// Enable ASIC analogue supply voltage.
	//
	// This must be enabled to heat and acquire data from the ASIC. It can be disabled to save
	// power, but doing so will allow the ASIC to cool down, and it will take time to heat it up
	// again.
	//
	// Default is true.
	EnableAsicPower *wrapperspb.BoolValue `protobuf:"bytes,22,opt,name=enable_asic_power,json=enableAsicPower,proto3" json:"enable_asic_power,omitempty"`
	// The speed of the fan when temperature control is off.
	//
	// If ``enable_temperature_control`` is false, this setting will be ignored, as the temperature
	// control routines on the device will control the speed of the fan.
	//
	// Note that this setting does not apply to GridIONs.
	//
	// Default is FANSPEED_MAX.
	FanSpeed MinionDeviceSettings_FanSpeed `protobuf:"varint,23,opt,name=fan_speed,json=fanSpeed,proto3,enum=minknow_api.minion_device.MinionDeviceSettings_FanSpeed" json:"fan_speed,omitempty"`
	// Whether to allow the fan to completely stop.
	//
	// Allowing the fan to stop causes issues on some old MinION models.
	//
	// Note that this setting does not apply to GridIONs.
	//
	// Default is false.
	AllowFullFanStop *wrapperspb.BoolValue `protobuf:"bytes,24,opt,name=allow_full_fan_stop,json=allowFullFanStop,proto3" json:"allow_full_fan_stop,omitempty"`
	// Enable soft temperature control.
	//
	// "Soft" temperature control is a more intelligent temperature control algorithm. It works on a
	// single target temperature, and dynamically adjusts the fan speed to reach that temperature
	// quickly, and then mainains the target temperature with high precision.
	//
	// If this is disabled, "hard" temperature control is used instead. This is a naive algorithm
	// that simply turns the fan up when dropping below the minimum temperature and turns it down
	// when going above the maximum temperature.
	//
	// If ``enable_temperature_control`` is false, this setting is ignored.
	//
	// It is recommended that this is enabled.
	//
	// Default is true.
	EnableSoftTemperatureControl *wrapperspb.BoolValue `protobuf:"bytes,25,opt,name=enable_soft_temperature_control,json=enableSoftTemperatureControl,proto3" json:"enable_soft_temperature_control,omitempty"`
	// Use the bias voltage lookup table to set the bias voltage.
	//
	// If this is enabled, the bias voltage will be updated every millisecond with each entry in the
	// bias voltage lookup table (see ``bias_voltage_lookup_table``) in turn, cycling through when
	// the end of the table is reached.
	//
	// This has the effect of producing a bias voltage waveform.
	//
	// When enabling this, it is required to either provide the lookup table entries at the same
	// time, or to have already provided them in a previous call.
	//
	// Default is false.
	EnableBiasVoltageLookup *wrapperspb.BoolValue `protobuf:"bytes,26,opt,name=enable_bias_voltage_lookup,json=enableBiasVoltageLookup,proto3" json:"enable_bias_voltage_lookup,omitempty"`
	// The bias voltage lookup table.
	//
	// If no entries are provided, the existing lookup table (if any) is preserved.
	//
	// See ``enable_bias_voltage_lookup``.
	//
	// Up to 75 values can be provided. The values have the same constraints as ``bias_voltage``.
	BiasVoltageLookupTable []int32 `protobuf:"varint,27,rep,packed,name=bias_voltage_lookup_table,json=biasVoltageLookupTable,proto3" json:"bias_voltage_lookup_table,omitempty"`
}

func (x *MinionDeviceSettings) Reset() {
	*x = MinionDeviceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinionDeviceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionDeviceSettings) ProtoMessage() {}

func (x *MinionDeviceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionDeviceSettings.ProtoReflect.Descriptor instead.
func (*MinionDeviceSettings) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{2}
}

func (x *MinionDeviceSettings) GetBiasVoltage() *wrapperspb.Int32Value {
	if x != nil {
		return x.BiasVoltage
	}
	return nil
}

func (x *MinionDeviceSettings) GetSamplingFrequency() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SamplingFrequency
	}
	return nil
}

func (x *MinionDeviceSettings) GetChannelConfig() map[uint32]MinionDeviceSettings_ChannelConfig {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

func (x *MinionDeviceSettings) GetEnableTemperatureControl() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableTemperatureControl
	}
	return nil
}

func (x *MinionDeviceSettings) GetTemperatureTarget() *TemperatureRange {
	if x != nil {
		return x.TemperatureTarget
	}
	return nil
}

func (x *MinionDeviceSettings) GetIntCapacitor() MinionDeviceSettings_IntegrationCapacitor {
	if x != nil {
		return x.IntCapacitor
	}
	return MinionDeviceSettings_INTCAP_KEEP
}

func (x *MinionDeviceSettings) GetTestCurrent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TestCurrent
	}
	return nil
}

func (x *MinionDeviceSettings) GetUnblockVoltage() *wrapperspb.Int32Value {
	if x != nil {
		return x.UnblockVoltage
	}
	return nil
}

func (x *MinionDeviceSettings) GetOvercurrentLimit() *wrapperspb.BoolValue {
	if x != nil {
		return x.OvercurrentLimit
	}
	return nil
}

func (x *MinionDeviceSettings) GetSamplesToReset() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SamplesToReset
	}
	return nil
}

func (x *MinionDeviceSettings) GetThGain() MinionDeviceSettings_Gain {
	if x != nil {
		return x.ThGain
	}
	return MinionDeviceSettings_GAIN_KEEP
}

func (x *MinionDeviceSettings) GetSincDelay() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SincDelay
	}
	return nil
}

func (x *MinionDeviceSettings) GetThSampleTime() *wrapperspb.FloatValue {
	if x != nil {
		return x.ThSampleTime
	}
	return nil
}

func (x *MinionDeviceSettings) GetIntResetTime() *wrapperspb.FloatValue {
	if x != nil {
		return x.IntResetTime
	}
	return nil
}

func (x *MinionDeviceSettings) GetSincDecimation() MinionDeviceSettings_Decimation {
	if x != nil {
		return x.SincDecimation
	}
	return MinionDeviceSettings_DECIMATION_KEEP
}

func (x *MinionDeviceSettings) GetLowPassFilter() MinionDeviceSettings_LowPassFilter {
	if x != nil {
		return x.LowPassFilter
	}
	return MinionDeviceSettings_LPF_KEEP
}

func (x *MinionDeviceSettings) GetNonOverlapClock() MinionDeviceSettings_NonOverlapClock {
	if x != nil {
		return x.NonOverlapClock
	}
	return MinionDeviceSettings_NOC_KEEP
}

func (x *MinionDeviceSettings) GetBiasCurrent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BiasCurrent
	}
	return nil
}

func (x *MinionDeviceSettings) GetCompensationCapacitor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CompensationCapacitor
	}
	return nil
}

func (x *MinionDeviceSettings) GetSamplingFrequencyParams() *SamplingFrequencyParameters {
	if x != nil {
		return x.SamplingFrequencyParams
	}
	return nil
}

func (x *MinionDeviceSettings) GetEnableAsicPower() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableAsicPower
	}
	return nil
}

func (x *MinionDeviceSettings) GetFanSpeed() MinionDeviceSettings_FanSpeed {
	if x != nil {
		return x.FanSpeed
	}
	return MinionDeviceSettings_FANSPEED_KEEP
}

func (x *MinionDeviceSettings) GetAllowFullFanStop() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowFullFanStop
	}
	return nil
}

func (x *MinionDeviceSettings) GetEnableSoftTemperatureControl() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableSoftTemperatureControl
	}
	return nil
}

func (x *MinionDeviceSettings) GetEnableBiasVoltageLookup() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableBiasVoltageLookup
	}
	return nil
}

func (x *MinionDeviceSettings) GetBiasVoltageLookupTable() []int32 {
	if x != nil {
		return x.BiasVoltageLookupTable
	}
	return nil
}

type ChangeSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MinION device settings
	Settings *MinionDeviceSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	// The default channel configuration.
	//
	// This provides the default configuration to apply to any channels not listed in
	// settings.channel_config.
	ChannelConfigDefault MinionDeviceSettings_ChannelConfig `protobuf:"varint,2,opt,name=channel_config_default,json=channelConfigDefault,proto3,enum=minknow_api.minion_device.MinionDeviceSettings_ChannelConfig" json:"channel_config_default,omitempty"`
}

func (x *ChangeSettingsRequest) Reset() {
	*x = ChangeSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeSettingsRequest) ProtoMessage() {}

func (x *ChangeSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeSettingsRequest.ProtoReflect.Descriptor instead.
func (*ChangeSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{3}
}

func (x *ChangeSettingsRequest) GetSettings() *MinionDeviceSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ChangeSettingsRequest) GetChannelConfigDefault() MinionDeviceSettings_ChannelConfig {
	if x != nil {
		return x.ChannelConfigDefault
	}
	return MinionDeviceSettings_CHANNEL_CONFIG_KEEP
}

type ChangeSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeSettingsResponse) Reset() {
	*x = ChangeSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeSettingsResponse) ProtoMessage() {}

func (x *ChangeSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeSettingsResponse.ProtoReflect.Descriptor instead.
func (*ChangeSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{4}
}

// Request for MinionDeviceService.get_settings
type GetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSettingsRequest) Reset() {
	*x = GetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsRequest) ProtoMessage() {}

func (x *GetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{5}
}

// Response for MinionDeviceService.get_settings
type GetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MinION device settings
	Settings *MinionDeviceSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{6}
}

func (x *GetSettingsResponse) GetSettings() *MinionDeviceSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type GetFanSpeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFanSpeedRequest) Reset() {
	*x = GetFanSpeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFanSpeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFanSpeedRequest) ProtoMessage() {}

func (x *GetFanSpeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFanSpeedRequest.ProtoReflect.Descriptor instead.
func (*GetFanSpeedRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{7}
}

type GetFanSpeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rpm uint32 `protobuf:"varint,1,opt,name=rpm,proto3" json:"rpm,omitempty"`
}

func (x *GetFanSpeedResponse) Reset() {
	*x = GetFanSpeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_minion_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFanSpeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFanSpeedResponse) ProtoMessage() {}

func (x *GetFanSpeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_minion_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFanSpeedResponse.ProtoReflect.Descriptor instead.
func (*GetFanSpeedResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_minion_device_proto_rawDescGZIP(), []int{8}
}

func (x *GetFanSpeedResponse) GetRpm() uint32 {
	if x != nil {
		return x.Rpm
	}
	return 0
}

var File_minknow_api_minion_device_proto protoreflect.FileDescriptor

var file_minknow_api_minion_device_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x10, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x22, 0xb4, 0x02, 0x0a, 0x1b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x0a, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x31,
	0x32, 0x38, 0x4d, 0x48, 0x7a, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x36, 0x34, 0x4d, 0x48, 0x7a, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x33, 0x32, 0x4d, 0x48, 0x7a, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x31, 0x36, 0x4d, 0x48, 0x7a, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x38, 0x4d, 0x48, 0x7a, 0x10, 0x04, 0x22, 0xd5, 0x19, 0x0a, 0x14, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x69, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x1a, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5a, 0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x69, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x0f, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x10,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x74, 0x68, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x74, 0x68, 0x47,
	0x61, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x41, 0x0a, 0x0e, 0x74, 0x68, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x73, 0x69, 0x6e, 0x63, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x69, 0x6e,
	0x63, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x0f, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x6b, 0x0a, 0x11, 0x6e, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e,
	0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0f,
	0x6e, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x3f, 0x0a, 0x0c, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x53, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x72, 0x0a, 0x19, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x08,
	0x66, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x61, 0x6e, 0x53,
	0x74, 0x6f, 0x70, 0x12, 0x61, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x57, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69,
	0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12,
	0x39, 0x0a, 0x19, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x16, 0x62, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x7f, 0x0a, 0x12, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x04, 0x47,
	0x61, 0x69, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x4b, 0x45, 0x45, 0x50,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x35, 0x10, 0x02, 0x22, 0x47, 0x0a, 0x0a, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x43, 0x49,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x33, 0x32, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x36,
	0x34, 0x10, 0x02, 0x22, 0x79, 0x0a, 0x0d, 0x4c, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x50, 0x46, 0x5f, 0x4b, 0x45, 0x45, 0x50,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x50, 0x46, 0x5f, 0x35, 0x6b, 0x48, 0x7a, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x31, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x32, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x50, 0x46, 0x5f, 0x34, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x50, 0x46, 0x5f, 0x38, 0x30, 0x6b, 0x48, 0x7a, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x4c, 0x50, 0x46, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x22, 0x47,
	0x0a, 0x0f, 0x4e, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x43, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x43, 0x5f, 0x31, 0x5f, 0x48, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x43, 0x5f, 0x32, 0x5f, 0x48, 0x53, 0x5f,
	0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x22, 0x71, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f, 0x36, 0x32, 0x5f, 0x35, 0x66,
	0x46, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f, 0x32, 0x35,
	0x30, 0x66, 0x46, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f,
	0x31, 0x70, 0x46, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x43, 0x41, 0x50, 0x5f,
	0x31, 0x5f, 0x31, 0x38, 0x37, 0x35, 0x70, 0x46, 0x10, 0x04, 0x22, 0x66, 0x0a, 0x08, 0x46, 0x61,
	0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4e,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x41, 0x4e, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x41, 0x4e, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x04, 0x22, 0xbd, 0x03, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x31, 0x5f, 0x42, 0x49, 0x41, 0x53, 0x5f, 0x56,
	0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x45, 0x4c, 0x4c,
	0x5f, 0x32, 0x5f, 0x42, 0x49, 0x41, 0x53, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x33, 0x5f, 0x42, 0x49, 0x41, 0x53,
	0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x45,
	0x4c, 0x4c, 0x5f, 0x34, 0x5f, 0x42, 0x49, 0x41, 0x53, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x31, 0x5f,
	0x55, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10,
	0x07, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x32, 0x5f, 0x55, 0x4e, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x1a, 0x0a,
	0x16, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x33, 0x5f, 0x55, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x45, 0x4c,
	0x4c, 0x5f, 0x34, 0x5f, 0x55, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x4f, 0x4c, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x31,
	0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x32, 0x10, 0x0c, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x56, 0x49, 0x41, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x33, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x41,
	0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x34, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x10, 0x22, 0xdf, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x73, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x04,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x14,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x70, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x70, 0x6d, 0x32, 0xfb, 0x02,
	0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x02, 0x12, 0x72, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x73, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x42, 0x5c, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x63, 0x68, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75, 0x72, 0x62,
	0x61, 0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_minknow_api_minion_device_proto_rawDescOnce sync.Once
	file_minknow_api_minion_device_proto_rawDescData = file_minknow_api_minion_device_proto_rawDesc
)

func file_minknow_api_minion_device_proto_rawDescGZIP() []byte {
	file_minknow_api_minion_device_proto_rawDescOnce.Do(func() {
		file_minknow_api_minion_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_minion_device_proto_rawDescData)
	})
	return file_minknow_api_minion_device_proto_rawDescData
}

var file_minknow_api_minion_device_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_minknow_api_minion_device_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_minknow_api_minion_device_proto_goTypes = []interface{}{
	(SamplingFrequencyParameters_ClockSpeed)(0),    // 0: minknow_api.minion_device.SamplingFrequencyParameters.ClockSpeed
	(MinionDeviceSettings_Gain)(0),                 // 1: minknow_api.minion_device.MinionDeviceSettings.Gain
	(MinionDeviceSettings_Decimation)(0),           // 2: minknow_api.minion_device.MinionDeviceSettings.Decimation
	(MinionDeviceSettings_LowPassFilter)(0),        // 3: minknow_api.minion_device.MinionDeviceSettings.LowPassFilter
	(MinionDeviceSettings_NonOverlapClock)(0),      // 4: minknow_api.minion_device.MinionDeviceSettings.NonOverlapClock
	(MinionDeviceSettings_IntegrationCapacitor)(0), // 5: minknow_api.minion_device.MinionDeviceSettings.IntegrationCapacitor
	(MinionDeviceSettings_FanSpeed)(0),             // 6: minknow_api.minion_device.MinionDeviceSettings.FanSpeed
	(MinionDeviceSettings_ChannelConfig)(0),        // 7: minknow_api.minion_device.MinionDeviceSettings.ChannelConfig
	(*TemperatureRange)(nil),                       // 8: minknow_api.minion_device.TemperatureRange
	(*SamplingFrequencyParameters)(nil),            // 9: minknow_api.minion_device.SamplingFrequencyParameters
	(*MinionDeviceSettings)(nil),                   // 10: minknow_api.minion_device.MinionDeviceSettings
	(*ChangeSettingsRequest)(nil),                  // 11: minknow_api.minion_device.ChangeSettingsRequest
	(*ChangeSettingsResponse)(nil),                 // 12: minknow_api.minion_device.ChangeSettingsResponse
	(*GetSettingsRequest)(nil),                     // 13: minknow_api.minion_device.GetSettingsRequest
	(*GetSettingsResponse)(nil),                    // 14: minknow_api.minion_device.GetSettingsResponse
	(*GetFanSpeedRequest)(nil),                     // 15: minknow_api.minion_device.GetFanSpeedRequest
	(*GetFanSpeedResponse)(nil),                    // 16: minknow_api.minion_device.GetFanSpeedResponse
	nil,                                            // 17: minknow_api.minion_device.MinionDeviceSettings.ChannelConfigEntry
	(*wrapperspb.Int32Value)(nil),                  // 18: google.protobuf.Int32Value
	(*wrapperspb.UInt32Value)(nil),                 // 19: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),                   // 20: google.protobuf.BoolValue
	(*wrapperspb.FloatValue)(nil),                  // 21: google.protobuf.FloatValue
}
var file_minknow_api_minion_device_proto_depIdxs = []int32{
	0,  // 0: minknow_api.minion_device.SamplingFrequencyParameters.clock_speed:type_name -> minknow_api.minion_device.SamplingFrequencyParameters.ClockSpeed
	18, // 1: minknow_api.minion_device.MinionDeviceSettings.bias_voltage:type_name -> google.protobuf.Int32Value
	19, // 2: minknow_api.minion_device.MinionDeviceSettings.sampling_frequency:type_name -> google.protobuf.UInt32Value
	17, // 3: minknow_api.minion_device.MinionDeviceSettings.channel_config:type_name -> minknow_api.minion_device.MinionDeviceSettings.ChannelConfigEntry
	20, // 4: minknow_api.minion_device.MinionDeviceSettings.enable_temperature_control:type_name -> google.protobuf.BoolValue
	8,  // 5: minknow_api.minion_device.MinionDeviceSettings.temperature_target:type_name -> minknow_api.minion_device.TemperatureRange
	5,  // 6: minknow_api.minion_device.MinionDeviceSettings.int_capacitor:type_name -> minknow_api.minion_device.MinionDeviceSettings.IntegrationCapacitor
	19, // 7: minknow_api.minion_device.MinionDeviceSettings.test_current:type_name -> google.protobuf.UInt32Value
	18, // 8: minknow_api.minion_device.MinionDeviceSettings.unblock_voltage:type_name -> google.protobuf.Int32Value
	20, // 9: minknow_api.minion_device.MinionDeviceSettings.overcurrent_limit:type_name -> google.protobuf.BoolValue
	19, // 10: minknow_api.minion_device.MinionDeviceSettings.samples_to_reset:type_name -> google.protobuf.UInt32Value
	1,  // 11: minknow_api.minion_device.MinionDeviceSettings.th_gain:type_name -> minknow_api.minion_device.MinionDeviceSettings.Gain
	19, // 12: minknow_api.minion_device.MinionDeviceSettings.sinc_delay:type_name -> google.protobuf.UInt32Value
	21, // 13: minknow_api.minion_device.MinionDeviceSettings.th_sample_time:type_name -> google.protobuf.FloatValue
	21, // 14: minknow_api.minion_device.MinionDeviceSettings.int_reset_time:type_name -> google.protobuf.FloatValue
	2,  // 15: minknow_api.minion_device.MinionDeviceSettings.sinc_decimation:type_name -> minknow_api.minion_device.MinionDeviceSettings.Decimation
	3,  // 16: minknow_api.minion_device.MinionDeviceSettings.low_pass_filter:type_name -> minknow_api.minion_device.MinionDeviceSettings.LowPassFilter
	4,  // 17: minknow_api.minion_device.MinionDeviceSettings.non_overlap_clock:type_name -> minknow_api.minion_device.MinionDeviceSettings.NonOverlapClock
	19, // 18: minknow_api.minion_device.MinionDeviceSettings.bias_current:type_name -> google.protobuf.UInt32Value
	19, // 19: minknow_api.minion_device.MinionDeviceSettings.compensation_capacitor:type_name -> google.protobuf.UInt32Value
	9,  // 20: minknow_api.minion_device.MinionDeviceSettings.sampling_frequency_params:type_name -> minknow_api.minion_device.SamplingFrequencyParameters
	20, // 21: minknow_api.minion_device.MinionDeviceSettings.enable_asic_power:type_name -> google.protobuf.BoolValue
	6,  // 22: minknow_api.minion_device.MinionDeviceSettings.fan_speed:type_name -> minknow_api.minion_device.MinionDeviceSettings.FanSpeed
	20, // 23: minknow_api.minion_device.MinionDeviceSettings.allow_full_fan_stop:type_name -> google.protobuf.BoolValue
	20, // 24: minknow_api.minion_device.MinionDeviceSettings.enable_soft_temperature_control:type_name -> google.protobuf.BoolValue
	20, // 25: minknow_api.minion_device.MinionDeviceSettings.enable_bias_voltage_lookup:type_name -> google.protobuf.BoolValue
	10, // 26: minknow_api.minion_device.ChangeSettingsRequest.settings:type_name -> minknow_api.minion_device.MinionDeviceSettings
	7,  // 27: minknow_api.minion_device.ChangeSettingsRequest.channel_config_default:type_name -> minknow_api.minion_device.MinionDeviceSettings.ChannelConfig
	10, // 28: minknow_api.minion_device.GetSettingsResponse.settings:type_name -> minknow_api.minion_device.MinionDeviceSettings
	7,  // 29: minknow_api.minion_device.MinionDeviceSettings.ChannelConfigEntry.value:type_name -> minknow_api.minion_device.MinionDeviceSettings.ChannelConfig
	11, // 30: minknow_api.minion_device.MinionDeviceService.change_settings:input_type -> minknow_api.minion_device.ChangeSettingsRequest
	13, // 31: minknow_api.minion_device.MinionDeviceService.get_settings:input_type -> minknow_api.minion_device.GetSettingsRequest
	15, // 32: minknow_api.minion_device.MinionDeviceService.get_fan_speed:input_type -> minknow_api.minion_device.GetFanSpeedRequest
	12, // 33: minknow_api.minion_device.MinionDeviceService.change_settings:output_type -> minknow_api.minion_device.ChangeSettingsResponse
	14, // 34: minknow_api.minion_device.MinionDeviceService.get_settings:output_type -> minknow_api.minion_device.GetSettingsResponse
	16, // 35: minknow_api.minion_device.MinionDeviceService.get_fan_speed:output_type -> minknow_api.minion_device.GetFanSpeedResponse
	33, // [33:36] is the sub-list for method output_type
	30, // [30:33] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_minknow_api_minion_device_proto_init() }
func file_minknow_api_minion_device_proto_init() {
	if File_minknow_api_minion_device_proto != nil {
		return
	}
	file_minknow_api_rpc_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_minion_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_minion_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplingFrequencyParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_minion_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinionDeviceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_minion_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_minion_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_minion_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_minion_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_minion_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFanSpeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_minion_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFanSpeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_minion_device_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_minion_device_proto_goTypes,
		DependencyIndexes: file_minknow_api_minion_device_proto_depIdxs,
		EnumInfos:         file_minknow_api_minion_device_proto_enumTypes,
		MessageInfos:      file_minknow_api_minion_device_proto_msgTypes,
	}.Build()
	File_minknow_api_minion_device_proto = out.File
	file_minknow_api_minion_device_proto_rawDesc = nil
	file_minknow_api_minion_device_proto_goTypes = nil
	file_minknow_api_minion_device_proto_depIdxs = nil
}
