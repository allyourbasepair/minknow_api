// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/manager.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowCellPosition_State int32

const (
	// The flow cell position is being initialised. This state should only last for a few
	// seconds, before moving to `STATE_RUNNING` or one of the error states.
	FlowCellPosition_STATE_INITIALISING FlowCellPosition_State = 0
	// The flow cell position is in a basic state of operation, and an RPC interface is
	// available for it.
	//
	// `rpc_ports` is guaranteed to be set in this tate. Note that port information may also be
	// provided in the hardware error states if the software is still running.
	//
	// Note that many hardware and software errors are not detectable by the manager, so
	// `STATE_RUNNING` may be set even when there is a problem. The interface provided over
	// `rpc_ports` should be the canonical source of the state of the flow cell position when in
	// `STATE_RUNNING`. In the future, more errors may be tracked properly here.
	FlowCellPosition_STATE_RUNNING FlowCellPosition_State = 1
	// After calling reset_position(), this state may be entered to indicate the software is in
	// the process of being stopped.
	//
	// Typically, this state will either transition into STATE_INITIALISING or the position will
	// be removed entirely (although it could return to one of the hardware error states).
	FlowCellPosition_STATE_RESETTING FlowCellPosition_State = 2
	// The hardware corresponding to the flow cell position was removed.
	//
	// Only set for removable positions (ie: USB MinIONs). This state indicates that the
	// hardware was removed, but the software is still running. The software will not be stopped
	// automatically to prevent possible data loss. Call reset_position() to stop the software
	// and forget about the position.
	FlowCellPosition_STATE_HARDWARE_REMOVED FlowCellPosition_State = 3
	// Communication with the hardware failed.
	//
	// For built-in positions, this can include when the hardware was not found at all (eg: if a
	// PromethION has not had one of its sequencing unit cables attached).
	//
	// More information may be available in `error_info`.
	FlowCellPosition_STATE_HARDWARE_ERROR FlowCellPosition_State = 4
	// The software corresponding to the flow cell position could not be started (or stopped
	// unexpectedly).
	//
	// More information may be available in `error_info`.
	FlowCellPosition_STATE_SOFTWARE_ERROR FlowCellPosition_State = 5
)

// Enum value maps for FlowCellPosition_State.
var (
	FlowCellPosition_State_name = map[int32]string{
		0: "STATE_INITIALISING",
		1: "STATE_RUNNING",
		2: "STATE_RESETTING",
		3: "STATE_HARDWARE_REMOVED",
		4: "STATE_HARDWARE_ERROR",
		5: "STATE_SOFTWARE_ERROR",
	}
	FlowCellPosition_State_value = map[string]int32{
		"STATE_INITIALISING":     0,
		"STATE_RUNNING":          1,
		"STATE_RESETTING":        2,
		"STATE_HARDWARE_REMOVED": 3,
		"STATE_HARDWARE_ERROR":   4,
		"STATE_SOFTWARE_ERROR":   5,
	}
)

func (x FlowCellPosition_State) Enum() *FlowCellPosition_State {
	p := new(FlowCellPosition_State)
	*p = x
	return p
}

func (x FlowCellPosition_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowCellPosition_State) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_manager_proto_enumTypes[0].Descriptor()
}

func (FlowCellPosition_State) Type() protoreflect.EnumType {
	return &file_minknow_api_manager_proto_enumTypes[0]
}

func (x FlowCellPosition_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowCellPosition_State.Descriptor instead.
func (FlowCellPosition_State) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{2, 0}
}

// Note that InstallationType is duplicated in instance.proto, the two definitions should be kept in sync.
type GetVersionInfoResponse_InstallationType int32

const (
	// For internal release. production.proto will be enabled for this type
	GetVersionInfoResponse_ONT GetVersionInfoResponse_InstallationType = 0
	// For customer releases
	GetVersionInfoResponse_NC GetVersionInfoResponse_InstallationType = 1
	// For production release. production.proto will be enabled for this type
	GetVersionInfoResponse_PROD GetVersionInfoResponse_InstallationType = 2
	// For Q releases (nanopore long term support release)
	GetVersionInfoResponse_Q_RELEASE GetVersionInfoResponse_InstallationType = 3
	// Oxford Nanopore Diagnostic
	GetVersionInfoResponse_OND_RELEASE GetVersionInfoResponse_InstallationType = 4
)

// Enum value maps for GetVersionInfoResponse_InstallationType.
var (
	GetVersionInfoResponse_InstallationType_name = map[int32]string{
		0: "ONT",
		1: "NC",
		2: "PROD",
		3: "Q_RELEASE",
		4: "OND_RELEASE",
	}
	GetVersionInfoResponse_InstallationType_value = map[string]int32{
		"ONT":         0,
		"NC":          1,
		"PROD":        2,
		"Q_RELEASE":   3,
		"OND_RELEASE": 4,
	}
)

func (x GetVersionInfoResponse_InstallationType) Enum() *GetVersionInfoResponse_InstallationType {
	p := new(GetVersionInfoResponse_InstallationType)
	*p = x
	return p
}

func (x GetVersionInfoResponse_InstallationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetVersionInfoResponse_InstallationType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_manager_proto_enumTypes[1].Descriptor()
}

func (GetVersionInfoResponse_InstallationType) Type() protoreflect.EnumType {
	return &file_minknow_api_manager_proto_enumTypes[1]
}

func (x GetVersionInfoResponse_InstallationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetVersionInfoResponse_InstallationType.Descriptor instead.
func (GetVersionInfoResponse_InstallationType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{14, 0}
}

type DescribeHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DescribeHostRequest) Reset() {
	*x = DescribeHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeHostRequest) ProtoMessage() {}

func (x *DescribeHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeHostRequest.ProtoReflect.Descriptor instead.
func (*DescribeHostRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{0}
}

type DescribeHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The product code for the host, if applicable.
	//
	// If this is an integrated Oxford Nanopore device, this will be the product code of the device,
	// or the part of the device that runs MinKNOW (eg: several PromethION models have separate
	// product codes for the sequencing unit where the flow cells are inserted and the compute
	// unit - this would be the product code for the compute unit).
	//
	// Some example product codes:
	//
	// ============  =================
	// Product Code  Name
	// ============  =================
	// GRD-X5B001    GridION X5
	// GRD-X5B002    GridION X5
	// GRD-X5B003    GridION X5 Mk1
	// MIN-101B      MinIT
	// MIN-101C      MinION Mk1C
	// PRO-PRMC01    PromethION Beta
	// PRO-PRC024    PromethION 24
	// PRO-PRC048    PromethION 48
	// ONT-314       PromethION (Production)
	//
	// If MinKNOW is running on a machine that is not provided by Oxford Nanopore (ie: their own
	// laptop or desktop machine with a MinION plugged in), this field will be empty.
	ProductCode string `protobuf:"bytes,1,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// A human-readable name for the type of host.
	//
	// If `product_code` is set, it will be the name of the model of instrument (see the table in
	// the `product_code` field). Otherwise it will be empty.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The serial of Nanopore device.
	//
	// If `product_code` is empty, this will also be empty.
	//
	// This uniquely identifies the device.
	//
	// See also `network_name`.
	Serial string `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
	// The network name of the host.
	//
	// This is the name the host system believes it has on the network. This can be useful if an IP
	// address was used to connect to the RPC system.
	//
	// For customer computers, this is the only available identfying information for the system.
	NetworkName string `protobuf:"bytes,4,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
}

func (x *DescribeHostResponse) Reset() {
	*x = DescribeHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeHostResponse) ProtoMessage() {}

func (x *DescribeHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeHostResponse.ProtoReflect.Descriptor instead.
func (*DescribeHostResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{1}
}

func (x *DescribeHostResponse) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *DescribeHostResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DescribeHostResponse) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *DescribeHostResponse) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type FlowCellPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the position.
	//
	// For MinIONs, this is the name of the MinION (eg: MN12345). For integrated positions, this is
	// the label for the position on the sequencer (eg: X1 for GridION, 1-A1-D1 for PromethION).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// For integrated flow cell positions, indicates where it is on the sequencing unit.
	//
	// This information is not provided for MinIONs (except for the MinION Mk1C, in which case the
	// position is always 0, 0).
	Location *FlowCellPosition_Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// The state of the flow cell position.
	//
	// If the state is not `STATE_RUNNING` or `STATE_INITIALISING`, the flow cell position can be
	// assumed to be unusable, and the `error_info` field should be populated.
	State FlowCellPosition_State `protobuf:"varint,3,opt,name=state,proto3,enum=minknow_api.manager.FlowCellPosition_State" json:"state,omitempty"`
	// The ports the APIs for this flow cell position are provided on.
	//
	// Always provided if `state` is `STATE_RUNNING`. May also be provided when `state` is one of
	// the hardware errors if the software is still running.
	RpcPorts *FlowCellPosition_RpcPorts `protobuf:"bytes,4,opt,name=rpc_ports,json=rpcPorts,proto3" json:"rpc_ports,omitempty"`
	// Provides a textual description of error states.
	//
	// When `state` is not `STATE_INITIALISING`, `STATE_RUNNING` or `STATE_RESETTING`, this provides
	// some information (in English) about the error. This will be a textual description of the
	// value in `state`, possibly with extra information about the error (if available).
	//
	// This can be useful for dealing with (new) unknown states.
	ErrorInfo           string                                `protobuf:"bytes,5,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	SharedHardwareGroup *FlowCellPosition_SharedHardwareGroup `protobuf:"bytes,6,opt,name=shared_hardware_group,json=sharedHardwareGroup,proto3" json:"shared_hardware_group,omitempty"`
}

func (x *FlowCellPosition) Reset() {
	*x = FlowCellPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCellPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCellPosition) ProtoMessage() {}

func (x *FlowCellPosition) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCellPosition.ProtoReflect.Descriptor instead.
func (*FlowCellPosition) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{2}
}

func (x *FlowCellPosition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowCellPosition) GetLocation() *FlowCellPosition_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FlowCellPosition) GetState() FlowCellPosition_State {
	if x != nil {
		return x.State
	}
	return FlowCellPosition_STATE_INITIALISING
}

func (x *FlowCellPosition) GetRpcPorts() *FlowCellPosition_RpcPorts {
	if x != nil {
		return x.RpcPorts
	}
	return nil
}

func (x *FlowCellPosition) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *FlowCellPosition) GetSharedHardwareGroup() *FlowCellPosition_SharedHardwareGroup {
	if x != nil {
		return x.SharedHardwareGroup
	}
	return nil
}

type FlowCellPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowCellPositionsRequest) Reset() {
	*x = FlowCellPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCellPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCellPositionsRequest) ProtoMessage() {}

func (x *FlowCellPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCellPositionsRequest.ProtoReflect.Descriptor instead.
func (*FlowCellPositionsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{3}
}

type FlowCellPositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many positions are available in total.
	//
	// This is the same in every message returned from a single call, and allows the caller to
	// easily see how many further positions might be in subsequent messages.
	TotalCount int32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Known flow cell positions.
	//
	// Note that not all positions listed here are necessarily available. In particular, integrated
	// flow cell positions (eg: on GridIONs or PromethIONs) will always be listed.
	Positions []*FlowCellPosition `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *FlowCellPositionsResponse) Reset() {
	*x = FlowCellPositionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCellPositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCellPositionsResponse) ProtoMessage() {}

func (x *FlowCellPositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCellPositionsResponse.ProtoReflect.Descriptor instead.
func (*FlowCellPositionsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{4}
}

func (x *FlowCellPositionsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FlowCellPositionsResponse) GetPositions() []*FlowCellPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

type WatchFlowCellPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchFlowCellPositionsRequest) Reset() {
	*x = WatchFlowCellPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchFlowCellPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchFlowCellPositionsRequest) ProtoMessage() {}

func (x *WatchFlowCellPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchFlowCellPositionsRequest.ProtoReflect.Descriptor instead.
func (*WatchFlowCellPositionsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{5}
}

// Each flow cell position will first be listed in `additions`. After that, it may appear in
// `changes` in zero or more messages. Then, it may appear in `removals` once, after which it will
// either never appear again, or appear in `additions` again (restarting the cycle).
//
// No position will ever appear in more than one field in the same response message.
type WatchFlowCellPositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flow cell positions that are new (to this call).
	//
	// Contains flow cell positions that have not been seen before on this call (or have re-appeared
	// after being removed).
	//
	// Note that a flow cell position being listed here does not mean it is available. In
	// particular, integrated flow cell positions (eg: on GridIONs or PromethIONs) will always be
	// provided, so that they can be positioned appropriately.
	Additions []*FlowCellPosition `protobuf:"bytes,1,rep,name=additions,proto3" json:"additions,omitempty"`
	// Flow cell positions that have changed state.
	//
	// Every flow cell position provided in this list will have previously been provided in
	// `additions`.
	Changes []*FlowCellPosition `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
	// A flow cell position has been removed.
	//
	// Note that this can only happen with MinIONs - integrated flow cell positions are never
	// removed (if they become unavailable, this will be noted in the `changes` field).
	Removals []string `protobuf:"bytes,3,rep,name=removals,proto3" json:"removals,omitempty"`
}

func (x *WatchFlowCellPositionsResponse) Reset() {
	*x = WatchFlowCellPositionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchFlowCellPositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchFlowCellPositionsResponse) ProtoMessage() {}

func (x *WatchFlowCellPositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchFlowCellPositionsResponse.ProtoReflect.Descriptor instead.
func (*WatchFlowCellPositionsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{6}
}

func (x *WatchFlowCellPositionsResponse) GetAdditions() []*FlowCellPosition {
	if x != nil {
		return x.Additions
	}
	return nil
}

func (x *WatchFlowCellPositionsResponse) GetChanges() []*FlowCellPosition {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *WatchFlowCellPositionsResponse) GetRemovals() []string {
	if x != nil {
		return x.Removals
	}
	return nil
}

type ResetPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of positions to restart.
	Positions []string `protobuf:"bytes,3,rep,name=positions,proto3" json:"positions,omitempty"`
	// Force the software to be restarted even when it appears to be in a healthy state (ie:
	// STATE_RUNNING).
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *ResetPositionRequest) Reset() {
	*x = ResetPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPositionRequest) ProtoMessage() {}

func (x *ResetPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPositionRequest.ProtoReflect.Descriptor instead.
func (*ResetPositionRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{7}
}

func (x *ResetPositionRequest) GetPositions() []string {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *ResetPositionRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ResetPositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetPositionResponse) Reset() {
	*x = ResetPositionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPositionResponse) ProtoMessage() {}

func (x *ResetPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPositionResponse.ProtoReflect.Descriptor instead.
func (*ResetPositionResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{8}
}

type BasecallerApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BasecallerApiRequest) Reset() {
	*x = BasecallerApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasecallerApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasecallerApiRequest) ProtoMessage() {}

func (x *BasecallerApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasecallerApiRequest.ProtoReflect.Descriptor instead.
func (*BasecallerApiRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{9}
}

type BasecallerApiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The port to use to access the minknow_api.basecaller API using the standard gRPC protocol
	// over TLS
	Secure uint32 `protobuf:"varint,1,opt,name=secure,proto3" json:"secure,omitempty"`
	// The port to use to access the minknow_api.basecaller API using the standard gRPC protocol
	// without TLS
	Insecure uint32 `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// The port to use to access the minknow_api.basecaller API using the gRPC-Web protocol over TLS
	SecureGrpcWeb uint32 `protobuf:"varint,3,opt,name=secure_grpc_web,json=secureGrpcWeb,proto3" json:"secure_grpc_web,omitempty"`
	// DEPRECATED: The port to use to access the minknow_api.basecaller API using the gRPC-Web protocol without
	// TLS
	//
	// From 4.1, this field is now deprecated and will only ever
	// return a value of 0
	InsecureGrpcWeb uint32 `protobuf:"varint,4,opt,name=insecure_grpc_web,json=insecureGrpcWeb,proto3" json:"insecure_grpc_web,omitempty"`
}

func (x *BasecallerApiResponse) Reset() {
	*x = BasecallerApiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasecallerApiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasecallerApiResponse) ProtoMessage() {}

func (x *BasecallerApiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasecallerApiResponse.ProtoReflect.Descriptor instead.
func (*BasecallerApiResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{10}
}

func (x *BasecallerApiResponse) GetSecure() uint32 {
	if x != nil {
		return x.Secure
	}
	return 0
}

func (x *BasecallerApiResponse) GetInsecure() uint32 {
	if x != nil {
		return x.Insecure
	}
	return 0
}

func (x *BasecallerApiResponse) GetSecureGrpcWeb() uint32 {
	if x != nil {
		return x.SecureGrpcWeb
	}
	return 0
}

func (x *BasecallerApiResponse) GetInsecureGrpcWeb() uint32 {
	if x != nil {
		return x.InsecureGrpcWeb
	}
	return 0
}

type GetGuppyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGuppyInfoRequest) Reset() {
	*x = GetGuppyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuppyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuppyInfoRequest) ProtoMessage() {}

func (x *GetGuppyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuppyInfoRequest.ProtoReflect.Descriptor instead.
func (*GetGuppyInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{11}
}

type GetGuppyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The port Guppy is listening on.
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// The Guppy server version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetGuppyInfoResponse) Reset() {
	*x = GetGuppyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuppyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuppyInfoResponse) ProtoMessage() {}

func (x *GetGuppyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuppyInfoResponse.ProtoReflect.Descriptor instead.
func (*GetGuppyInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{12}
}

func (x *GetGuppyInfoResponse) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetGuppyInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetVersionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionInfoRequest) Reset() {
	*x = GetVersionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionInfoRequest) ProtoMessage() {}

func (x *GetVersionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionInfoRequest.ProtoReflect.Descriptor instead.
func (*GetVersionInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{13}
}

type GetVersionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What minknow version is installed. Split into major, minor and patch versions
	// Also includes the full version as a string, which contain the major, minor and patch numbers
	// as well as if the version is pre-release version (-pre), whether it is a release candidate (-rc#)
	// or whether it is a variant version (i.e. for conferences) (-variant). For non-release builds it also
	// includes the hash of the commit it is based on, and whether the working copy is different from that has (-dirty)
	Minknow *GetVersionInfoResponse_MinknowVersion `protobuf:"bytes,1,opt,name=minknow,proto3" json:"minknow,omitempty"`
	// The protocols version specifies what version of bream is installed.
	// By default is set to '0.0.0.0', but will otherwise be set to a Bream release version.
	Protocols string `protobuf:"bytes,2,opt,name=protocols,proto3" json:"protocols,omitempty"`
	// Describes the distribution that this MinKNOW installation is part of, ususally
	// this will be the Metapackage version number/identity, this will be "unknown"
	// if the distribution-version hasn't been set. This information is also communicated
	// in the Manager's DaemonMessage in daemon.proto
	DistributionVersion string `protobuf:"bytes,3,opt,name=distribution_version,json=distributionVersion,proto3" json:"distribution_version,omitempty"`
	// Indicates if the MinKNOW distribution including components such as Bream
	// are stable, unstable or have been modified.
	DistributionStatus GetVersionInfoResponse_DistributionStatus `protobuf:"varint,4,opt,name=distribution_status,json=distributionStatus,proto3,enum=minknow_api.instance.GetVersionInfoResponse_DistributionStatus" json:"distribution_status,omitempty"`
	// Version of guppy MinKNOW was packaged against.
	GuppyBuildVersion string `protobuf:"bytes,5,opt,name=guppy_build_version,json=guppyBuildVersion,proto3" json:"guppy_build_version,omitempty"`
	// Version of guppy MinKNOW running with.
	GuppyConnectedVersion string `protobuf:"bytes,6,opt,name=guppy_connected_version,json=guppyConnectedVersion,proto3" json:"guppy_connected_version,omitempty"`
	// The configuration version specifies what version of ont-configuration (wanda) is installed.
	// By default is set to '0.0.0.0', but will otherwise be set to a Wanda release version.
	//
	// Since 3.6
	Configuration string `protobuf:"bytes,7,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Indicates what installation type minknow was installed as. Certain installation
	// types may turn features on or off depending on the type. For example,
	// for ont and prod installs, the production.proto service will be enabled
	// to make calls such as writing to the eeprom
	InstallationType GetVersionInfoResponse_InstallationType `protobuf:"varint,8,opt,name=installation_type,json=installationType,proto3,enum=minknow_api.manager.GetVersionInfoResponse_InstallationType" json:"installation_type,omitempty"`
}

func (x *GetVersionInfoResponse) Reset() {
	*x = GetVersionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionInfoResponse) ProtoMessage() {}

func (x *GetVersionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionInfoResponse.ProtoReflect.Descriptor instead.
func (*GetVersionInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{14}
}

func (x *GetVersionInfoResponse) GetMinknow() *GetVersionInfoResponse_MinknowVersion {
	if x != nil {
		return x.Minknow
	}
	return nil
}

func (x *GetVersionInfoResponse) GetProtocols() string {
	if x != nil {
		return x.Protocols
	}
	return ""
}

func (x *GetVersionInfoResponse) GetDistributionVersion() string {
	if x != nil {
		return x.DistributionVersion
	}
	return ""
}

func (x *GetVersionInfoResponse) GetDistributionStatus() GetVersionInfoResponse_DistributionStatus {
	if x != nil {
		return x.DistributionStatus
	}
	return GetVersionInfoResponse_UNKNOWN
}

func (x *GetVersionInfoResponse) GetGuppyBuildVersion() string {
	if x != nil {
		return x.GuppyBuildVersion
	}
	return ""
}

func (x *GetVersionInfoResponse) GetGuppyConnectedVersion() string {
	if x != nil {
		return x.GuppyConnectedVersion
	}
	return ""
}

func (x *GetVersionInfoResponse) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

func (x *GetVersionInfoResponse) GetInstallationType() GetVersionInfoResponse_InstallationType {
	if x != nil {
		return x.InstallationType
	}
	return GetVersionInfoResponse_ONT
}

type ListProtocolOutputDirFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the root path to list files from. If the path is left empty, then the base protocol output directory
	// will be used.
	//
	// Note that the path specified HAS to be a descendant of the protocol output directory, otherwise a INVALID_ARGUMENT
	// error will be returned
	//
	// If the path is left empty, and the path specified in the user config doesn't exist, then the NOT_FOUND error code
	// will be returned
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ListProtocolOutputDirFilesRequest) Reset() {
	*x = ListProtocolOutputDirFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolOutputDirFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolOutputDirFilesRequest) ProtoMessage() {}

func (x *ListProtocolOutputDirFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolOutputDirFilesRequest.ProtoReflect.Descriptor instead.
func (*ListProtocolOutputDirFilesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ListProtocolOutputDirFilesRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListProtocolOutputDirFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of sub-directories in the directory specified
	Directories []*ListProtocolOutputDirFilesResponse_DirectoryInfo `protobuf:"bytes,1,rep,name=directories,proto3" json:"directories,omitempty"`
	// List of files in the directory specified
	Files []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	// The absolute directory that is being listed within this repsonse
	CurrentListedPath string `protobuf:"bytes,3,opt,name=current_listed_path,json=currentListedPath,proto3" json:"current_listed_path,omitempty"`
}

func (x *ListProtocolOutputDirFilesResponse) Reset() {
	*x = ListProtocolOutputDirFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolOutputDirFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolOutputDirFilesResponse) ProtoMessage() {}

func (x *ListProtocolOutputDirFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolOutputDirFilesResponse.ProtoReflect.Descriptor instead.
func (*ListProtocolOutputDirFilesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{16}
}

func (x *ListProtocolOutputDirFilesResponse) GetDirectories() []*ListProtocolOutputDirFilesResponse_DirectoryInfo {
	if x != nil {
		return x.Directories
	}
	return nil
}

func (x *ListProtocolOutputDirFilesResponse) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListProtocolOutputDirFilesResponse) GetCurrentListedPath() string {
	if x != nil {
		return x.CurrentListedPath
	}
	return ""
}

type CreateDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path at which to create the directory.
	//
	// This must exist, be a directory, and be within the protocol output directory. This can be
	// determined via calls to list_protocol_output_dir_files().
	ParentPath string `protobuf:"bytes,1,opt,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	// The name of the directory to create.
	//
	// This must be a single path component (ie: it cannot contain '/' or '\'). There may be other
	// restrictions on valid characters, depending on the operating system.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateDirectoryRequest) Reset() {
	*x = CreateDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryRequest) ProtoMessage() {}

func (x *CreateDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryRequest.ProtoReflect.Descriptor instead.
func (*CreateDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{17}
}

func (x *CreateDirectoryRequest) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *CreateDirectoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path to the created directory.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *CreateDirectoryResponse) Reset() {
	*x = CreateDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryResponse) ProtoMessage() {}

func (x *CreateDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryResponse.ProtoReflect.Descriptor instead.
func (*CreateDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{18}
}

func (x *CreateDirectoryResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// disk-usage information for one file-system
type FilesystemDiskSpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the file-system
	FilesystemId string `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
	// How much space is left on the file-system
	BytesAvailable uint64 `protobuf:"varint,2,opt,name=bytes_available,json=bytesAvailable,proto3" json:"bytes_available,omitempty"`
	// The total capacity of the file-system when empty.
	BytesCapacity uint64 `protobuf:"varint,3,opt,name=bytes_capacity,json=bytesCapacity,proto3" json:"bytes_capacity,omitempty"`
	// A list of what types of file MinKNOW stores on this file-system, eg:
	// reads, logs, intermediate-files, etc.
	FileTypesStored []string `protobuf:"bytes,4,rep,name=file_types_stored,json=fileTypesStored,proto3" json:"file_types_stored,omitempty"`
	// MinKNOW needs this much space to stop experiments. If bytes_available
	// goes below this number, data could be lost!
	BytesToStopCleanly uint64 `protobuf:"varint,5,opt,name=bytes_to_stop_cleanly,json=bytesToStopCleanly,proto3" json:"bytes_to_stop_cleanly,omitempty"`
	// The amount of space left on the file-system when recommend_alert
	// was set true.
	BytesWhenAlertIssued uint64 `protobuf:"varint,6,opt,name=bytes_when_alert_issued,json=bytesWhenAlertIssued,proto3" json:"bytes_when_alert_issued,omitempty"`
	// MinKNOW recommends that you alert someone about the disk-usage
	RecommendAlert bool `protobuf:"varint,7,opt,name=recommend_alert,json=recommendAlert,proto3" json:"recommend_alert,omitempty"`
	// MinKNOW recommends that you stop experiments due to disk-usage
	// concerns
	RecommendStop bool `protobuf:"varint,8,opt,name=recommend_stop,json=recommendStop,proto3" json:"recommend_stop,omitempty"`
	// Rate of change in bytes_available (per second) +'ve numbers indicate
	// that bytes_available is decreasing and space is being used
	// A value of 0 can indicate that this has not applicable or not available.
	BytesPerSecond int64 `protobuf:"varint,9,opt,name=bytes_per_second,json=bytesPerSecond,proto3" json:"bytes_per_second,omitempty"`
}

func (x *FilesystemDiskSpaceInfo) Reset() {
	*x = FilesystemDiskSpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDiskSpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDiskSpaceInfo) ProtoMessage() {}

func (x *FilesystemDiskSpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDiskSpaceInfo.ProtoReflect.Descriptor instead.
func (*FilesystemDiskSpaceInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{19}
}

func (x *FilesystemDiskSpaceInfo) GetFilesystemId() string {
	if x != nil {
		return x.FilesystemId
	}
	return ""
}

func (x *FilesystemDiskSpaceInfo) GetBytesAvailable() uint64 {
	if x != nil {
		return x.BytesAvailable
	}
	return 0
}

func (x *FilesystemDiskSpaceInfo) GetBytesCapacity() uint64 {
	if x != nil {
		return x.BytesCapacity
	}
	return 0
}

func (x *FilesystemDiskSpaceInfo) GetFileTypesStored() []string {
	if x != nil {
		return x.FileTypesStored
	}
	return nil
}

func (x *FilesystemDiskSpaceInfo) GetBytesToStopCleanly() uint64 {
	if x != nil {
		return x.BytesToStopCleanly
	}
	return 0
}

func (x *FilesystemDiskSpaceInfo) GetBytesWhenAlertIssued() uint64 {
	if x != nil {
		return x.BytesWhenAlertIssued
	}
	return 0
}

func (x *FilesystemDiskSpaceInfo) GetRecommendAlert() bool {
	if x != nil {
		return x.RecommendAlert
	}
	return false
}

func (x *FilesystemDiskSpaceInfo) GetRecommendStop() bool {
	if x != nil {
		return x.RecommendStop
	}
	return false
}

func (x *FilesystemDiskSpaceInfo) GetBytesPerSecond() int64 {
	if x != nil {
		return x.BytesPerSecond
	}
	return 0
}

type GetDiskSpaceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDiskSpaceInfoRequest) Reset() {
	*x = GetDiskSpaceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskSpaceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskSpaceInfoRequest) ProtoMessage() {}

func (x *GetDiskSpaceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskSpaceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDiskSpaceInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{20}
}

type StreamDiskSpaceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk space information will be streamed with this value determining the
	// period in seconds between updates.
	// A period of 0 is invalid
	Period uint32 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *StreamDiskSpaceInfoRequest) Reset() {
	*x = StreamDiskSpaceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDiskSpaceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDiskSpaceInfoRequest) ProtoMessage() {}

func (x *StreamDiskSpaceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDiskSpaceInfoRequest.ProtoReflect.Descriptor instead.
func (*StreamDiskSpaceInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{21}
}

func (x *StreamDiskSpaceInfoRequest) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type GetDiskSpaceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemDiskSpaceInfo []*FilesystemDiskSpaceInfo `protobuf:"bytes,1,rep,name=filesystem_disk_space_info,json=filesystemDiskSpaceInfo,proto3" json:"filesystem_disk_space_info,omitempty"`
}

func (x *GetDiskSpaceInfoResponse) Reset() {
	*x = GetDiskSpaceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskSpaceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskSpaceInfoResponse) ProtoMessage() {}

func (x *GetDiskSpaceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskSpaceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDiskSpaceInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{22}
}

func (x *GetDiskSpaceInfoResponse) GetFilesystemDiskSpaceInfo() []*FilesystemDiskSpaceInfo {
	if x != nil {
		return x.FilesystemDiskSpaceInfo
	}
	return nil
}

type GetBarcodeKitInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBarcodeKitInfoRequest) Reset() {
	*x = GetBarcodeKitInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBarcodeKitInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBarcodeKitInfoRequest) ProtoMessage() {}

func (x *GetBarcodeKitInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBarcodeKitInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBarcodeKitInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{23}
}

type GetBarcodeKitInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of barcode kit name to barcode kit info
	BarcodeKitInfo map[string]*GetBarcodeKitInfoResponse_BarcodeKitInfo `protobuf:"bytes,1,rep,name=barcode_kit_info,json=barcodeKitInfo,proto3" json:"barcode_kit_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetBarcodeKitInfoResponse) Reset() {
	*x = GetBarcodeKitInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBarcodeKitInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBarcodeKitInfoResponse) ProtoMessage() {}

func (x *GetBarcodeKitInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBarcodeKitInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBarcodeKitInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{24}
}

func (x *GetBarcodeKitInfoResponse) GetBarcodeKitInfo() map[string]*GetBarcodeKitInfoResponse_BarcodeKitInfo {
	if x != nil {
		return x.BarcodeKitInfo
	}
	return nil
}

type GetLampKitInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLampKitInfoRequest) Reset() {
	*x = GetLampKitInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLampKitInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLampKitInfoRequest) ProtoMessage() {}

func (x *GetLampKitInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLampKitInfoRequest.ProtoReflect.Descriptor instead.
func (*GetLampKitInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{25}
}

type GetLampKitInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lamp kit names
	LampKits []string `protobuf:"bytes,2,rep,name=lamp_kits,json=lampKits,proto3" json:"lamp_kits,omitempty"`
}

func (x *GetLampKitInfoResponse) Reset() {
	*x = GetLampKitInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLampKitInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLampKitInfoResponse) ProtoMessage() {}

func (x *GetLampKitInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLampKitInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLampKitInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{26}
}

func (x *GetLampKitInfoResponse) GetLampKits() []string {
	if x != nil {
		return x.LampKits
	}
	return nil
}

type GetBarcodeKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Names of barcode kits to obtain barcode names for
	//
	// Fails with INVALID_ARGUMENT if any of the requested `barcode_kit_names` are unavailable
	//
	BarcodeKitNames []string `protobuf:"bytes,1,rep,name=barcode_kit_names,json=barcodeKitNames,proto3" json:"barcode_kit_names,omitempty"`
	// Name of lamp kit to obtain barcode names for.
	//
	// Fails with INVALID_ARGUMENT if the requested `lamp_kit_name` is unavailable.
	LampKitName string `protobuf:"bytes,2,opt,name=lamp_kit_name,json=lampKitName,proto3" json:"lamp_kit_name,omitempty"`
}

func (x *GetBarcodeKeysRequest) Reset() {
	*x = GetBarcodeKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBarcodeKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBarcodeKeysRequest) ProtoMessage() {}

func (x *GetBarcodeKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBarcodeKeysRequest.ProtoReflect.Descriptor instead.
func (*GetBarcodeKeysRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{27}
}

func (x *GetBarcodeKeysRequest) GetBarcodeKitNames() []string {
	if x != nil {
		return x.BarcodeKitNames
	}
	return nil
}

func (x *GetBarcodeKeysRequest) GetLampKitName() string {
	if x != nil {
		return x.LampKitName
	}
	return ""
}

type GetBarcodeKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returned barcode keys.
	BarcodeKeys []string `protobuf:"bytes,1,rep,name=barcode_keys,json=barcodeKeys,proto3" json:"barcode_keys,omitempty"`
	// Returned lamp barcode ids.
	LampKeys []string `protobuf:"bytes,2,rep,name=lamp_keys,json=lampKeys,proto3" json:"lamp_keys,omitempty"`
	// Combined barcode and lamp keys.
	//
	// Returned keys are joined strings of all requested barcode kits, giving the caller
	// a unique string to identify each barcode pair.
	//
	// eg. if both a lamp kit + barcode kit are specified, NxM barcode keys are returned:
	//  - barcode01_lamp01
	//  - barcode01_lamp02
	//  - barcode01_lamp03
	//  - barcode02_lamp01
	//  - barcode02_lamp02
	//  - barcode02_lamp03
	CombinedKeys []string `protobuf:"bytes,3,rep,name=combined_keys,json=combinedKeys,proto3" json:"combined_keys,omitempty"`
}

func (x *GetBarcodeKeysResponse) Reset() {
	*x = GetBarcodeKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBarcodeKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBarcodeKeysResponse) ProtoMessage() {}

func (x *GetBarcodeKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBarcodeKeysResponse.ProtoReflect.Descriptor instead.
func (*GetBarcodeKeysResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{28}
}

func (x *GetBarcodeKeysResponse) GetBarcodeKeys() []string {
	if x != nil {
		return x.BarcodeKeys
	}
	return nil
}

func (x *GetBarcodeKeysResponse) GetLampKeys() []string {
	if x != nil {
		return x.LampKeys
	}
	return nil
}

func (x *GetBarcodeKeysResponse) GetCombinedKeys() []string {
	if x != nil {
		return x.CombinedKeys
	}
	return nil
}

// Request message for `ManagerService.get_flow_cell_types`.
type GetFlowCellTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFlowCellTypesRequest) Reset() {
	*x = GetFlowCellTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowCellTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowCellTypesRequest) ProtoMessage() {}

func (x *GetFlowCellTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowCellTypesRequest.ProtoReflect.Descriptor instead.
func (*GetFlowCellTypesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{29}
}

// Response message for `ManagerService.get_flow_cell_types`.
type GetFlowCellTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flow cell types.
	Types []*GetFlowCellTypesResponse_Info `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *GetFlowCellTypesResponse) Reset() {
	*x = GetFlowCellTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowCellTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowCellTypesResponse) ProtoMessage() {}

func (x *GetFlowCellTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowCellTypesResponse.ProtoReflect.Descriptor instead.
func (*GetFlowCellTypesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{30}
}

func (x *GetFlowCellTypesResponse) GetTypes() []*GetFlowCellTypesResponse_Info {
	if x != nil {
		return x.Types
	}
	return nil
}

// Request message for `ManagerService.get_sequencing_kits`.
type GetSequencingKitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The product code of the flow cell that will be used for sequencing.
	//
	// Only kits compatible with this flow cell type will be returned (currently, this means that
	// there is at least one (sequencing or control) protocol that is compatible with both the kit
	// and this flow cell product code).
	//
	// This may also affect the returned information about the kit. For example, if it isn't
	// possible to basecall on the flow cell, none of the kits will claim to be barcoding capable
	// (or compatible with any barcoding expansion kits).
	FlowCellProductCode string `protobuf:"bytes,1,opt,name=flow_cell_product_code,json=flowCellProductCode,proto3" json:"flow_cell_product_code,omitempty"`
}

func (x *GetSequencingKitsRequest) Reset() {
	*x = GetSequencingKitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSequencingKitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSequencingKitsRequest) ProtoMessage() {}

func (x *GetSequencingKitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSequencingKitsRequest.ProtoReflect.Descriptor instead.
func (*GetSequencingKitsRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{31}
}

func (x *GetSequencingKitsRequest) GetFlowCellProductCode() string {
	if x != nil {
		return x.FlowCellProductCode
	}
	return ""
}

// Response message for `ManagerService.get_sequencing_kits`.
type GetSequencingKitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The known sequencing kits.
	Kits []*GetSequencingKitsResponse_Kit `protobuf:"bytes,1,rep,name=kits,proto3" json:"kits,omitempty"`
	// The possible barcoding expansion kits.
	//
	// These are kits that can be used in combination with certain sequencing kits to add (or
	// extend) barcoding functionality.
	BarcodingExpansionKits []*GetSequencingKitsResponse_BarcodingExpansionKit `protobuf:"bytes,2,rep,name=barcoding_expansion_kits,json=barcodingExpansionKits,proto3" json:"barcoding_expansion_kits,omitempty"`
}

func (x *GetSequencingKitsResponse) Reset() {
	*x = GetSequencingKitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSequencingKitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSequencingKitsResponse) ProtoMessage() {}

func (x *GetSequencingKitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSequencingKitsResponse.ProtoReflect.Descriptor instead.
func (*GetSequencingKitsResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{32}
}

func (x *GetSequencingKitsResponse) GetKits() []*GetSequencingKitsResponse_Kit {
	if x != nil {
		return x.Kits
	}
	return nil
}

func (x *GetSequencingKitsResponse) GetBarcodingExpansionKits() []*GetSequencingKitsResponse_BarcodingExpansionKit {
	if x != nil {
		return x.BarcodingExpansionKits
	}
	return nil
}

type AddSimulatedDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the position, this must be unique and the correct format:
	//
	// For MinIONs and MinION-mk1Cs, "MS" followed by five digits, eg: "MS12345".
	// For GridIONs, "GS" followed by five digits, eg: "GS12345".
	//
	// PromethIONs position-names have no format restriction, but must be unique
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddSimulatedDeviceRequest) Reset() {
	*x = AddSimulatedDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSimulatedDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSimulatedDeviceRequest) ProtoMessage() {}

func (x *AddSimulatedDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSimulatedDeviceRequest.ProtoReflect.Descriptor instead.
func (*AddSimulatedDeviceRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{33}
}

func (x *AddSimulatedDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddSimulatedDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddSimulatedDeviceResponse) Reset() {
	*x = AddSimulatedDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSimulatedDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSimulatedDeviceResponse) ProtoMessage() {}

func (x *AddSimulatedDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSimulatedDeviceResponse.ProtoReflect.Descriptor instead.
func (*AddSimulatedDeviceResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{34}
}

type RemoveSimulatedDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the simulated device to be removed
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RemoveSimulatedDeviceRequest) Reset() {
	*x = RemoveSimulatedDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSimulatedDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSimulatedDeviceRequest) ProtoMessage() {}

func (x *RemoveSimulatedDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSimulatedDeviceRequest.ProtoReflect.Descriptor instead.
func (*RemoveSimulatedDeviceRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{35}
}

func (x *RemoveSimulatedDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RemoveSimulatedDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSimulatedDeviceResponse) Reset() {
	*x = RemoveSimulatedDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSimulatedDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSimulatedDeviceResponse) ProtoMessage() {}

func (x *RemoveSimulatedDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSimulatedDeviceResponse.ProtoReflect.Descriptor instead.
func (*RemoveSimulatedDeviceResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{36}
}

type LocalAuthenticationTokenPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalAuthenticationTokenPathRequest) Reset() {
	*x = LocalAuthenticationTokenPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalAuthenticationTokenPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalAuthenticationTokenPathRequest) ProtoMessage() {}

func (x *LocalAuthenticationTokenPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalAuthenticationTokenPathRequest.ProtoReflect.Descriptor instead.
func (*LocalAuthenticationTokenPathRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{37}
}

type LocalAuthenticationTokenPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path of the local authentication token
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *LocalAuthenticationTokenPathResponse) Reset() {
	*x = LocalAuthenticationTokenPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalAuthenticationTokenPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalAuthenticationTokenPathResponse) ProtoMessage() {}

func (x *LocalAuthenticationTokenPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalAuthenticationTokenPathResponse.ProtoReflect.Descriptor instead.
func (*LocalAuthenticationTokenPathResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{38}
}

func (x *LocalAuthenticationTokenPathResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FlowCellPosition_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column (counting from 0, left-to-right) of the flow cell position on the sequencing
	// unit when viewed from above/in front.
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	// The row (counting from 0, top-to-bottom) of the flow cell position on the sequencing
	// unit when viewed from above/in front.
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *FlowCellPosition_Location) Reset() {
	*x = FlowCellPosition_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCellPosition_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCellPosition_Location) ProtoMessage() {}

func (x *FlowCellPosition_Location) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCellPosition_Location.ProtoReflect.Descriptor instead.
func (*FlowCellPosition_Location) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FlowCellPosition_Location) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *FlowCellPosition_Location) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type FlowCellPosition_RpcPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A port providing the standard gRPC protocol over TLS
	Secure uint32 `protobuf:"varint,1,opt,name=secure,proto3" json:"secure,omitempty"`
	// A port providing the standard gRPC protocol without TLS
	Insecure uint32 `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// A port providing the gRPC-Web protocol over TLS
	SecureGrpcWeb uint32 `protobuf:"varint,3,opt,name=secure_grpc_web,json=secureGrpcWeb,proto3" json:"secure_grpc_web,omitempty"`
	// DEPRECATED: A port providing the gRPC-Web protocol without TLS
	//
	// From 4.1, this field is now deprecated and will only ever
	// return a value of 0
	InsecureGrpcWeb uint32 `protobuf:"varint,4,opt,name=insecure_grpc_web,json=insecureGrpcWeb,proto3" json:"insecure_grpc_web,omitempty"`
}

func (x *FlowCellPosition_RpcPorts) Reset() {
	*x = FlowCellPosition_RpcPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCellPosition_RpcPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCellPosition_RpcPorts) ProtoMessage() {}

func (x *FlowCellPosition_RpcPorts) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCellPosition_RpcPorts.ProtoReflect.Descriptor instead.
func (*FlowCellPosition_RpcPorts) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{2, 1}
}

func (x *FlowCellPosition_RpcPorts) GetSecure() uint32 {
	if x != nil {
		return x.Secure
	}
	return 0
}

func (x *FlowCellPosition_RpcPorts) GetInsecure() uint32 {
	if x != nil {
		return x.Insecure
	}
	return 0
}

func (x *FlowCellPosition_RpcPorts) GetSecureGrpcWeb() uint32 {
	if x != nil {
		return x.SecureGrpcWeb
	}
	return 0
}

func (x *FlowCellPosition_RpcPorts) GetInsecureGrpcWeb() uint32 {
	if x != nil {
		return x.InsecureGrpcWeb
	}
	return 0
}

// Some positions may share hardware. Positions that share hardware will have the same
// group-id. If positions do share hardware, to reset the hardware you will need to
// reset all positions in the group at the same time.
type FlowCellPosition_SharedHardwareGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *FlowCellPosition_SharedHardwareGroup) Reset() {
	*x = FlowCellPosition_SharedHardwareGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCellPosition_SharedHardwareGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCellPosition_SharedHardwareGroup) ProtoMessage() {}

func (x *FlowCellPosition_SharedHardwareGroup) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCellPosition_SharedHardwareGroup.ProtoReflect.Descriptor instead.
func (*FlowCellPosition_SharedHardwareGroup) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{2, 2}
}

func (x *FlowCellPosition_SharedHardwareGroup) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ListProtocolOutputDirFilesResponse_DirectoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DirectoryCount int32  `protobuf:"varint,2,opt,name=directory_count,json=directoryCount,proto3" json:"directory_count,omitempty"`
	FileCount      int32  `protobuf:"varint,3,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
}

func (x *ListProtocolOutputDirFilesResponse_DirectoryInfo) Reset() {
	*x = ListProtocolOutputDirFilesResponse_DirectoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProtocolOutputDirFilesResponse_DirectoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProtocolOutputDirFilesResponse_DirectoryInfo) ProtoMessage() {}

func (x *ListProtocolOutputDirFilesResponse_DirectoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProtocolOutputDirFilesResponse_DirectoryInfo.ProtoReflect.Descriptor instead.
func (*ListProtocolOutputDirFilesResponse_DirectoryInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ListProtocolOutputDirFilesResponse_DirectoryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListProtocolOutputDirFilesResponse_DirectoryInfo) GetDirectoryCount() int32 {
	if x != nil {
		return x.DirectoryCount
	}
	return 0
}

func (x *ListProtocolOutputDirFilesResponse_DirectoryInfo) GetFileCount() int32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

type GetBarcodeKitInfoResponse_BarcodeKitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDual     bool `protobuf:"varint,2,opt,name=is_dual,json=isDual,proto3" json:"is_dual,omitempty"`
	IsBothEnds bool `protobuf:"varint,3,opt,name=is_both_ends,json=isBothEnds,proto3" json:"is_both_ends,omitempty"`
}

func (x *GetBarcodeKitInfoResponse_BarcodeKitInfo) Reset() {
	*x = GetBarcodeKitInfoResponse_BarcodeKitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBarcodeKitInfoResponse_BarcodeKitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBarcodeKitInfoResponse_BarcodeKitInfo) ProtoMessage() {}

func (x *GetBarcodeKitInfoResponse_BarcodeKitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBarcodeKitInfoResponse_BarcodeKitInfo.ProtoReflect.Descriptor instead.
func (*GetBarcodeKitInfoResponse_BarcodeKitInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{24, 0}
}

func (x *GetBarcodeKitInfoResponse_BarcodeKitInfo) GetIsDual() bool {
	if x != nil {
		return x.IsDual
	}
	return false
}

func (x *GetBarcodeKitInfoResponse_BarcodeKitInfo) GetIsBothEnds() bool {
	if x != nil {
		return x.IsBothEnds
	}
	return false
}

// Information about a flow cell type.
type GetFlowCellTypesResponse_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The product code for the flow cell type.
	//
	// This is the user-visible name for the flow cell type. It is the name used to order flow
	// cells, and is also displayed on the packaging.
	//
	// While most product codes are 10 characters, be aware that longer product codes can exist
	// and have been used in the past.
	//
	// Example: "FLO-MIN106".
	ProductCode string `protobuf:"bytes,1,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// The connector type of this flow cell type.
	//
	// This determines which flow cell positions it is possible to insert this flow cell into.
	// The connector type for a given flow cell position can be determined using
	// `minknow_api.device.DeviceService.get_device_state`.
	//
	// This will never be ``FCCON_NOT_SET``.
	ConnectorType FlowCellConnectorType `protobuf:"varint,2,opt,name=connector_type,json=connectorType,proto3,enum=minknow_api.device.FlowCellConnectorType" json:"connector_type,omitempty"`
	// Indicates that live basecalling is not possible on the flow cell.
	//
	// Note that almost all flow cell types can be basecalled on: that is why this indicates a
	// negative (saving some bytes on the wire by allowing the common case of basecalling being
	// possible to be omitted entirely).
	CannotLiveBasecall bool `protobuf:"varint,3,opt,name=cannot_live_basecall,json=cannotLiveBasecall,proto3" json:"cannot_live_basecall,omitempty"`
}

func (x *GetFlowCellTypesResponse_Info) Reset() {
	*x = GetFlowCellTypesResponse_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowCellTypesResponse_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowCellTypesResponse_Info) ProtoMessage() {}

func (x *GetFlowCellTypesResponse_Info) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowCellTypesResponse_Info.ProtoReflect.Descriptor instead.
func (*GetFlowCellTypesResponse_Info) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{30, 0}
}

func (x *GetFlowCellTypesResponse_Info) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *GetFlowCellTypesResponse_Info) GetConnectorType() FlowCellConnectorType {
	if x != nil {
		return x.ConnectorType
	}
	return FlowCellConnectorType_FCCON_NOT_SET
}

func (x *GetFlowCellTypesResponse_Info) GetCannotLiveBasecall() bool {
	if x != nil {
		return x.CannotLiveBasecall
	}
	return false
}

// Information about a sequencing kit.
type GetSequencingKitsResponse_Kit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The product code for the sequencing kit.
	//
	// This is the user-visible name for the kit. It is the name used to order kits, and is also
	// displayed on the packaging.
	//
	// While most product codes are 10-15 characters, be aware that longer (or shorter) product
	// codes can exist.
	//
	// Examples: "SQK-LSK109", "OND-SQK-LP0096S".
	ProductCode string `protobuf:"bytes,1,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// Compatible barcoding expansion kits.
	//
	// These are indexes into the GetSequencingKitsResponse.barcoding_expansion_kits list. For
	// example, 0 would indicate the first kit in that list. The values are guaranteed to be
	// unique and valid indexes for that list.
	BarcodingExpansionKits []int32 `protobuf:"varint,2,rep,packed,name=barcoding_expansion_kits,json=barcodingExpansionKits,proto3" json:"barcoding_expansion_kits,omitempty"`
	// Whether barcoding support is part of the sequencing kit.
	//
	// If this is set, barcoding can be done without any expansion kits (and, in fact, barcoding
	// is an integral part of the kit).
	IncludesBarcoding bool `protobuf:"varint,3,opt,name=includes_barcoding,json=includesBarcoding,proto3" json:"includes_barcoding,omitempty"`
	// Whether the kit can be used for LamPORE diagnostics.
	LampKit bool `protobuf:"varint,16,opt,name=lamp_kit,json=lampKit,proto3" json:"lamp_kit,omitempty"`
	// Whether there is a "control" protocol available for this kit.
	HasControlProtocol bool `protobuf:"varint,4,opt,name=has_control_protocol,json=hasControlProtocol,proto3" json:"has_control_protocol,omitempty"`
	// Indicates there is no sequencing protocol available for this kit.
	//
	// This is an unusual situation. If a kit is known about, it should generally have a
	// sequencing protocol associated with it, and it would be strange to have a control
	// protocol available but no sequencing protocol.
	NoSequencingProtocol bool `protobuf:"varint,17,opt,name=no_sequencing_protocol,json=noSequencingProtocol,proto3" json:"no_sequencing_protocol,omitempty"`
	// Indicates that the sequencing kit is one of the most commonly used ones.
	//
	// This can be used to display such kits first, or otherwise highlight them in some way.
	FrequentlyUsed bool `protobuf:"varint,18,opt,name=frequently_used,json=frequentlyUsed,proto3" json:"frequently_used,omitempty"`
	// The kit can be used with DNA samples.
	Dna bool `protobuf:"varint,5,opt,name=dna,proto3" json:"dna,omitempty"`
	// The kit can be used with RNA samples.
	Rna bool `protobuf:"varint,6,opt,name=rna,proto3" json:"rna,omitempty"`
	// The kit can be used with samples that have had PCR applied to them.
	Pcr bool `protobuf:"varint,7,opt,name=pcr,proto3" json:"pcr,omitempty"`
	// The kit can be used without a PCR step.
	PcrFree bool `protobuf:"varint,8,opt,name=pcr_free,json=pcrFree,proto3" json:"pcr_free,omitempty"`
}

func (x *GetSequencingKitsResponse_Kit) Reset() {
	*x = GetSequencingKitsResponse_Kit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSequencingKitsResponse_Kit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSequencingKitsResponse_Kit) ProtoMessage() {}

func (x *GetSequencingKitsResponse_Kit) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSequencingKitsResponse_Kit.ProtoReflect.Descriptor instead.
func (*GetSequencingKitsResponse_Kit) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{32, 0}
}

func (x *GetSequencingKitsResponse_Kit) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *GetSequencingKitsResponse_Kit) GetBarcodingExpansionKits() []int32 {
	if x != nil {
		return x.BarcodingExpansionKits
	}
	return nil
}

func (x *GetSequencingKitsResponse_Kit) GetIncludesBarcoding() bool {
	if x != nil {
		return x.IncludesBarcoding
	}
	return false
}

func (x *GetSequencingKitsResponse_Kit) GetLampKit() bool {
	if x != nil {
		return x.LampKit
	}
	return false
}

func (x *GetSequencingKitsResponse_Kit) GetHasControlProtocol() bool {
	if x != nil {
		return x.HasControlProtocol
	}
	return false
}

func (x *GetSequencingKitsResponse_Kit) GetNoSequencingProtocol() bool {
	if x != nil {
		return x.NoSequencingProtocol
	}
	return false
}

func (x *GetSequencingKitsResponse_Kit) GetFrequentlyUsed() bool {
	if x != nil {
		return x.FrequentlyUsed
	}
	return false
}

func (x *GetSequencingKitsResponse_Kit) GetDna() bool {
	if x != nil {
		return x.Dna
	}
	return false
}

func (x *GetSequencingKitsResponse_Kit) GetRna() bool {
	if x != nil {
		return x.Rna
	}
	return false
}

func (x *GetSequencingKitsResponse_Kit) GetPcr() bool {
	if x != nil {
		return x.Pcr
	}
	return false
}

func (x *GetSequencingKitsResponse_Kit) GetPcrFree() bool {
	if x != nil {
		return x.PcrFree
	}
	return false
}

// Information about a barcoding expansion kit.
//
// In the future, this may include compatibility information for dual barcoding, for example.
type GetSequencingKitsResponse_BarcodingExpansionKit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The product code for the barcoding expansion kit.
	//
	// This is the user-visible name for the kit. It is the name used to order kits, and is also
	// displayed on the packaging.
	//
	// While most product codes are 10 characters, be aware that longer product codes can exist.
	//
	// Example: "EXP-NBD104".
	ProductCode string `protobuf:"bytes,1,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
}

func (x *GetSequencingKitsResponse_BarcodingExpansionKit) Reset() {
	*x = GetSequencingKitsResponse_BarcodingExpansionKit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSequencingKitsResponse_BarcodingExpansionKit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSequencingKitsResponse_BarcodingExpansionKit) ProtoMessage() {}

func (x *GetSequencingKitsResponse_BarcodingExpansionKit) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSequencingKitsResponse_BarcodingExpansionKit.ProtoReflect.Descriptor instead.
func (*GetSequencingKitsResponse_BarcodingExpansionKit) Descriptor() ([]byte, []int) {
	return file_minknow_api_manager_proto_rawDescGZIP(), []int{32, 1}
}

func (x *GetSequencingKitsResponse_BarcodingExpansionKit) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

var File_minknow_api_manager_proto protoreflect.FileDescriptor

var file_minknow_api_manager_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70,
	0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x96, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x06, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65,
	0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a,
	0x09, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x08, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6d, 0x0a, 0x15, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x26, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79,
	0x1a, 0x92, 0x01, 0x0a, 0x08, 0x52, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x77, 0x65, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x47, 0x72, 0x70, 0x63, 0x57, 0x65, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x47, 0x72,
	0x70, 0x63, 0x57, 0x65, 0x62, 0x1a, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57,
	0x41, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x05, 0x22, 0x1a, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x81, 0x01,
	0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65,
	0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x1e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x4a, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14,
	0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x47, 0x72, 0x70, 0x63, 0x57, 0x65, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x47,
	0x72, 0x70, 0x63, 0x57, 0x65, 0x62, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x75, 0x70,
	0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x47, 0x75, 0x70, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfa, 0x04, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x70, 0x70, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x67, 0x75, 0x70, 0x70, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x75, 0x70, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x67, 0x75, 0x70, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x69, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x10, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x43, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x52, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x5f, 0x52,
	0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x44, 0x5f,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x04, 0x22, 0x37, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xc0, 0x02, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x6b, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x9e, 0x03, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x68, 0x65,
	0x6e, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x68, 0x65, 0x6e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x34, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1a, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd9, 0x02, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6b, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4b, 0x0a, 0x0e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x75,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x75, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x68, 0x45, 0x6e,
	0x64, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x70,
	0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6d, 0x70,
	0x5f, 0x6b, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6d,
	0x70, 0x4b, 0x69, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x69, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61,
	0x6d, 0x70, 0x5f, 0x6b, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7d,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x6d, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6d, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x19, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a,
	0xad, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x22,
	0x4f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x4b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xb0, 0x05, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x4b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x04, 0x6b, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x4b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x69, 0x74,
	0x52, 0x04, 0x6b, 0x69, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x18, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x52, 0x16,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x1a, 0x8e, 0x03, 0x0a, 0x03, 0x4b, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x16, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x73, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61,
	0x6d, 0x70, 0x5f, 0x6b, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x61,
	0x6d, 0x70, 0x4b, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x6e, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6e, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x6e, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x63, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x63, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x63, 0x72, 0x46, 0x72, 0x65, 0x65, 0x1a, 0x3a, 0x0a, 0x15, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x88, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x64,
	0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x24, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x32, 0xcf, 0x13, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0d, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x12, 0x7b, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30,
	0x01, 0x12, 0x8b, 0x01, 0x0a, 0x19, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12,
	0x69, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0e, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x12, 0x29, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x6a, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f,
	0x67, 0x75, 0x70, 0x70, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x70, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75,
	0x70, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x12, 0x70, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x1e, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x69, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30,
	0x01, 0x12, 0x72, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x77, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x88,
	0x01, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7f, 0x0a, 0x16, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x14, 0x67, 0x65,
	0x74, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x71, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61,
	0x6d, 0x70, 0x5f, 0x6b, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x70, 0x0a, 0x10, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2a, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7b, 0x0a, 0x13, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x07, 0x90, 0x02, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x12, 0x7d, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x74, 0x73, 0x12,
	0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x4b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x4b, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07,
	0x90, 0x02, 0x01, 0x98, 0xb5, 0x18, 0x01, 0x12, 0x79, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x5f, 0x73,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x42, 0x5c, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75, 0x72, 0x62, 0x61, 0x73, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0xa2, 0x02,
	0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minknow_api_manager_proto_rawDescOnce sync.Once
	file_minknow_api_manager_proto_rawDescData = file_minknow_api_manager_proto_rawDesc
)

func file_minknow_api_manager_proto_rawDescGZIP() []byte {
	file_minknow_api_manager_proto_rawDescOnce.Do(func() {
		file_minknow_api_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_manager_proto_rawDescData)
	})
	return file_minknow_api_manager_proto_rawDescData
}

var file_minknow_api_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_minknow_api_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_minknow_api_manager_proto_goTypes = []interface{}{
	(FlowCellPosition_State)(0),                              // 0: minknow_api.manager.FlowCellPosition.State
	(GetVersionInfoResponse_InstallationType)(0),             // 1: minknow_api.manager.GetVersionInfoResponse.InstallationType
	(*DescribeHostRequest)(nil),                              // 2: minknow_api.manager.DescribeHostRequest
	(*DescribeHostResponse)(nil),                             // 3: minknow_api.manager.DescribeHostResponse
	(*FlowCellPosition)(nil),                                 // 4: minknow_api.manager.FlowCellPosition
	(*FlowCellPositionsRequest)(nil),                         // 5: minknow_api.manager.FlowCellPositionsRequest
	(*FlowCellPositionsResponse)(nil),                        // 6: minknow_api.manager.FlowCellPositionsResponse
	(*WatchFlowCellPositionsRequest)(nil),                    // 7: minknow_api.manager.WatchFlowCellPositionsRequest
	(*WatchFlowCellPositionsResponse)(nil),                   // 8: minknow_api.manager.WatchFlowCellPositionsResponse
	(*ResetPositionRequest)(nil),                             // 9: minknow_api.manager.ResetPositionRequest
	(*ResetPositionResponse)(nil),                            // 10: minknow_api.manager.ResetPositionResponse
	(*BasecallerApiRequest)(nil),                             // 11: minknow_api.manager.BasecallerApiRequest
	(*BasecallerApiResponse)(nil),                            // 12: minknow_api.manager.BasecallerApiResponse
	(*GetGuppyInfoRequest)(nil),                              // 13: minknow_api.manager.GetGuppyInfoRequest
	(*GetGuppyInfoResponse)(nil),                             // 14: minknow_api.manager.GetGuppyInfoResponse
	(*GetVersionInfoRequest)(nil),                            // 15: minknow_api.manager.GetVersionInfoRequest
	(*GetVersionInfoResponse)(nil),                           // 16: minknow_api.manager.GetVersionInfoResponse
	(*ListProtocolOutputDirFilesRequest)(nil),                // 17: minknow_api.manager.ListProtocolOutputDirFilesRequest
	(*ListProtocolOutputDirFilesResponse)(nil),               // 18: minknow_api.manager.ListProtocolOutputDirFilesResponse
	(*CreateDirectoryRequest)(nil),                           // 19: minknow_api.manager.CreateDirectoryRequest
	(*CreateDirectoryResponse)(nil),                          // 20: minknow_api.manager.CreateDirectoryResponse
	(*FilesystemDiskSpaceInfo)(nil),                          // 21: minknow_api.manager.FilesystemDiskSpaceInfo
	(*GetDiskSpaceInfoRequest)(nil),                          // 22: minknow_api.manager.GetDiskSpaceInfoRequest
	(*StreamDiskSpaceInfoRequest)(nil),                       // 23: minknow_api.manager.StreamDiskSpaceInfoRequest
	(*GetDiskSpaceInfoResponse)(nil),                         // 24: minknow_api.manager.GetDiskSpaceInfoResponse
	(*GetBarcodeKitInfoRequest)(nil),                         // 25: minknow_api.manager.GetBarcodeKitInfoRequest
	(*GetBarcodeKitInfoResponse)(nil),                        // 26: minknow_api.manager.GetBarcodeKitInfoResponse
	(*GetLampKitInfoRequest)(nil),                            // 27: minknow_api.manager.GetLampKitInfoRequest
	(*GetLampKitInfoResponse)(nil),                           // 28: minknow_api.manager.GetLampKitInfoResponse
	(*GetBarcodeKeysRequest)(nil),                            // 29: minknow_api.manager.GetBarcodeKeysRequest
	(*GetBarcodeKeysResponse)(nil),                           // 30: minknow_api.manager.GetBarcodeKeysResponse
	(*GetFlowCellTypesRequest)(nil),                          // 31: minknow_api.manager.GetFlowCellTypesRequest
	(*GetFlowCellTypesResponse)(nil),                         // 32: minknow_api.manager.GetFlowCellTypesResponse
	(*GetSequencingKitsRequest)(nil),                         // 33: minknow_api.manager.GetSequencingKitsRequest
	(*GetSequencingKitsResponse)(nil),                        // 34: minknow_api.manager.GetSequencingKitsResponse
	(*AddSimulatedDeviceRequest)(nil),                        // 35: minknow_api.manager.AddSimulatedDeviceRequest
	(*AddSimulatedDeviceResponse)(nil),                       // 36: minknow_api.manager.AddSimulatedDeviceResponse
	(*RemoveSimulatedDeviceRequest)(nil),                     // 37: minknow_api.manager.RemoveSimulatedDeviceRequest
	(*RemoveSimulatedDeviceResponse)(nil),                    // 38: minknow_api.manager.RemoveSimulatedDeviceResponse
	(*LocalAuthenticationTokenPathRequest)(nil),              // 39: minknow_api.manager.LocalAuthenticationTokenPathRequest
	(*LocalAuthenticationTokenPathResponse)(nil),             // 40: minknow_api.manager.LocalAuthenticationTokenPathResponse
	(*FlowCellPosition_Location)(nil),                        // 41: minknow_api.manager.FlowCellPosition.Location
	(*FlowCellPosition_RpcPorts)(nil),                        // 42: minknow_api.manager.FlowCellPosition.RpcPorts
	(*FlowCellPosition_SharedHardwareGroup)(nil),             // 43: minknow_api.manager.FlowCellPosition.SharedHardwareGroup
	(*ListProtocolOutputDirFilesResponse_DirectoryInfo)(nil), // 44: minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo
	(*GetBarcodeKitInfoResponse_BarcodeKitInfo)(nil),         // 45: minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo
	nil,                                   // 46: minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfoEntry
	(*GetFlowCellTypesResponse_Info)(nil), // 47: minknow_api.manager.GetFlowCellTypesResponse.Info
	(*GetSequencingKitsResponse_Kit)(nil), // 48: minknow_api.manager.GetSequencingKitsResponse.Kit
	(*GetSequencingKitsResponse_BarcodingExpansionKit)(nil), // 49: minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit
	(*GetVersionInfoResponse_MinknowVersion)(nil),           // 50: minknow_api.instance.GetVersionInfoResponse.MinknowVersion
	(GetVersionInfoResponse_DistributionStatus)(0),          // 51: minknow_api.instance.GetVersionInfoResponse.DistributionStatus
	(FlowCellConnectorType)(0),                              // 52: minknow_api.device.FlowCellConnectorType
	(*GetDefaultOutputDirectoriesRequest)(nil),              // 53: minknow_api.instance.GetDefaultOutputDirectoriesRequest
	(*OutputDirectories)(nil),                               // 54: minknow_api.instance.OutputDirectories
}
var file_minknow_api_manager_proto_depIdxs = []int32{
	41, // 0: minknow_api.manager.FlowCellPosition.location:type_name -> minknow_api.manager.FlowCellPosition.Location
	0,  // 1: minknow_api.manager.FlowCellPosition.state:type_name -> minknow_api.manager.FlowCellPosition.State
	42, // 2: minknow_api.manager.FlowCellPosition.rpc_ports:type_name -> minknow_api.manager.FlowCellPosition.RpcPorts
	43, // 3: minknow_api.manager.FlowCellPosition.shared_hardware_group:type_name -> minknow_api.manager.FlowCellPosition.SharedHardwareGroup
	4,  // 4: minknow_api.manager.FlowCellPositionsResponse.positions:type_name -> minknow_api.manager.FlowCellPosition
	4,  // 5: minknow_api.manager.WatchFlowCellPositionsResponse.additions:type_name -> minknow_api.manager.FlowCellPosition
	4,  // 6: minknow_api.manager.WatchFlowCellPositionsResponse.changes:type_name -> minknow_api.manager.FlowCellPosition
	50, // 7: minknow_api.manager.GetVersionInfoResponse.minknow:type_name -> minknow_api.instance.GetVersionInfoResponse.MinknowVersion
	51, // 8: minknow_api.manager.GetVersionInfoResponse.distribution_status:type_name -> minknow_api.instance.GetVersionInfoResponse.DistributionStatus
	1,  // 9: minknow_api.manager.GetVersionInfoResponse.installation_type:type_name -> minknow_api.manager.GetVersionInfoResponse.InstallationType
	44, // 10: minknow_api.manager.ListProtocolOutputDirFilesResponse.directories:type_name -> minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo
	21, // 11: minknow_api.manager.GetDiskSpaceInfoResponse.filesystem_disk_space_info:type_name -> minknow_api.manager.FilesystemDiskSpaceInfo
	46, // 12: minknow_api.manager.GetBarcodeKitInfoResponse.barcode_kit_info:type_name -> minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfoEntry
	47, // 13: minknow_api.manager.GetFlowCellTypesResponse.types:type_name -> minknow_api.manager.GetFlowCellTypesResponse.Info
	48, // 14: minknow_api.manager.GetSequencingKitsResponse.kits:type_name -> minknow_api.manager.GetSequencingKitsResponse.Kit
	49, // 15: minknow_api.manager.GetSequencingKitsResponse.barcoding_expansion_kits:type_name -> minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit
	45, // 16: minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfoEntry.value:type_name -> minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo
	52, // 17: minknow_api.manager.GetFlowCellTypesResponse.Info.connector_type:type_name -> minknow_api.device.FlowCellConnectorType
	2,  // 18: minknow_api.manager.ManagerService.describe_host:input_type -> minknow_api.manager.DescribeHostRequest
	5,  // 19: minknow_api.manager.ManagerService.flow_cell_positions:input_type -> minknow_api.manager.FlowCellPositionsRequest
	7,  // 20: minknow_api.manager.ManagerService.watch_flow_cell_positions:input_type -> minknow_api.manager.WatchFlowCellPositionsRequest
	9,  // 21: minknow_api.manager.ManagerService.reset_position:input_type -> minknow_api.manager.ResetPositionRequest
	11, // 22: minknow_api.manager.ManagerService.basecaller_api:input_type -> minknow_api.manager.BasecallerApiRequest
	13, // 23: minknow_api.manager.ManagerService.get_guppy_info:input_type -> minknow_api.manager.GetGuppyInfoRequest
	15, // 24: minknow_api.manager.ManagerService.get_version_info:input_type -> minknow_api.manager.GetVersionInfoRequest
	17, // 25: minknow_api.manager.ManagerService.list_protocol_output_dir_files:input_type -> minknow_api.manager.ListProtocolOutputDirFilesRequest
	19, // 26: minknow_api.manager.ManagerService.create_directory:input_type -> minknow_api.manager.CreateDirectoryRequest
	22, // 27: minknow_api.manager.ManagerService.get_disk_space_info:input_type -> minknow_api.manager.GetDiskSpaceInfoRequest
	53, // 28: minknow_api.manager.ManagerService.get_default_output_directories:input_type -> minknow_api.instance.GetDefaultOutputDirectoriesRequest
	23, // 29: minknow_api.manager.ManagerService.stream_disk_space_info:input_type -> minknow_api.manager.StreamDiskSpaceInfoRequest
	25, // 30: minknow_api.manager.ManagerService.get_barcode_kit_info:input_type -> minknow_api.manager.GetBarcodeKitInfoRequest
	27, // 31: minknow_api.manager.ManagerService.get_lamp_kit_info:input_type -> minknow_api.manager.GetLampKitInfoRequest
	29, // 32: minknow_api.manager.ManagerService.get_barcode_keys:input_type -> minknow_api.manager.GetBarcodeKeysRequest
	31, // 33: minknow_api.manager.ManagerService.get_flow_cell_types:input_type -> minknow_api.manager.GetFlowCellTypesRequest
	33, // 34: minknow_api.manager.ManagerService.get_sequencing_kits:input_type -> minknow_api.manager.GetSequencingKitsRequest
	35, // 35: minknow_api.manager.ManagerService.add_simulated_device:input_type -> minknow_api.manager.AddSimulatedDeviceRequest
	37, // 36: minknow_api.manager.ManagerService.remove_simulated_device:input_type -> minknow_api.manager.RemoveSimulatedDeviceRequest
	39, // 37: minknow_api.manager.ManagerService.local_authentication_token_path:input_type -> minknow_api.manager.LocalAuthenticationTokenPathRequest
	3,  // 38: minknow_api.manager.ManagerService.describe_host:output_type -> minknow_api.manager.DescribeHostResponse
	6,  // 39: minknow_api.manager.ManagerService.flow_cell_positions:output_type -> minknow_api.manager.FlowCellPositionsResponse
	8,  // 40: minknow_api.manager.ManagerService.watch_flow_cell_positions:output_type -> minknow_api.manager.WatchFlowCellPositionsResponse
	10, // 41: minknow_api.manager.ManagerService.reset_position:output_type -> minknow_api.manager.ResetPositionResponse
	12, // 42: minknow_api.manager.ManagerService.basecaller_api:output_type -> minknow_api.manager.BasecallerApiResponse
	14, // 43: minknow_api.manager.ManagerService.get_guppy_info:output_type -> minknow_api.manager.GetGuppyInfoResponse
	16, // 44: minknow_api.manager.ManagerService.get_version_info:output_type -> minknow_api.manager.GetVersionInfoResponse
	18, // 45: minknow_api.manager.ManagerService.list_protocol_output_dir_files:output_type -> minknow_api.manager.ListProtocolOutputDirFilesResponse
	20, // 46: minknow_api.manager.ManagerService.create_directory:output_type -> minknow_api.manager.CreateDirectoryResponse
	24, // 47: minknow_api.manager.ManagerService.get_disk_space_info:output_type -> minknow_api.manager.GetDiskSpaceInfoResponse
	54, // 48: minknow_api.manager.ManagerService.get_default_output_directories:output_type -> minknow_api.instance.OutputDirectories
	24, // 49: minknow_api.manager.ManagerService.stream_disk_space_info:output_type -> minknow_api.manager.GetDiskSpaceInfoResponse
	26, // 50: minknow_api.manager.ManagerService.get_barcode_kit_info:output_type -> minknow_api.manager.GetBarcodeKitInfoResponse
	28, // 51: minknow_api.manager.ManagerService.get_lamp_kit_info:output_type -> minknow_api.manager.GetLampKitInfoResponse
	30, // 52: minknow_api.manager.ManagerService.get_barcode_keys:output_type -> minknow_api.manager.GetBarcodeKeysResponse
	32, // 53: minknow_api.manager.ManagerService.get_flow_cell_types:output_type -> minknow_api.manager.GetFlowCellTypesResponse
	34, // 54: minknow_api.manager.ManagerService.get_sequencing_kits:output_type -> minknow_api.manager.GetSequencingKitsResponse
	36, // 55: minknow_api.manager.ManagerService.add_simulated_device:output_type -> minknow_api.manager.AddSimulatedDeviceResponse
	38, // 56: minknow_api.manager.ManagerService.remove_simulated_device:output_type -> minknow_api.manager.RemoveSimulatedDeviceResponse
	40, // 57: minknow_api.manager.ManagerService.local_authentication_token_path:output_type -> minknow_api.manager.LocalAuthenticationTokenPathResponse
	38, // [38:58] is the sub-list for method output_type
	18, // [18:38] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_minknow_api_manager_proto_init() }
func file_minknow_api_manager_proto_init() {
	if File_minknow_api_manager_proto != nil {
		return
	}
	file_minknow_api_rpc_options_proto_init()
	file_minknow_api_device_proto_init()
	file_minknow_api_instance_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCellPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCellPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCellPositionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchFlowCellPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchFlowCellPositionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPositionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasecallerApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasecallerApiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuppyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuppyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolOutputDirFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolOutputDirFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDiskSpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiskSpaceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDiskSpaceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiskSpaceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBarcodeKitInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBarcodeKitInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLampKitInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLampKitInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBarcodeKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBarcodeKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowCellTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowCellTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSequencingKitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSequencingKitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSimulatedDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSimulatedDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSimulatedDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSimulatedDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalAuthenticationTokenPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalAuthenticationTokenPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCellPosition_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCellPosition_RpcPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCellPosition_SharedHardwareGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProtocolOutputDirFilesResponse_DirectoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBarcodeKitInfoResponse_BarcodeKitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowCellTypesResponse_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSequencingKitsResponse_Kit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSequencingKitsResponse_BarcodingExpansionKit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_manager_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_manager_proto_goTypes,
		DependencyIndexes: file_minknow_api_manager_proto_depIdxs,
		EnumInfos:         file_minknow_api_manager_proto_enumTypes,
		MessageInfos:      file_minknow_api_manager_proto_msgTypes,
	}.Build()
	File_minknow_api_manager_proto = out.File
	file_minknow_api_manager_proto_rawDesc = nil
	file_minknow_api_manager_proto_goTypes = nil
	file_minknow_api_manager_proto_depIdxs = nil
}
