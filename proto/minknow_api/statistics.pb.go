// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/statistics.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadLengthType int32

const (
	// MinKNOW events are measured as reads are being read, and are available very soon after
	// the read finishes
	//
	ReadLengthType_MinknowEvents ReadLengthType = 0
	// Estimated bases are calculated from MinKNOW events, based on an approximate
	// events-to-bases relationship.  Estimated bases become available at the same time as
	// MinknowEvents become available.
	//
	ReadLengthType_EstimatedBases ReadLengthType = 1
	// Basecalled bases are the number of bases reported by live base-calling.  This requires
	// that live basecalling is enabled.  As basecalling takes time to complete, these values
	// will update after the MinknowEvents or EstimatedBases histograms update.
	//
	ReadLengthType_BasecalledBases ReadLengthType = 2
)

// Enum value maps for ReadLengthType.
var (
	ReadLengthType_name = map[int32]string{
		0: "MinknowEvents",
		1: "EstimatedBases",
		2: "BasecalledBases",
	}
	ReadLengthType_value = map[string]int32{
		"MinknowEvents":   0,
		"EstimatedBases":  1,
		"BasecalledBases": 2,
	}
)

func (x ReadLengthType) Enum() *ReadLengthType {
	p := new(ReadLengthType)
	*p = x
	return p
}

func (x ReadLengthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadLengthType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_statistics_proto_enumTypes[0].Descriptor()
}

func (ReadLengthType) Type() protoreflect.EnumType {
	return &file_minknow_api_statistics_proto_enumTypes[0]
}

func (x ReadLengthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadLengthType.Descriptor instead.
func (ReadLengthType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{0}
}

// The data accumulated in read length histogram buckets
type BucketValueType int32

const (
	// Histogram buckets contain the total number of reads with lengths that fall within the
	// histogram bucket range
	BucketValueType_ReadCounts BucketValueType = 0
	// Histogram buckets contain the total number of events or basecalled bases contained
	// within reads that fall within the histogram bucket range
	//
	// The units (events, estimated bases, basecalled bases) is determined by the
	// `read_length_type` setting.
	BucketValueType_ReadLengths BucketValueType = 1
)

// Enum value maps for BucketValueType.
var (
	BucketValueType_name = map[int32]string{
		0: "ReadCounts",
		1: "ReadLengths",
	}
	BucketValueType_value = map[string]int32{
		"ReadCounts":  0,
		"ReadLengths": 1,
	}
)

func (x BucketValueType) Enum() *BucketValueType {
	p := new(BucketValueType)
	*p = x
	return p
}

func (x BucketValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_statistics_proto_enumTypes[1].Descriptor()
}

func (BucketValueType) Type() protoreflect.EnumType {
	return &file_minknow_api_statistics_proto_enumTypes[1]
}

func (x BucketValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketValueType.Descriptor instead.
func (BucketValueType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{1}
}

type ReadEndReason int32

const (
	ReadEndReason_All                         ReadEndReason = 0
	ReadEndReason_Unknown                     ReadEndReason = 1
	ReadEndReason_Partial                     ReadEndReason = 2
	ReadEndReason_MuxChange                   ReadEndReason = 3
	ReadEndReason_UnblockMuxChange            ReadEndReason = 4
	ReadEndReason_SignalPositive              ReadEndReason = 5
	ReadEndReason_SignalNegative              ReadEndReason = 6
	ReadEndReason_DataServiceUnblockMuxChange ReadEndReason = 7
)

// Enum value maps for ReadEndReason.
var (
	ReadEndReason_name = map[int32]string{
		0: "All",
		1: "Unknown",
		2: "Partial",
		3: "MuxChange",
		4: "UnblockMuxChange",
		5: "SignalPositive",
		6: "SignalNegative",
		7: "DataServiceUnblockMuxChange",
	}
	ReadEndReason_value = map[string]int32{
		"All":                         0,
		"Unknown":                     1,
		"Partial":                     2,
		"MuxChange":                   3,
		"UnblockMuxChange":            4,
		"SignalPositive":              5,
		"SignalNegative":              6,
		"DataServiceUnblockMuxChange": 7,
	}
)

func (x ReadEndReason) Enum() *ReadEndReason {
	p := new(ReadEndReason)
	*p = x
	return p
}

func (x ReadEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_statistics_proto_enumTypes[2].Descriptor()
}

func (ReadEndReason) Type() protoreflect.EnumType {
	return &file_minknow_api_statistics_proto_enumTypes[2]
}

func (x ReadEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadEndReason.Descriptor instead.
func (ReadEndReason) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{2}
}

type StreamBoxplotRequest_BoxplotType int32

const (
	// Qscore of reads from the basecaller.
	//
	// Only available if basecalling
	StreamBoxplotRequest_QSCORE StreamBoxplotRequest_BoxplotType = 0
	// Number of bases per second the data is moving through the sequencer.
	//
	// Only available if basecalling.
	StreamBoxplotRequest_BASES_PER_SECOND StreamBoxplotRequest_BoxplotType = 1
	// Accuracy of reads aligned to provided reference.
	//
	// Accuracy is measured in percent 0-100.
	//
	// Only available if alignment is enabled.
	StreamBoxplotRequest_ACCURACY StreamBoxplotRequest_BoxplotType = 2
)

// Enum value maps for StreamBoxplotRequest_BoxplotType.
var (
	StreamBoxplotRequest_BoxplotType_name = map[int32]string{
		0: "QSCORE",
		1: "BASES_PER_SECOND",
		2: "ACCURACY",
	}
	StreamBoxplotRequest_BoxplotType_value = map[string]int32{
		"QSCORE":           0,
		"BASES_PER_SECOND": 1,
		"ACCURACY":         2,
	}
)

func (x StreamBoxplotRequest_BoxplotType) Enum() *StreamBoxplotRequest_BoxplotType {
	p := new(StreamBoxplotRequest_BoxplotType)
	*p = x
	return p
}

func (x StreamBoxplotRequest_BoxplotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamBoxplotRequest_BoxplotType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_statistics_proto_enumTypes[3].Descriptor()
}

func (StreamBoxplotRequest_BoxplotType) Type() protoreflect.EnumType {
	return &file_minknow_api_statistics_proto_enumTypes[3]
}

func (x StreamBoxplotRequest_BoxplotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamBoxplotRequest_BoxplotType.Descriptor instead.
func (StreamBoxplotRequest_BoxplotType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{25, 0}
}

// Specify a desired data selection.
//
// Units for values are as specified in the corresponding Request
//
// The actual data selection used may differ from the desired one.  They are adjusted in the
// following sequence:
//
//  1. All values are set equal to the corresponding desired value.
//  2. Negative `start` or `end` values are fixed up by adding the current maximum value to the
//     specified value
//      - Negative start and end values are only supported for certain requests; typically they are
//        supported for time-series data
//      - If, after adding the current bucket count, the `start` value is still negative, then the
//        start value is adjusted to `0`
//      - If, after adding the current bucket count, the `end` value is still negative, or is zero,
//        then the data selection is empty
//      - If data collection is still ongoing, then the current bucket count may change between rpc
//        calls as more data is collected.
//  3. Values which are not set, or which are set at `0`, are then adjusted to a default value:
//      - `start` and `step` will be set to the minimum valid value
//      - `end` will be set to the maximum valid value
//  4. Values which are outside of the valid range are clamped to the nearest valid value:
//      - Values less than minimum valid value will be set equal to the minimum valid value
//      - Values greater than the maximum valid value will be set equal to the maximum valid value
//  5. Finally, all values are 'rounded' to a nearby valid value
//      - `start` and `step` will be rounded down to the first valid value less than or equal to
//        their current values
//      - `end` will be rounded up to the first valid value that is greater than or equal to its
//        current value
//      - This means that the range that is specified after rounding includes the range that was
//        specified prior to rounding
//
// If (`end` - `start`) is not an exact integer multiple of `step`, then the final bucket will cover
// a smaller range than that specified by `step`.
//
// Note also that the maximum valid start and end value may not be known if data collection is still
// ongoing -- for example, the maximum valid time for time series data.  If this is the case, then
// the maximum valid value will be determined when the experiment ends, and values in use will be
// adjusted acordingly.
//
type DataSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Step  uint64 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	End   int64  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *DataSelection) Reset() {
	*x = DataSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSelection) ProtoMessage() {}

func (x *DataSelection) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSelection.ProtoReflect.Descriptor instead.
func (*DataSelection) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{0}
}

func (x *DataSelection) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DataSelection) GetStep() uint64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *DataSelection) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type StreamDutyTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition id of the experiment.
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
	// The desired data selection.
	//
	// The units for all values are `seconds since the start of the experiment`.
	//
	DataSelection *DataSelection `protobuf:"bytes,2,opt,name=data_selection,json=dataSelection,proto3" json:"data_selection,omitempty"`
}

func (x *StreamDutyTimeRequest) Reset() {
	*x = StreamDutyTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDutyTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDutyTimeRequest) ProtoMessage() {}

func (x *StreamDutyTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDutyTimeRequest.ProtoReflect.Descriptor instead.
func (*StreamDutyTimeRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{1}
}

func (x *StreamDutyTimeRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

func (x *StreamDutyTimeRequest) GetDataSelection() *DataSelection {
	if x != nil {
		return x.DataSelection
	}
	return nil
}

type StreamDutyTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range covered by each entry in state_times
	BucketRanges []*StreamDutyTimeResponse_BucketRange `protobuf:"bytes,1,rep,name=bucket_ranges,json=bucketRanges,proto3" json:"bucket_ranges,omitempty"`
	// Map between channel state names, and a list of bucketed duty time data
	ChannelStates map[string]*StreamDutyTimeResponse_ChannelStateData `protobuf:"bytes,2,rep,name=channel_states,json=channelStates,proto3" json:"channel_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StreamDutyTimeResponse) Reset() {
	*x = StreamDutyTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDutyTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDutyTimeResponse) ProtoMessage() {}

func (x *StreamDutyTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDutyTimeResponse.ProtoReflect.Descriptor instead.
func (*StreamDutyTimeResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{2}
}

func (x *StreamDutyTimeResponse) GetBucketRanges() []*StreamDutyTimeResponse_BucketRange {
	if x != nil {
		return x.BucketRanges
	}
	return nil
}

func (x *StreamDutyTimeResponse) GetChannelStates() map[string]*StreamDutyTimeResponse_ChannelStateData {
	if x != nil {
		return x.ChannelStates
	}
	return nil
}

type ReadLengthHistogramKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only return data for the given ReadEndReason.
	//
	// Special values:
	//   - Specify `ReadEndReason::All` to return data for all read end reasons
	//
	// If unspecified all read end reasons are returned.
	ReadEndReason ReadEndReason `protobuf:"varint,1,opt,name=read_end_reason,json=readEndReason,proto3,enum=minknow_api.statistics.ReadEndReason" json:"read_end_reason,omitempty"`
}

func (x *ReadLengthHistogramKey) Reset() {
	*x = ReadLengthHistogramKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadLengthHistogramKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLengthHistogramKey) ProtoMessage() {}

func (x *ReadLengthHistogramKey) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLengthHistogramKey.ProtoReflect.Descriptor instead.
func (*ReadLengthHistogramKey) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{3}
}

func (x *ReadLengthHistogramKey) GetReadEndReason() ReadEndReason {
	if x != nil {
		return x.ReadEndReason
	}
	return ReadEndReason_All
}

type ReadLengthHistogramSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Split returned data by read_end_reason
	ReadEndReason bool `protobuf:"varint,1,opt,name=read_end_reason,json=readEndReason,proto3" json:"read_end_reason,omitempty"`
}

func (x *ReadLengthHistogramSplit) Reset() {
	*x = ReadLengthHistogramSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadLengthHistogramSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLengthHistogramSplit) ProtoMessage() {}

func (x *ReadLengthHistogramSplit) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLengthHistogramSplit.ProtoReflect.Descriptor instead.
func (*ReadLengthHistogramSplit) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{4}
}

func (x *ReadLengthHistogramSplit) GetReadEndReason() bool {
	if x != nil {
		return x.ReadEndReason
	}
	return false
}

type StreamReadLengthHistogramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The `acquisition_run_id` of the acquisition to obtain data for
	//
	// If this is set to the `acquisition_run_id` of an acquisition which is in-progress, then
	// updates containing the latest histogram data for that acquisition will be streamed regularly
	// until that acquisition finishes (see `poll_time_seconds` below)
	//
	// Otherwise, if this is set to the `acquisition_run_id` of an acquisition which is finished,
	// and for which final histogram data is available, then the final histogram data for that
	// acquisition will be returned.  Final histogram data is available until it is cleared.
	//
	// Otherwise, if this parameter is not set, or is set to a value which is neither the
	// `acquisition_run_id` of an acquisition which is in-progress, nor the `acquisition_run_id` of
	// an acquisition for which final histogram data is available, then this call will fail with the
	// status `INVALID_ARGUMENT`.
	//
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
	// How often to return new histogram data, in seconds
	//
	// If not specified, or set to `0`, then the poll time will be set to 60 seconds
	//
	// If data is being returned for an acquisition which is in progress, then one update will be
	// sent when the call is first performed, then subsequently every `poll_time` after that, and
	// then finally once again when the acquisition finishes.
	//
	// Otherwise, if final histogram data is being returned for an acquisition that has already
	// finished, this parameter has no effect.  The final histogram data will be returned, and the
	// call will complete.
	//
	PollTimeSeconds uint32 `protobuf:"varint,2,opt,name=poll_time_seconds,json=pollTimeSeconds,proto3" json:"poll_time_seconds,omitempty"`
	// The source of the read lengths in the histogram
	//
	// If MinKNOW is unable to supply data from the requested source (e.g. if the user requests
	// BasecalledBases, but basecalling is not enabled), then this call will fail with the status
	// `FAILED_PRECONDITION`.
	//
	// See `ReadLengthType` for further information about the available options.
	//
	ReadLengthType ReadLengthType `protobuf:"varint,3,opt,name=read_length_type,json=readLengthType,proto3,enum=minknow_api.statistics.ReadLengthType" json:"read_length_type,omitempty"`
	// The desired read length range which histograms should cover.
	// Units are as set in `read_length_type`, above.
	//
	DataSelection *DataSelection `protobuf:"bytes,4,opt,name=data_selection,json=dataSelection,proto3" json:"data_selection,omitempty"`
	// What data to accumulate in the read length histogram buckets
	//
	// See `BucketValueType` for further information about the available options.
	//
	BucketValueType BucketValueType `protobuf:"varint,5,opt,name=bucket_value_type,json=bucketValueType,proto3,enum=minknow_api.statistics.BucketValueType" json:"bucket_value_type,omitempty"`
	// If set greater than zero then discard some percent of data at the upper end of the source
	// data before producing histograms and N50 values.
	//
	// This is intended to assist in the case where a small number of outliers with very long read
	// lengths cause the histogram axes and N50 to be skewed.
	//
	// Defaults to 0 - no data discarded.
	// Values should be specified in percent - a value of 0.05 will cause the top 5% of the data
	// to be discarded before producing outputs.
	//
	// For histograms, the data discarded depends on the bucket_value_type.  If `ReadCounts`, then
	// a percentage of the total number of reads reads will be discarded; if `ReadLengths` then a
	// percentage of the total read lengths will be discarded.
	//
	// For the N50 value, `discard_outlier_percent` always causes a percentage of the total
	// read lengths to be discarded (since it is always calculated from read length data)
	//
	DiscardOutlierPercent float32 `protobuf:"fixed32,6,opt,name=discard_outlier_percent,json=discardOutlierPercent,proto3" json:"discard_outlier_percent,omitempty"`
	// Define filtering parameters for streamed data.
	Filtering []*ReadLengthHistogramKey `protobuf:"bytes,7,rep,name=filtering,proto3" json:"filtering,omitempty"`
	// Define how results are split for returned data.
	Split *ReadLengthHistogramSplit `protobuf:"bytes,8,opt,name=split,proto3" json:"split,omitempty"`
}

func (x *StreamReadLengthHistogramRequest) Reset() {
	*x = StreamReadLengthHistogramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadLengthHistogramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadLengthHistogramRequest) ProtoMessage() {}

func (x *StreamReadLengthHistogramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadLengthHistogramRequest.ProtoReflect.Descriptor instead.
func (*StreamReadLengthHistogramRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{5}
}

func (x *StreamReadLengthHistogramRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

func (x *StreamReadLengthHistogramRequest) GetPollTimeSeconds() uint32 {
	if x != nil {
		return x.PollTimeSeconds
	}
	return 0
}

func (x *StreamReadLengthHistogramRequest) GetReadLengthType() ReadLengthType {
	if x != nil {
		return x.ReadLengthType
	}
	return ReadLengthType_MinknowEvents
}

func (x *StreamReadLengthHistogramRequest) GetDataSelection() *DataSelection {
	if x != nil {
		return x.DataSelection
	}
	return nil
}

func (x *StreamReadLengthHistogramRequest) GetBucketValueType() BucketValueType {
	if x != nil {
		return x.BucketValueType
	}
	return BucketValueType_ReadCounts
}

func (x *StreamReadLengthHistogramRequest) GetDiscardOutlierPercent() float32 {
	if x != nil {
		return x.DiscardOutlierPercent
	}
	return 0
}

func (x *StreamReadLengthHistogramRequest) GetFiltering() []*ReadLengthHistogramKey {
	if x != nil {
		return x.Filtering
	}
	return nil
}

func (x *StreamReadLengthHistogramRequest) GetSplit() *ReadLengthHistogramSplit {
	if x != nil {
		return x.Split
	}
	return nil
}

type StreamReadLengthHistogramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data source for the histograms
	//
	// Also specifies the units for `data_selection` and `n50`
	//
	// See `ReadLengthType` for further information about the possible options.
	//
	ReadLengthType ReadLengthType `protobuf:"varint,1,opt,name=read_length_type,json=readLengthType,proto3,enum=minknow_api.statistics.ReadLengthType" json:"read_length_type,omitempty"`
	// The range covered by each bucket in the histogram data
	BucketRanges []*StreamReadLengthHistogramResponse_BucketRange `protobuf:"bytes,2,rep,name=bucket_ranges,json=bucketRanges,proto3" json:"bucket_ranges,omitempty"`
	// The right hand edge of the last source bucket which contains data
	//
	// Measured across all source data, after excluding the reads specified by
	// `discard_outlier_percent` in the stream request.
	//
	SourceDataEnd uint64 `protobuf:"varint,5,opt,name=source_data_end,json=sourceDataEnd,proto3" json:"source_data_end,omitempty"`
	// The data accumulated in the read length histogram buckets
	//
	// See `BucketValueType` for further information about the possible options.
	//
	BucketValueType BucketValueType `protobuf:"varint,3,opt,name=bucket_value_type,json=bucketValueType,proto3,enum=minknow_api.statistics.BucketValueType" json:"bucket_value_type,omitempty"`
	// The histogram data
	HistogramData []*StreamReadLengthHistogramResponse_ReadLengthHistogramData `protobuf:"bytes,4,rep,name=histogram_data,json=histogramData,proto3" json:"histogram_data,omitempty"`
}

func (x *StreamReadLengthHistogramResponse) Reset() {
	*x = StreamReadLengthHistogramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadLengthHistogramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadLengthHistogramResponse) ProtoMessage() {}

func (x *StreamReadLengthHistogramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadLengthHistogramResponse.ProtoReflect.Descriptor instead.
func (*StreamReadLengthHistogramResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{6}
}

func (x *StreamReadLengthHistogramResponse) GetReadLengthType() ReadLengthType {
	if x != nil {
		return x.ReadLengthType
	}
	return ReadLengthType_MinknowEvents
}

func (x *StreamReadLengthHistogramResponse) GetBucketRanges() []*StreamReadLengthHistogramResponse_BucketRange {
	if x != nil {
		return x.BucketRanges
	}
	return nil
}

func (x *StreamReadLengthHistogramResponse) GetSourceDataEnd() uint64 {
	if x != nil {
		return x.SourceDataEnd
	}
	return 0
}

func (x *StreamReadLengthHistogramResponse) GetBucketValueType() BucketValueType {
	if x != nil {
		return x.BucketValueType
	}
	return BucketValueType_ReadCounts
}

func (x *StreamReadLengthHistogramResponse) GetHistogramData() []*StreamReadLengthHistogramResponse_ReadLengthHistogramData {
	if x != nil {
		return x.HistogramData
	}
	return nil
}

type GetReadLengthTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition id of the experiment.
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
}

func (x *GetReadLengthTypesRequest) Reset() {
	*x = GetReadLengthTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadLengthTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadLengthTypesRequest) ProtoMessage() {}

func (x *GetReadLengthTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadLengthTypesRequest.ProtoReflect.Descriptor instead.
func (*GetReadLengthTypesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{7}
}

func (x *GetReadLengthTypesRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

type GetReadLengthTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of the types of bucket for which a histogram is currently available
	AvailableTypes []ReadLengthType `protobuf:"varint,1,rep,packed,name=available_types,json=availableTypes,proto3,enum=minknow_api.statistics.ReadLengthType" json:"available_types,omitempty"`
}

func (x *GetReadLengthTypesResponse) Reset() {
	*x = GetReadLengthTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadLengthTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadLengthTypesResponse) ProtoMessage() {}

func (x *GetReadLengthTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadLengthTypesResponse.ProtoReflect.Descriptor instead.
func (*GetReadLengthTypesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{8}
}

func (x *GetReadLengthTypesResponse) GetAvailableTypes() []ReadLengthType {
	if x != nil {
		return x.AvailableTypes
	}
	return nil
}

type AcquisitionOutputKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only return data for the given barcode.
	//
	// Special values:
	//   - Specify "unclassified" for data which does not have a barcode.
	//   - Specify "classified" for all data which has a barcode.
	//
	// If unspecified all barcodes are returned.
	BarcodeName string `protobuf:"bytes,1,opt,name=barcode_name,json=barcodeName,proto3" json:"barcode_name,omitempty"`
	// Only return data for the given alignment reference.
	//
	// Special values:
	//   - Specify "unaligned" for data which does not align to a reference
	//   - Specify "aligned" for all data which aligns to a reference
	//
	// If unspecified all alignment targets are returned.
	AlignmentReference string `protobuf:"bytes,2,opt,name=alignment_reference,json=alignmentReference,proto3" json:"alignment_reference,omitempty"`
	// Only return data for the given target region.
	//
	// Target regions are defined in bed files.
	//
	// The region is a string which identifies an entry in the bed file.
	//
	// Special values:
	//   - Specify "offtarget" for data which does not have a bed region.
	//   - Specify "ontarget" for all data which has a bed region.
	//
	// If unspecified all alignment regions are returned.
	AlignmentBedFileRegion string `protobuf:"bytes,3,opt,name=alignment_bed_file_region,json=alignmentBedFileRegion,proto3" json:"alignment_bed_file_region,omitempty"`
	// Only return data for the given lamp barcode.
	//
	// Special values:
	//   - Specify "unclassified" for data which does not have a lamp barcode.
	//   - Specify "classified" for all data which has a lamp barcode.
	//
	// If unspecified all lamp barcodes are returned.
	LampBarcodeId string `protobuf:"bytes,4,opt,name=lamp_barcode_id,json=lampBarcodeId,proto3" json:"lamp_barcode_id,omitempty"`
	// Only return data for the given lamp target.
	//
	// Special values:
	//   - Specify "unclassified" for data which does not have a lamp target.
	//   - Specify "classified" for all data which has a lamp target.
	// Using barcode terms here as lamp is part of barcoding pipeline
	//
	// If unspecified all lamp target are returned.
	LampTargetId string `protobuf:"bytes,5,opt,name=lamp_target_id,json=lampTargetId,proto3" json:"lamp_target_id,omitempty"`
	// The barcode alias corresponding to the `barcode_name` and `lamp_barcode_id`
	BarcodeAlias string `protobuf:"bytes,6,opt,name=barcode_alias,json=barcodeAlias,proto3" json:"barcode_alias,omitempty"`
}

func (x *AcquisitionOutputKey) Reset() {
	*x = AcquisitionOutputKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionOutputKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionOutputKey) ProtoMessage() {}

func (x *AcquisitionOutputKey) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionOutputKey.ProtoReflect.Descriptor instead.
func (*AcquisitionOutputKey) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{9}
}

func (x *AcquisitionOutputKey) GetBarcodeName() string {
	if x != nil {
		return x.BarcodeName
	}
	return ""
}

func (x *AcquisitionOutputKey) GetAlignmentReference() string {
	if x != nil {
		return x.AlignmentReference
	}
	return ""
}

func (x *AcquisitionOutputKey) GetAlignmentBedFileRegion() string {
	if x != nil {
		return x.AlignmentBedFileRegion
	}
	return ""
}

func (x *AcquisitionOutputKey) GetLampBarcodeId() string {
	if x != nil {
		return x.LampBarcodeId
	}
	return ""
}

func (x *AcquisitionOutputKey) GetLampTargetId() string {
	if x != nil {
		return x.LampTargetId
	}
	return ""
}

func (x *AcquisitionOutputKey) GetBarcodeAlias() string {
	if x != nil {
		return x.BarcodeAlias
	}
	return ""
}

type AcquisitionOutputSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Split data for every individual barcode.
	BarcodeName bool `protobuf:"varint,1,opt,name=barcode_name,json=barcodeName,proto3" json:"barcode_name,omitempty"`
	// Split data for each individual alignment reference.
	//
	// References are defined in alignment references.
	AlignmentReference bool `protobuf:"varint,2,opt,name=alignment_reference,json=alignmentReference,proto3" json:"alignment_reference,omitempty"`
	// Split data for each target region.
	//
	// Target regions are defined in bed files.
	AlignmentBedFileRegion bool `protobuf:"varint,3,opt,name=alignment_bed_file_region,json=alignmentBedFileRegion,proto3" json:"alignment_bed_file_region,omitempty"`
	// Split data for each lamp barcode id.
	//
	// Lamp barcodes are defined by the active lamp kit.
	LampBarcodeId bool `protobuf:"varint,4,opt,name=lamp_barcode_id,json=lampBarcodeId,proto3" json:"lamp_barcode_id,omitempty"`
	// Split data for each lamp targets id.
	//
	// Lamp targets are defined by the active lamp kit.
	LampTargetId bool `protobuf:"varint,5,opt,name=lamp_target_id,json=lampTargetId,proto3" json:"lamp_target_id,omitempty"`
}

func (x *AcquisitionOutputSplit) Reset() {
	*x = AcquisitionOutputSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionOutputSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionOutputSplit) ProtoMessage() {}

func (x *AcquisitionOutputSplit) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionOutputSplit.ProtoReflect.Descriptor instead.
func (*AcquisitionOutputSplit) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{10}
}

func (x *AcquisitionOutputSplit) GetBarcodeName() bool {
	if x != nil {
		return x.BarcodeName
	}
	return false
}

func (x *AcquisitionOutputSplit) GetAlignmentReference() bool {
	if x != nil {
		return x.AlignmentReference
	}
	return false
}

func (x *AcquisitionOutputSplit) GetAlignmentBedFileRegion() bool {
	if x != nil {
		return x.AlignmentBedFileRegion
	}
	return false
}

func (x *AcquisitionOutputSplit) GetLampBarcodeId() bool {
	if x != nil {
		return x.LampBarcodeId
	}
	return false
}

func (x *AcquisitionOutputSplit) GetLampTargetId() bool {
	if x != nil {
		return x.LampTargetId
	}
	return false
}

type StreamAcquisitionOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition id of the experiment.
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
	// The desired data selection.
	//
	// The units for all values are `seconds since the start of the experiment`.
	//
	DataSelection *DataSelection `protobuf:"bytes,2,opt,name=data_selection,json=dataSelection,proto3" json:"data_selection,omitempty"`
	// Define filtering parameters for streamed data.
	Filtering []*AcquisitionOutputKey `protobuf:"bytes,3,rep,name=filtering,proto3" json:"filtering,omitempty"`
	// Define how results are split for returned data.
	Split *AcquisitionOutputSplit `protobuf:"bytes,4,opt,name=split,proto3" json:"split,omitempty"`
}

func (x *StreamAcquisitionOutputRequest) Reset() {
	*x = StreamAcquisitionOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAcquisitionOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAcquisitionOutputRequest) ProtoMessage() {}

func (x *StreamAcquisitionOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAcquisitionOutputRequest.ProtoReflect.Descriptor instead.
func (*StreamAcquisitionOutputRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{11}
}

func (x *StreamAcquisitionOutputRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

func (x *StreamAcquisitionOutputRequest) GetDataSelection() *DataSelection {
	if x != nil {
		return x.DataSelection
	}
	return nil
}

func (x *StreamAcquisitionOutputRequest) GetFiltering() []*AcquisitionOutputKey {
	if x != nil {
		return x.Filtering
	}
	return nil
}

func (x *StreamAcquisitionOutputRequest) GetSplit() *AcquisitionOutputSplit {
	if x != nil {
		return x.Split
	}
	return nil
}

// A snapshot of acquisition output data, for a given set of filtering criteria.
type AcquisitionOutputBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time the snapshot was collected, in seconds.
	//
	// This type + field have misleading names - this message really reflects a snapshot of data
	// at a given time point (`bucket` indicates the time point).
	//
	// TODO (major version change): resolve naming inconsistencies.
	Bucket uint32 `protobuf:"varint,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The yield summary data.
	YieldSummary *AcquisitionYieldSummary `protobuf:"bytes,2,opt,name=yield_summary,json=yieldSummary,proto3" json:"yield_summary,omitempty"`
}

func (x *AcquisitionOutputBucket) Reset() {
	*x = AcquisitionOutputBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionOutputBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionOutputBucket) ProtoMessage() {}

func (x *AcquisitionOutputBucket) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionOutputBucket.ProtoReflect.Descriptor instead.
func (*AcquisitionOutputBucket) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{12}
}

func (x *AcquisitionOutputBucket) GetBucket() uint32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *AcquisitionOutputBucket) GetYieldSummary() *AcquisitionYieldSummary {
	if x != nil {
		return x.YieldSummary
	}
	return nil
}

type StreamAcquisitionOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Buckets split by requested filtering parameters.
	Buckets []*StreamAcquisitionOutputResponse_FilteredBuckets `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *StreamAcquisitionOutputResponse) Reset() {
	*x = StreamAcquisitionOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAcquisitionOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAcquisitionOutputResponse) ProtoMessage() {}

func (x *StreamAcquisitionOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAcquisitionOutputResponse.ProtoReflect.Descriptor instead.
func (*StreamAcquisitionOutputResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{13}
}

func (x *StreamAcquisitionOutputResponse) GetBuckets() []*StreamAcquisitionOutputResponse_FilteredBuckets {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type StreamWriterOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition id of the experiment.
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
	// The desired data selection.
	//
	// The units for all values are `seconds since the start of the experiment`.
	//
	DataSelection *DataSelection `protobuf:"bytes,2,opt,name=data_selection,json=dataSelection,proto3" json:"data_selection,omitempty"`
}

func (x *StreamWriterOutputRequest) Reset() {
	*x = StreamWriterOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriterOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriterOutputRequest) ProtoMessage() {}

func (x *StreamWriterOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriterOutputRequest.ProtoReflect.Descriptor instead.
func (*StreamWriterOutputRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{14}
}

func (x *StreamWriterOutputRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

func (x *StreamWriterOutputRequest) GetDataSelection() *DataSelection {
	if x != nil {
		return x.DataSelection
	}
	return nil
}

// A snapshot of writer data.
type WriterOutputBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time the snapshot was collected, in seconds.
	//
	// This type + field have misleading names - this message really reflects a snapshot of data
	// at a given time point (`bucket` indicates the time point).
	//
	// TODO (major version change): resolve naming inconsistencies.
	Bucket uint32 `protobuf:"varint,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The writer data for this bucket.
	WriterOutput *AcquisitionWriterSummary `protobuf:"bytes,2,opt,name=writer_output,json=writerOutput,proto3" json:"writer_output,omitempty"`
}

func (x *WriterOutputBucket) Reset() {
	*x = WriterOutputBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterOutputBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterOutputBucket) ProtoMessage() {}

func (x *WriterOutputBucket) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterOutputBucket.ProtoReflect.Descriptor instead.
func (*WriterOutputBucket) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{15}
}

func (x *WriterOutputBucket) GetBucket() uint32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *WriterOutputBucket) GetWriterOutput() *AcquisitionWriterSummary {
	if x != nil {
		return x.WriterOutput
	}
	return nil
}

type StreamWriterOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*WriterOutputBucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *StreamWriterOutputResponse) Reset() {
	*x = StreamWriterOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriterOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriterOutputResponse) ProtoMessage() {}

func (x *StreamWriterOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriterOutputResponse.ProtoReflect.Descriptor instead.
func (*StreamWriterOutputResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{16}
}

func (x *StreamWriterOutputResponse) GetBuckets() []*WriterOutputBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type StreamEncounteredAcquisitionOutputKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition id of the experiment.
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
}

func (x *StreamEncounteredAcquisitionOutputKeysRequest) Reset() {
	*x = StreamEncounteredAcquisitionOutputKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEncounteredAcquisitionOutputKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEncounteredAcquisitionOutputKeysRequest) ProtoMessage() {}

func (x *StreamEncounteredAcquisitionOutputKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEncounteredAcquisitionOutputKeysRequest.ProtoReflect.Descriptor instead.
func (*StreamEncounteredAcquisitionOutputKeysRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{17}
}

func (x *StreamEncounteredAcquisitionOutputKeysRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

type StreamEncounteredAcquisitionOutputKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcquisitionOutputKeys []*AcquisitionOutputKey `protobuf:"bytes,1,rep,name=acquisition_output_keys,json=acquisitionOutputKeys,proto3" json:"acquisition_output_keys,omitempty"`
}

func (x *StreamEncounteredAcquisitionOutputKeysResponse) Reset() {
	*x = StreamEncounteredAcquisitionOutputKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEncounteredAcquisitionOutputKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEncounteredAcquisitionOutputKeysResponse) ProtoMessage() {}

func (x *StreamEncounteredAcquisitionOutputKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEncounteredAcquisitionOutputKeysResponse.ProtoReflect.Descriptor instead.
func (*StreamEncounteredAcquisitionOutputKeysResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{18}
}

func (x *StreamEncounteredAcquisitionOutputKeysResponse) GetAcquisitionOutputKeys() []*AcquisitionOutputKey {
	if x != nil {
		return x.AcquisitionOutputKeys
	}
	return nil
}

type StreamTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition id of the experiment.
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
	// The desired data selection.
	//
	// The units for all values are `seconds since the start of the experiment`.
	//
	DataSelection *DataSelection `protobuf:"bytes,2,opt,name=data_selection,json=dataSelection,proto3" json:"data_selection,omitempty"`
}

func (x *StreamTemperatureRequest) Reset() {
	*x = StreamTemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTemperatureRequest) ProtoMessage() {}

func (x *StreamTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTemperatureRequest.ProtoReflect.Descriptor instead.
func (*StreamTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{19}
}

func (x *StreamTemperatureRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

func (x *StreamTemperatureRequest) GetDataSelection() *DataSelection {
	if x != nil {
		return x.DataSelection
	}
	return nil
}

type TemperaturePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Temperature:
	//	*TemperaturePacket_Minion
	//	*TemperaturePacket_Promethion
	Temperature isTemperaturePacket_Temperature `protobuf_oneof:"temperature"`
}

func (x *TemperaturePacket) Reset() {
	*x = TemperaturePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperaturePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperaturePacket) ProtoMessage() {}

func (x *TemperaturePacket) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperaturePacket.ProtoReflect.Descriptor instead.
func (*TemperaturePacket) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{20}
}

func (m *TemperaturePacket) GetTemperature() isTemperaturePacket_Temperature {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (x *TemperaturePacket) GetMinion() *TemperaturePacket_MinIONTemperature {
	if x, ok := x.GetTemperature().(*TemperaturePacket_Minion); ok {
		return x.Minion
	}
	return nil
}

func (x *TemperaturePacket) GetPromethion() *TemperaturePacket_PromethIONTemperature {
	if x, ok := x.GetTemperature().(*TemperaturePacket_Promethion); ok {
		return x.Promethion
	}
	return nil
}

type isTemperaturePacket_Temperature interface {
	isTemperaturePacket_Temperature()
}

type TemperaturePacket_Minion struct {
	Minion *TemperaturePacket_MinIONTemperature `protobuf:"bytes,1,opt,name=minion,proto3,oneof"`
}

type TemperaturePacket_Promethion struct {
	Promethion *TemperaturePacket_PromethIONTemperature `protobuf:"bytes,2,opt,name=promethion,proto3,oneof"`
}

func (*TemperaturePacket_Minion) isTemperaturePacket_Temperature() {}

func (*TemperaturePacket_Promethion) isTemperaturePacket_Temperature() {}

type StreamTemperatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperatures []*TemperaturePacket `protobuf:"bytes,1,rep,name=temperatures,proto3" json:"temperatures,omitempty"`
}

func (x *StreamTemperatureResponse) Reset() {
	*x = StreamTemperatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTemperatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTemperatureResponse) ProtoMessage() {}

func (x *StreamTemperatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTemperatureResponse.ProtoReflect.Descriptor instead.
func (*StreamTemperatureResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{21}
}

func (x *StreamTemperatureResponse) GetTemperatures() []*TemperaturePacket {
	if x != nil {
		return x.Temperatures
	}
	return nil
}

type BiasVoltagePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcquisitionIndex uint64  `protobuf:"varint,1,opt,name=acquisition_index,json=acquisitionIndex,proto3" json:"acquisition_index,omitempty"`
	BiasVoltage      float64 `protobuf:"fixed64,2,opt,name=bias_voltage,json=biasVoltage,proto3" json:"bias_voltage,omitempty"`
	TimeSeconds      uint64  `protobuf:"varint,3,opt,name=time_seconds,json=timeSeconds,proto3" json:"time_seconds,omitempty"`
}

func (x *BiasVoltagePacket) Reset() {
	*x = BiasVoltagePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiasVoltagePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiasVoltagePacket) ProtoMessage() {}

func (x *BiasVoltagePacket) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiasVoltagePacket.ProtoReflect.Descriptor instead.
func (*BiasVoltagePacket) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{22}
}

func (x *BiasVoltagePacket) GetAcquisitionIndex() uint64 {
	if x != nil {
		return x.AcquisitionIndex
	}
	return 0
}

func (x *BiasVoltagePacket) GetBiasVoltage() float64 {
	if x != nil {
		return x.BiasVoltage
	}
	return 0
}

func (x *BiasVoltagePacket) GetTimeSeconds() uint64 {
	if x != nil {
		return x.TimeSeconds
	}
	return 0
}

type StreamBiasVoltagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition id of the experiment.
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
}

func (x *StreamBiasVoltagesRequest) Reset() {
	*x = StreamBiasVoltagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBiasVoltagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBiasVoltagesRequest) ProtoMessage() {}

func (x *StreamBiasVoltagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBiasVoltagesRequest.ProtoReflect.Descriptor instead.
func (*StreamBiasVoltagesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{23}
}

func (x *StreamBiasVoltagesRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

type StreamBiasVoltagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiasVoltages []*BiasVoltagePacket `protobuf:"bytes,1,rep,name=bias_voltages,json=biasVoltages,proto3" json:"bias_voltages,omitempty"`
}

func (x *StreamBiasVoltagesResponse) Reset() {
	*x = StreamBiasVoltagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBiasVoltagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBiasVoltagesResponse) ProtoMessage() {}

func (x *StreamBiasVoltagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBiasVoltagesResponse.ProtoReflect.Descriptor instead.
func (*StreamBiasVoltagesResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{24}
}

func (x *StreamBiasVoltagesResponse) GetBiasVoltages() []*BiasVoltagePacket {
	if x != nil {
		return x.BiasVoltages
	}
	return nil
}

type StreamBoxplotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The acquisition id of the experiment.
	AcquisitionRunId string `protobuf:"bytes,1,opt,name=acquisition_run_id,json=acquisitionRunId,proto3" json:"acquisition_run_id,omitempty"`
	// Type of boxplot data to return.
	DataType StreamBoxplotRequest_BoxplotType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=minknow_api.statistics.StreamBoxplotRequest_BoxplotType" json:"data_type,omitempty"`
	// Defines, in minutes, the width of each dataset.
	// This is how much time should each dataset (boxplot) cover. Note that MinKNOW stores
	// all stats at a default granularity (specified in the config file, i.e. 10 min in MinKNOW 3.2).
	// This dataset_width HAS to be a multiple of the default granularity!
	//
	// Note:
	// When multiple buckets are aggregated into a single dataset, the resulting dataset will
	// contain the average of the aggregated quantiles (with the exception of min/max)! This is not the
	// same as using a larger granularity in MinKNOW configs - the values that MinKNOW stores
	// are the true quantiles. Averaging quantiles will give a rough approximation, but not a quantile.
	// If the finest granularity is not required, we strongly suggest changing the time coverage in the config,
	// not the dataset_width in the rpc.
	DatasetWidth uint32 `protobuf:"varint,3,opt,name=dataset_width,json=datasetWidth,proto3" json:"dataset_width,omitempty"`
	// How often to return messages in this stream, specified in seconds. Note that this stream will
	// return results regardless of the stats updates (because it always returns all the datasets).
	// poll_time should be larger than the basecalled stats update rate in MinKNOW -
	// please see basecalled_stats_refresh_rate_seconds in the configs
	// (set to 1 second in MinKNOW 3.2).
	//
	// If unspecified, defaults to 1 minute.
	PollTime uint32 `protobuf:"varint,4,opt,name=poll_time,json=pollTime,proto3" json:"poll_time,omitempty"`
}

func (x *StreamBoxplotRequest) Reset() {
	*x = StreamBoxplotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBoxplotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBoxplotRequest) ProtoMessage() {}

func (x *StreamBoxplotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBoxplotRequest.ProtoReflect.Descriptor instead.
func (*StreamBoxplotRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{25}
}

func (x *StreamBoxplotRequest) GetAcquisitionRunId() string {
	if x != nil {
		return x.AcquisitionRunId
	}
	return ""
}

func (x *StreamBoxplotRequest) GetDataType() StreamBoxplotRequest_BoxplotType {
	if x != nil {
		return x.DataType
	}
	return StreamBoxplotRequest_QSCORE
}

func (x *StreamBoxplotRequest) GetDatasetWidth() uint32 {
	if x != nil {
		return x.DatasetWidth
	}
	return 0
}

func (x *StreamBoxplotRequest) GetPollTime() uint32 {
	if x != nil {
		return x.PollTime
	}
	return 0
}

type BoxplotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result boxplots are stored in this array. This is an overview of the stored data
	// from the START of the acquisition period. This includes ALL the basecalled stats
	// from MinKNOW, not just updates since previous calls!
	Datasets []*BoxplotResponse_BoxplotDataset `protobuf:"bytes,1,rep,name=datasets,proto3" json:"datasets,omitempty"`
}

func (x *BoxplotResponse) Reset() {
	*x = BoxplotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoxplotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxplotResponse) ProtoMessage() {}

func (x *BoxplotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxplotResponse.ProtoReflect.Descriptor instead.
func (*BoxplotResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{26}
}

func (x *BoxplotResponse) GetDatasets() []*BoxplotResponse_BoxplotDataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

type StreamDutyTimeResponse_BucketRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range covered by a bucket
	// Values are in seconds
	//
	// The range [start, end) is half open (i.e. the start value is included, the end value is
	// not).
	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *StreamDutyTimeResponse_BucketRange) Reset() {
	*x = StreamDutyTimeResponse_BucketRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDutyTimeResponse_BucketRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDutyTimeResponse_BucketRange) ProtoMessage() {}

func (x *StreamDutyTimeResponse_BucketRange) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDutyTimeResponse_BucketRange.ProtoReflect.Descriptor instead.
func (*StreamDutyTimeResponse_BucketRange) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{2, 0}
}

func (x *StreamDutyTimeResponse_BucketRange) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *StreamDutyTimeResponse_BucketRange) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type StreamDutyTimeResponse_ChannelStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How much time (in samples) spent in this channel state, for each bucket
	StateTimes []uint64 `protobuf:"varint,1,rep,packed,name=state_times,json=stateTimes,proto3" json:"state_times,omitempty"`
}

func (x *StreamDutyTimeResponse_ChannelStateData) Reset() {
	*x = StreamDutyTimeResponse_ChannelStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDutyTimeResponse_ChannelStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDutyTimeResponse_ChannelStateData) ProtoMessage() {}

func (x *StreamDutyTimeResponse_ChannelStateData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDutyTimeResponse_ChannelStateData.ProtoReflect.Descriptor instead.
func (*StreamDutyTimeResponse_ChannelStateData) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{2, 1}
}

func (x *StreamDutyTimeResponse_ChannelStateData) GetStateTimes() []uint64 {
	if x != nil {
		return x.StateTimes
	}
	return nil
}

type StreamReadLengthHistogramResponse_BucketRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range covered by a bucket
	// Units are as set in `read_length_type`, above
	//
	// The range [start, end) is half open (i.e. the start value is included, the end value is
	// not).
	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *StreamReadLengthHistogramResponse_BucketRange) Reset() {
	*x = StreamReadLengthHistogramResponse_BucketRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadLengthHistogramResponse_BucketRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadLengthHistogramResponse_BucketRange) ProtoMessage() {}

func (x *StreamReadLengthHistogramResponse_BucketRange) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadLengthHistogramResponse_BucketRange.ProtoReflect.Descriptor instead.
func (*StreamReadLengthHistogramResponse_BucketRange) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{6, 0}
}

func (x *StreamReadLengthHistogramResponse_BucketRange) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *StreamReadLengthHistogramResponse_BucketRange) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

type StreamReadLengthHistogramResponse_ReadLengthHistogramData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The filtering parameters which contributed to this bucket.
	Filtering []*ReadLengthHistogramKey `protobuf:"bytes,3,rep,name=filtering,proto3" json:"filtering,omitempty"`
	// Counts for each histogram bucket
	//
	// Units are as specified in `read_length_type`
	// The range covered by each bucket is as in `bucket_ranges`
	// The type of data accumulated in each bucket is given by `bucket_value_type`
	//
	BucketValues []uint64 `protobuf:"varint,1,rep,packed,name=bucket_values,json=bucketValues,proto3" json:"bucket_values,omitempty"`
	// The N50 value for the read length data for the selected `read_length_type` and
	// `read_end_reasons`.
	//
	// Units are as specified by `read_length_type`.
	//
	// Measured across all source data, after excluding the reads specified by
	// `discard_outlier_percent` in the stream request.
	//
	N50 float32 `protobuf:"fixed32,2,opt,name=n50,proto3" json:"n50,omitempty"`
}

func (x *StreamReadLengthHistogramResponse_ReadLengthHistogramData) Reset() {
	*x = StreamReadLengthHistogramResponse_ReadLengthHistogramData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadLengthHistogramResponse_ReadLengthHistogramData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadLengthHistogramResponse_ReadLengthHistogramData) ProtoMessage() {}

func (x *StreamReadLengthHistogramResponse_ReadLengthHistogramData) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadLengthHistogramResponse_ReadLengthHistogramData.ProtoReflect.Descriptor instead.
func (*StreamReadLengthHistogramResponse_ReadLengthHistogramData) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{6, 1}
}

func (x *StreamReadLengthHistogramResponse_ReadLengthHistogramData) GetFiltering() []*ReadLengthHistogramKey {
	if x != nil {
		return x.Filtering
	}
	return nil
}

func (x *StreamReadLengthHistogramResponse_ReadLengthHistogramData) GetBucketValues() []uint64 {
	if x != nil {
		return x.BucketValues
	}
	return nil
}

func (x *StreamReadLengthHistogramResponse_ReadLengthHistogramData) GetN50() float32 {
	if x != nil {
		return x.N50
	}
	return 0
}

type StreamAcquisitionOutputResponse_FilteredBuckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The filtering parameters which contributed to this bucket.
	Filtering []*AcquisitionOutputKey    `protobuf:"bytes,1,rep,name=filtering,proto3" json:"filtering,omitempty"`
	Buckets   []*AcquisitionOutputBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *StreamAcquisitionOutputResponse_FilteredBuckets) Reset() {
	*x = StreamAcquisitionOutputResponse_FilteredBuckets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAcquisitionOutputResponse_FilteredBuckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAcquisitionOutputResponse_FilteredBuckets) ProtoMessage() {}

func (x *StreamAcquisitionOutputResponse_FilteredBuckets) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAcquisitionOutputResponse_FilteredBuckets.ProtoReflect.Descriptor instead.
func (*StreamAcquisitionOutputResponse_FilteredBuckets) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{13, 0}
}

func (x *StreamAcquisitionOutputResponse_FilteredBuckets) GetFiltering() []*AcquisitionOutputKey {
	if x != nil {
		return x.Filtering
	}
	return nil
}

func (x *StreamAcquisitionOutputResponse_FilteredBuckets) GetBuckets() []*AcquisitionOutputBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

// Packet of temperatures appropriate for a MinION.
type TemperaturePacket_MinIONTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temperature as measured by the probe inside the asic.
	AsicTemperature float64 `protobuf:"fixed64,1,opt,name=asic_temperature,json=asicTemperature,proto3" json:"asic_temperature,omitempty"`
	// Temperature as measured by the probe in the minion heatsink.
	HeatsinkTemperature float64 `protobuf:"fixed64,2,opt,name=heatsink_temperature,json=heatsinkTemperature,proto3" json:"heatsink_temperature,omitempty"`
}

func (x *TemperaturePacket_MinIONTemperature) Reset() {
	*x = TemperaturePacket_MinIONTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperaturePacket_MinIONTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperaturePacket_MinIONTemperature) ProtoMessage() {}

func (x *TemperaturePacket_MinIONTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperaturePacket_MinIONTemperature.ProtoReflect.Descriptor instead.
func (*TemperaturePacket_MinIONTemperature) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TemperaturePacket_MinIONTemperature) GetAsicTemperature() float64 {
	if x != nil {
		return x.AsicTemperature
	}
	return 0
}

func (x *TemperaturePacket_MinIONTemperature) GetHeatsinkTemperature() float64 {
	if x != nil {
		return x.HeatsinkTemperature
	}
	return 0
}

// Packet of temperatures appropriate for a PromethION.
type TemperaturePacket_PromethIONTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temperature as measured by thermistor TH2 on the P-Chip.
	FlowcellTemperature float64 `protobuf:"fixed64,1,opt,name=flowcell_temperature,json=flowcellTemperature,proto3" json:"flowcell_temperature,omitempty"`
	// Mean of 12 pixel-blocks temperatures measured with sensors in the ASIC.
	ChamberTemperature float64 `protobuf:"fixed64,2,opt,name=chamber_temperature,json=chamberTemperature,proto3" json:"chamber_temperature,omitempty"`
}

func (x *TemperaturePacket_PromethIONTemperature) Reset() {
	*x = TemperaturePacket_PromethIONTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperaturePacket_PromethIONTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperaturePacket_PromethIONTemperature) ProtoMessage() {}

func (x *TemperaturePacket_PromethIONTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperaturePacket_PromethIONTemperature.ProtoReflect.Descriptor instead.
func (*TemperaturePacket_PromethIONTemperature) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{20, 1}
}

func (x *TemperaturePacket_PromethIONTemperature) GetFlowcellTemperature() float64 {
	if x != nil {
		return x.FlowcellTemperature
	}
	return 0
}

func (x *TemperaturePacket_PromethIONTemperature) GetChamberTemperature() float64 {
	if x != nil {
		return x.ChamberTemperature
	}
	return 0
}

type BoxplotResponse_BoxplotDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum value for any point in the dataset.
	Min float32 `protobuf:"fixed32,1,opt,name=min,proto3" json:"min,omitempty"`
	// 25th quartile value for all points in the dataset.
	Q25 float32 `protobuf:"fixed32,2,opt,name=q25,proto3" json:"q25,omitempty"`
	// 50th quartile or median value for all points in the dataset.
	Q50 float32 `protobuf:"fixed32,3,opt,name=q50,proto3" json:"q50,omitempty"`
	// 75th quartile value for all points in the dataset.
	Q75 float32 `protobuf:"fixed32,4,opt,name=q75,proto3" json:"q75,omitempty"`
	// Maximum value for any point in the dataset.
	Max float32 `protobuf:"fixed32,5,opt,name=max,proto3" json:"max,omitempty"`
	// Number of items in this box plot's stats.
	Count uint64 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BoxplotResponse_BoxplotDataset) Reset() {
	*x = BoxplotResponse_BoxplotDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_statistics_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoxplotResponse_BoxplotDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxplotResponse_BoxplotDataset) ProtoMessage() {}

func (x *BoxplotResponse_BoxplotDataset) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_statistics_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxplotResponse_BoxplotDataset.ProtoReflect.Descriptor instead.
func (*BoxplotResponse_BoxplotDataset) Descriptor() ([]byte, []int) {
	return file_minknow_api_statistics_proto_rawDescGZIP(), []int{26, 0}
}

func (x *BoxplotResponse_BoxplotDataset) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *BoxplotResponse_BoxplotDataset) GetQ25() float32 {
	if x != nil {
		return x.Q25
	}
	return 0
}

func (x *BoxplotResponse_BoxplotDataset) GetQ50() float32 {
	if x != nil {
		return x.Q50
	}
	return 0
}

func (x *BoxplotResponse_BoxplotDataset) GetQ75() float32 {
	if x != nil {
		return x.Q75
	}
	return 0
}

func (x *BoxplotResponse_BoxplotDataset) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *BoxplotResponse_BoxplotDataset) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_minknow_api_statistics_proto protoreflect.FileDescriptor

var file_minknow_api_statistics_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x03,
	0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44,
	0x75, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x75, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x1a, 0x35, 0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0x33, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a,
	0x81, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a,
	0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x18,
	0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0xc5, 0x04, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x6c,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x11, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x46, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xb0, 0x05, 0x0a, 0x21, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x6a, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x11, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x0e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x35, 0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0x9e, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x35, 0x30,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6e, 0x35, 0x30, 0x22, 0x4f, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x14,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61,
	0x6d, 0x70, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x61, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x61, 0x6d, 0x70, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x6d, 0x70,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6c, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0xb4,
	0x02, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88,
	0xb5, 0x18, 0x01, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x44, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x05,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x79, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x0c, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0xaf, 0x02, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x07,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5,
	0x18, 0x01, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x56, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x62, 0x0a, 0x1a, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x63, 0x0a,
	0x2d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01,
	0x52, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x15, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x03, 0x0a, 0x11, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x55, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x69, 0x6e, 0x49,
	0x4f, 0x4e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x49, 0x4f,
	0x4e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6f, 0x6e, 0x1a, 0x71, 0x0a, 0x11, 0x4d, 0x69,
	0x6e, 0x49, 0x4f, 0x4e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x73, 0x69, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x68, 0x65,
	0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x68, 0x65, 0x61, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x7b, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x49, 0x4f, 0x4e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x19, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x61, 0x73,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x62, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4f,
	0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22,
	0x6c, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x0d, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x69,
	0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x0c, 0x62, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa2, 0x02,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6f, 0x78, 0x70, 0x6c, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6f, 0x78,
	0x70, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f, 0x78, 0x70,
	0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x42, 0x6f, 0x78, 0x70, 0x6c, 0x6f, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x41, 0x53, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59,
	0x10, 0x02, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x78, 0x70, 0x6c, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x42, 0x6f, 0x78, 0x70, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x6f, 0x78, 0x70, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x0e, 0x42,
	0x6f, 0x78, 0x70, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x71, 0x32, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x71, 0x32,
	0x35, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x35, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x71, 0x35, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x37, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x71, 0x37, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x4c, 0x0a,
	0x0e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x73, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x0f, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x10, 0x01, 0x2a,
	0xa0, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x75, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x75,
	0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x75, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x10, 0x07, 0x32, 0x96, 0x0a, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x30, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12,
	0xc2, 0x01, 0x0a, 0x2a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x45,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x01, 0x30, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x69, 0x61, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x9a,
	0x01, 0x0a, 0x1c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x15,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x78, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x78, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2c, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6f, 0x78,
	0x70, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x6f, 0x78, 0x70, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x42, 0x5c, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65, 0x74, 0x65, 0x63, 0x68, 0x2e,
	0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75, 0x72, 0x62,
	0x61, 0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_minknow_api_statistics_proto_rawDescOnce sync.Once
	file_minknow_api_statistics_proto_rawDescData = file_minknow_api_statistics_proto_rawDesc
)

func file_minknow_api_statistics_proto_rawDescGZIP() []byte {
	file_minknow_api_statistics_proto_rawDescOnce.Do(func() {
		file_minknow_api_statistics_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_statistics_proto_rawDescData)
	})
	return file_minknow_api_statistics_proto_rawDescData
}

var file_minknow_api_statistics_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_minknow_api_statistics_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_minknow_api_statistics_proto_goTypes = []interface{}{
	(ReadLengthType)(0),                                    // 0: minknow_api.statistics.ReadLengthType
	(BucketValueType)(0),                                   // 1: minknow_api.statistics.BucketValueType
	(ReadEndReason)(0),                                     // 2: minknow_api.statistics.ReadEndReason
	(StreamBoxplotRequest_BoxplotType)(0),                  // 3: minknow_api.statistics.StreamBoxplotRequest.BoxplotType
	(*DataSelection)(nil),                                  // 4: minknow_api.statistics.DataSelection
	(*StreamDutyTimeRequest)(nil),                          // 5: minknow_api.statistics.StreamDutyTimeRequest
	(*StreamDutyTimeResponse)(nil),                         // 6: minknow_api.statistics.StreamDutyTimeResponse
	(*ReadLengthHistogramKey)(nil),                         // 7: minknow_api.statistics.ReadLengthHistogramKey
	(*ReadLengthHistogramSplit)(nil),                       // 8: minknow_api.statistics.ReadLengthHistogramSplit
	(*StreamReadLengthHistogramRequest)(nil),               // 9: minknow_api.statistics.StreamReadLengthHistogramRequest
	(*StreamReadLengthHistogramResponse)(nil),              // 10: minknow_api.statistics.StreamReadLengthHistogramResponse
	(*GetReadLengthTypesRequest)(nil),                      // 11: minknow_api.statistics.GetReadLengthTypesRequest
	(*GetReadLengthTypesResponse)(nil),                     // 12: minknow_api.statistics.GetReadLengthTypesResponse
	(*AcquisitionOutputKey)(nil),                           // 13: minknow_api.statistics.AcquisitionOutputKey
	(*AcquisitionOutputSplit)(nil),                         // 14: minknow_api.statistics.AcquisitionOutputSplit
	(*StreamAcquisitionOutputRequest)(nil),                 // 15: minknow_api.statistics.StreamAcquisitionOutputRequest
	(*AcquisitionOutputBucket)(nil),                        // 16: minknow_api.statistics.AcquisitionOutputBucket
	(*StreamAcquisitionOutputResponse)(nil),                // 17: minknow_api.statistics.StreamAcquisitionOutputResponse
	(*StreamWriterOutputRequest)(nil),                      // 18: minknow_api.statistics.StreamWriterOutputRequest
	(*WriterOutputBucket)(nil),                             // 19: minknow_api.statistics.WriterOutputBucket
	(*StreamWriterOutputResponse)(nil),                     // 20: minknow_api.statistics.StreamWriterOutputResponse
	(*StreamEncounteredAcquisitionOutputKeysRequest)(nil),  // 21: minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysRequest
	(*StreamEncounteredAcquisitionOutputKeysResponse)(nil), // 22: minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysResponse
	(*StreamTemperatureRequest)(nil),                       // 23: minknow_api.statistics.StreamTemperatureRequest
	(*TemperaturePacket)(nil),                              // 24: minknow_api.statistics.TemperaturePacket
	(*StreamTemperatureResponse)(nil),                      // 25: minknow_api.statistics.StreamTemperatureResponse
	(*BiasVoltagePacket)(nil),                              // 26: minknow_api.statistics.BiasVoltagePacket
	(*StreamBiasVoltagesRequest)(nil),                      // 27: minknow_api.statistics.StreamBiasVoltagesRequest
	(*StreamBiasVoltagesResponse)(nil),                     // 28: minknow_api.statistics.StreamBiasVoltagesResponse
	(*StreamBoxplotRequest)(nil),                           // 29: minknow_api.statistics.StreamBoxplotRequest
	(*BoxplotResponse)(nil),                                // 30: minknow_api.statistics.BoxplotResponse
	(*StreamDutyTimeResponse_BucketRange)(nil),             // 31: minknow_api.statistics.StreamDutyTimeResponse.BucketRange
	(*StreamDutyTimeResponse_ChannelStateData)(nil),        // 32: minknow_api.statistics.StreamDutyTimeResponse.ChannelStateData
	nil, // 33: minknow_api.statistics.StreamDutyTimeResponse.ChannelStatesEntry
	(*StreamReadLengthHistogramResponse_BucketRange)(nil),             // 34: minknow_api.statistics.StreamReadLengthHistogramResponse.BucketRange
	(*StreamReadLengthHistogramResponse_ReadLengthHistogramData)(nil), // 35: minknow_api.statistics.StreamReadLengthHistogramResponse.ReadLengthHistogramData
	(*StreamAcquisitionOutputResponse_FilteredBuckets)(nil),           // 36: minknow_api.statistics.StreamAcquisitionOutputResponse.FilteredBuckets
	(*TemperaturePacket_MinIONTemperature)(nil),                       // 37: minknow_api.statistics.TemperaturePacket.MinIONTemperature
	(*TemperaturePacket_PromethIONTemperature)(nil),                   // 38: minknow_api.statistics.TemperaturePacket.PromethIONTemperature
	(*BoxplotResponse_BoxplotDataset)(nil),                            // 39: minknow_api.statistics.BoxplotResponse.BoxplotDataset
	(*AcquisitionYieldSummary)(nil),                                   // 40: minknow_api.acquisition.AcquisitionYieldSummary
	(*AcquisitionWriterSummary)(nil),                                  // 41: minknow_api.acquisition.AcquisitionWriterSummary
}
var file_minknow_api_statistics_proto_depIdxs = []int32{
	4,  // 0: minknow_api.statistics.StreamDutyTimeRequest.data_selection:type_name -> minknow_api.statistics.DataSelection
	31, // 1: minknow_api.statistics.StreamDutyTimeResponse.bucket_ranges:type_name -> minknow_api.statistics.StreamDutyTimeResponse.BucketRange
	33, // 2: minknow_api.statistics.StreamDutyTimeResponse.channel_states:type_name -> minknow_api.statistics.StreamDutyTimeResponse.ChannelStatesEntry
	2,  // 3: minknow_api.statistics.ReadLengthHistogramKey.read_end_reason:type_name -> minknow_api.statistics.ReadEndReason
	0,  // 4: minknow_api.statistics.StreamReadLengthHistogramRequest.read_length_type:type_name -> minknow_api.statistics.ReadLengthType
	4,  // 5: minknow_api.statistics.StreamReadLengthHistogramRequest.data_selection:type_name -> minknow_api.statistics.DataSelection
	1,  // 6: minknow_api.statistics.StreamReadLengthHistogramRequest.bucket_value_type:type_name -> minknow_api.statistics.BucketValueType
	7,  // 7: minknow_api.statistics.StreamReadLengthHistogramRequest.filtering:type_name -> minknow_api.statistics.ReadLengthHistogramKey
	8,  // 8: minknow_api.statistics.StreamReadLengthHistogramRequest.split:type_name -> minknow_api.statistics.ReadLengthHistogramSplit
	0,  // 9: minknow_api.statistics.StreamReadLengthHistogramResponse.read_length_type:type_name -> minknow_api.statistics.ReadLengthType
	34, // 10: minknow_api.statistics.StreamReadLengthHistogramResponse.bucket_ranges:type_name -> minknow_api.statistics.StreamReadLengthHistogramResponse.BucketRange
	1,  // 11: minknow_api.statistics.StreamReadLengthHistogramResponse.bucket_value_type:type_name -> minknow_api.statistics.BucketValueType
	35, // 12: minknow_api.statistics.StreamReadLengthHistogramResponse.histogram_data:type_name -> minknow_api.statistics.StreamReadLengthHistogramResponse.ReadLengthHistogramData
	0,  // 13: minknow_api.statistics.GetReadLengthTypesResponse.available_types:type_name -> minknow_api.statistics.ReadLengthType
	4,  // 14: minknow_api.statistics.StreamAcquisitionOutputRequest.data_selection:type_name -> minknow_api.statistics.DataSelection
	13, // 15: minknow_api.statistics.StreamAcquisitionOutputRequest.filtering:type_name -> minknow_api.statistics.AcquisitionOutputKey
	14, // 16: minknow_api.statistics.StreamAcquisitionOutputRequest.split:type_name -> minknow_api.statistics.AcquisitionOutputSplit
	40, // 17: minknow_api.statistics.AcquisitionOutputBucket.yield_summary:type_name -> minknow_api.acquisition.AcquisitionYieldSummary
	36, // 18: minknow_api.statistics.StreamAcquisitionOutputResponse.buckets:type_name -> minknow_api.statistics.StreamAcquisitionOutputResponse.FilteredBuckets
	4,  // 19: minknow_api.statistics.StreamWriterOutputRequest.data_selection:type_name -> minknow_api.statistics.DataSelection
	41, // 20: minknow_api.statistics.WriterOutputBucket.writer_output:type_name -> minknow_api.acquisition.AcquisitionWriterSummary
	19, // 21: minknow_api.statistics.StreamWriterOutputResponse.buckets:type_name -> minknow_api.statistics.WriterOutputBucket
	13, // 22: minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysResponse.acquisition_output_keys:type_name -> minknow_api.statistics.AcquisitionOutputKey
	4,  // 23: minknow_api.statistics.StreamTemperatureRequest.data_selection:type_name -> minknow_api.statistics.DataSelection
	37, // 24: minknow_api.statistics.TemperaturePacket.minion:type_name -> minknow_api.statistics.TemperaturePacket.MinIONTemperature
	38, // 25: minknow_api.statistics.TemperaturePacket.promethion:type_name -> minknow_api.statistics.TemperaturePacket.PromethIONTemperature
	24, // 26: minknow_api.statistics.StreamTemperatureResponse.temperatures:type_name -> minknow_api.statistics.TemperaturePacket
	26, // 27: minknow_api.statistics.StreamBiasVoltagesResponse.bias_voltages:type_name -> minknow_api.statistics.BiasVoltagePacket
	3,  // 28: minknow_api.statistics.StreamBoxplotRequest.data_type:type_name -> minknow_api.statistics.StreamBoxplotRequest.BoxplotType
	39, // 29: minknow_api.statistics.BoxplotResponse.datasets:type_name -> minknow_api.statistics.BoxplotResponse.BoxplotDataset
	32, // 30: minknow_api.statistics.StreamDutyTimeResponse.ChannelStatesEntry.value:type_name -> minknow_api.statistics.StreamDutyTimeResponse.ChannelStateData
	7,  // 31: minknow_api.statistics.StreamReadLengthHistogramResponse.ReadLengthHistogramData.filtering:type_name -> minknow_api.statistics.ReadLengthHistogramKey
	13, // 32: minknow_api.statistics.StreamAcquisitionOutputResponse.FilteredBuckets.filtering:type_name -> minknow_api.statistics.AcquisitionOutputKey
	16, // 33: minknow_api.statistics.StreamAcquisitionOutputResponse.FilteredBuckets.buckets:type_name -> minknow_api.statistics.AcquisitionOutputBucket
	5,  // 34: minknow_api.statistics.StatisticsService.stream_duty_time:input_type -> minknow_api.statistics.StreamDutyTimeRequest
	15, // 35: minknow_api.statistics.StatisticsService.stream_acquisition_output:input_type -> minknow_api.statistics.StreamAcquisitionOutputRequest
	18, // 36: minknow_api.statistics.StatisticsService.stream_writer_output:input_type -> minknow_api.statistics.StreamWriterOutputRequest
	21, // 37: minknow_api.statistics.StatisticsService.stream_encountered_acquisition_output_keys:input_type -> minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysRequest
	23, // 38: minknow_api.statistics.StatisticsService.stream_temperature:input_type -> minknow_api.statistics.StreamTemperatureRequest
	27, // 39: minknow_api.statistics.StatisticsService.stream_bias_voltages:input_type -> minknow_api.statistics.StreamBiasVoltagesRequest
	9,  // 40: minknow_api.statistics.StatisticsService.stream_read_length_histogram:input_type -> minknow_api.statistics.StreamReadLengthHistogramRequest
	11, // 41: minknow_api.statistics.StatisticsService.get_read_length_types:input_type -> minknow_api.statistics.GetReadLengthTypesRequest
	29, // 42: minknow_api.statistics.StatisticsService.stream_basecall_boxplots:input_type -> minknow_api.statistics.StreamBoxplotRequest
	6,  // 43: minknow_api.statistics.StatisticsService.stream_duty_time:output_type -> minknow_api.statistics.StreamDutyTimeResponse
	17, // 44: minknow_api.statistics.StatisticsService.stream_acquisition_output:output_type -> minknow_api.statistics.StreamAcquisitionOutputResponse
	20, // 45: minknow_api.statistics.StatisticsService.stream_writer_output:output_type -> minknow_api.statistics.StreamWriterOutputResponse
	22, // 46: minknow_api.statistics.StatisticsService.stream_encountered_acquisition_output_keys:output_type -> minknow_api.statistics.StreamEncounteredAcquisitionOutputKeysResponse
	25, // 47: minknow_api.statistics.StatisticsService.stream_temperature:output_type -> minknow_api.statistics.StreamTemperatureResponse
	28, // 48: minknow_api.statistics.StatisticsService.stream_bias_voltages:output_type -> minknow_api.statistics.StreamBiasVoltagesResponse
	10, // 49: minknow_api.statistics.StatisticsService.stream_read_length_histogram:output_type -> minknow_api.statistics.StreamReadLengthHistogramResponse
	12, // 50: minknow_api.statistics.StatisticsService.get_read_length_types:output_type -> minknow_api.statistics.GetReadLengthTypesResponse
	30, // 51: minknow_api.statistics.StatisticsService.stream_basecall_boxplots:output_type -> minknow_api.statistics.BoxplotResponse
	43, // [43:52] is the sub-list for method output_type
	34, // [34:43] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_minknow_api_statistics_proto_init() }
func file_minknow_api_statistics_proto_init() {
	if File_minknow_api_statistics_proto != nil {
		return
	}
	file_minknow_api_acquisition_proto_init()
	file_minknow_api_rpc_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_statistics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDutyTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDutyTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadLengthHistogramKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadLengthHistogramSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadLengthHistogramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadLengthHistogramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadLengthTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadLengthTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionOutputKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionOutputSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAcquisitionOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionOutputBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAcquisitionOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriterOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriterOutputBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriterOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEncounteredAcquisitionOutputKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEncounteredAcquisitionOutputKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperaturePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTemperatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiasVoltagePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamBiasVoltagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamBiasVoltagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamBoxplotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoxplotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDutyTimeResponse_BucketRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDutyTimeResponse_ChannelStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadLengthHistogramResponse_BucketRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadLengthHistogramResponse_ReadLengthHistogramData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAcquisitionOutputResponse_FilteredBuckets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperaturePacket_MinIONTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperaturePacket_PromethIONTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_statistics_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoxplotResponse_BoxplotDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minknow_api_statistics_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*TemperaturePacket_Minion)(nil),
		(*TemperaturePacket_Promethion)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_statistics_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_statistics_proto_goTypes,
		DependencyIndexes: file_minknow_api_statistics_proto_depIdxs,
		EnumInfos:         file_minknow_api_statistics_proto_enumTypes,
		MessageInfos:      file_minknow_api_statistics_proto_msgTypes,
	}.Build()
	File_minknow_api_statistics_proto = out.File
	file_minknow_api_statistics_proto_rawDesc = nil
	file_minknow_api_statistics_proto_goTypes = nil
	file_minknow_api_statistics_proto_depIdxs = nil
}
