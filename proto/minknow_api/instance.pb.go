// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: minknow_api/instance.proto

package minknow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetVersionInfoResponse_DistributionStatus int32

const (
	GetVersionInfoResponse_UNKNOWN GetVersionInfoResponse_DistributionStatus = 0 // The distribution status is unknown or can not be determined
	GetVersionInfoResponse_STABLE  GetVersionInfoResponse_DistributionStatus = 1 // Released software in that same configuration in which
	// it was distributed.
	GetVersionInfoResponse_UNSTABLE GetVersionInfoResponse_DistributionStatus = 2 // Pre-release or release-candidate software that has not
	// been fully tested, but has not been modified from how it
	// was distributed.
	GetVersionInfoResponse_MODIFIED GetVersionInfoResponse_DistributionStatus = 3 // Some or all components have been replaced after distribution
)

// Enum value maps for GetVersionInfoResponse_DistributionStatus.
var (
	GetVersionInfoResponse_DistributionStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "STABLE",
		2: "UNSTABLE",
		3: "MODIFIED",
	}
	GetVersionInfoResponse_DistributionStatus_value = map[string]int32{
		"UNKNOWN":  0,
		"STABLE":   1,
		"UNSTABLE": 2,
		"MODIFIED": 3,
	}
)

func (x GetVersionInfoResponse_DistributionStatus) Enum() *GetVersionInfoResponse_DistributionStatus {
	p := new(GetVersionInfoResponse_DistributionStatus)
	*p = x
	return p
}

func (x GetVersionInfoResponse_DistributionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetVersionInfoResponse_DistributionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_instance_proto_enumTypes[0].Descriptor()
}

func (GetVersionInfoResponse_DistributionStatus) Type() protoreflect.EnumType {
	return &file_minknow_api_instance_proto_enumTypes[0]
}

func (x GetVersionInfoResponse_DistributionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetVersionInfoResponse_DistributionStatus.Descriptor instead.
func (GetVersionInfoResponse_DistributionStatus) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{1, 0}
}

// Note that InstallationType is duplicated in manager.proto, the two definitions should be kept in sync.
type GetVersionInfoResponse_InstallationType int32

const (
	// For internal release. production.proto will be enabled for this type
	GetVersionInfoResponse_ONT GetVersionInfoResponse_InstallationType = 0
	// For customer releases
	GetVersionInfoResponse_NC GetVersionInfoResponse_InstallationType = 1
	// For production release. production.proto will be enabled for this type
	GetVersionInfoResponse_PROD GetVersionInfoResponse_InstallationType = 2
	// For Q releases (nanopore long term support release)
	GetVersionInfoResponse_Q_RELEASE GetVersionInfoResponse_InstallationType = 3
	// Oxford Nanopore Diagnostic
	GetVersionInfoResponse_OND_RELEASE GetVersionInfoResponse_InstallationType = 4
)

// Enum value maps for GetVersionInfoResponse_InstallationType.
var (
	GetVersionInfoResponse_InstallationType_name = map[int32]string{
		0: "ONT",
		1: "NC",
		2: "PROD",
		3: "Q_RELEASE",
		4: "OND_RELEASE",
	}
	GetVersionInfoResponse_InstallationType_value = map[string]int32{
		"ONT":         0,
		"NC":          1,
		"PROD":        2,
		"Q_RELEASE":   3,
		"OND_RELEASE": 4,
	}
)

func (x GetVersionInfoResponse_InstallationType) Enum() *GetVersionInfoResponse_InstallationType {
	p := new(GetVersionInfoResponse_InstallationType)
	*p = x
	return p
}

func (x GetVersionInfoResponse_InstallationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetVersionInfoResponse_InstallationType) Descriptor() protoreflect.EnumDescriptor {
	return file_minknow_api_instance_proto_enumTypes[1].Descriptor()
}

func (GetVersionInfoResponse_InstallationType) Type() protoreflect.EnumType {
	return &file_minknow_api_instance_proto_enumTypes[1]
}

func (x GetVersionInfoResponse_InstallationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetVersionInfoResponse_InstallationType.Descriptor instead.
func (GetVersionInfoResponse_InstallationType) EnumDescriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{1, 1}
}

type GetVersionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionInfoRequest) Reset() {
	*x = GetVersionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionInfoRequest) ProtoMessage() {}

func (x *GetVersionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionInfoRequest.ProtoReflect.Descriptor instead.
func (*GetVersionInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{0}
}

type GetVersionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What minknow version is installed. Split into major, minor and patch versions
	// Also includes the full version as a string, which contain the major, minor and patch numbers
	// as well as if the version is pre-release version (-pre), whether it is a release candidate (-rc#)
	// or whether it is a variant version (i.e. for conferences) (-variant). For non-release builds it also
	// includes the hash of the commit it is based on, and whether the working copy is different from that has (-dirty)
	Minknow *GetVersionInfoResponse_MinknowVersion `protobuf:"bytes,1,opt,name=minknow,proto3" json:"minknow,omitempty"`
	// The protocols version specifies what version of bream is installed.
	// By default is set to '0.0.0.0', but will otherwise be set to a Bream release version.
	Protocols string `protobuf:"bytes,2,opt,name=protocols,proto3" json:"protocols,omitempty"`
	// Describes the distribution that this MinKNOW installation is part of, ususally
	// this will be the Metapackage version number/identity, this will be "unknown"
	// if the distribution-version hasn't been set. This information is also communicated
	// in the Manager's DaemonMessage in daemon.proto
	DistributionVersion string `protobuf:"bytes,3,opt,name=distribution_version,json=distributionVersion,proto3" json:"distribution_version,omitempty"`
	// Indicates if the MinKNOW distribution including components such as Bream
	// are stable, unstable or have been modified.
	DistributionStatus GetVersionInfoResponse_DistributionStatus `protobuf:"varint,4,opt,name=distribution_status,json=distributionStatus,proto3,enum=minknow_api.instance.GetVersionInfoResponse_DistributionStatus" json:"distribution_status,omitempty"`
	// The configuration version specifies what version of ont-configuration (wanda) is installed.
	// By default is set to '0.0.0.0', but will otherwise be set to a Wanda release version.
	//
	// Since 3.6
	Configuration string `protobuf:"bytes,5,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Indicates what installation type minknow was installed as. Certain installation
	// types may turn features on or off depending on the type. For example,
	// for ont and prod installs, the production.proto service will be enabled
	// to make calls such as writing to the eeprom
	//
	// Since 4.1
	InstallationType GetVersionInfoResponse_InstallationType `protobuf:"varint,6,opt,name=installation_type,json=installationType,proto3,enum=minknow_api.instance.GetVersionInfoResponse_InstallationType" json:"installation_type,omitempty"`
}

func (x *GetVersionInfoResponse) Reset() {
	*x = GetVersionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionInfoResponse) ProtoMessage() {}

func (x *GetVersionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionInfoResponse.ProtoReflect.Descriptor instead.
func (*GetVersionInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{1}
}

func (x *GetVersionInfoResponse) GetMinknow() *GetVersionInfoResponse_MinknowVersion {
	if x != nil {
		return x.Minknow
	}
	return nil
}

func (x *GetVersionInfoResponse) GetProtocols() string {
	if x != nil {
		return x.Protocols
	}
	return ""
}

func (x *GetVersionInfoResponse) GetDistributionVersion() string {
	if x != nil {
		return x.DistributionVersion
	}
	return ""
}

func (x *GetVersionInfoResponse) GetDistributionStatus() GetVersionInfoResponse_DistributionStatus {
	if x != nil {
		return x.DistributionStatus
	}
	return GetVersionInfoResponse_UNKNOWN
}

func (x *GetVersionInfoResponse) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

func (x *GetVersionInfoResponse) GetInstallationType() GetVersionInfoResponse_InstallationType {
	if x != nil {
		return x.InstallationType
	}
	return GetVersionInfoResponse_ONT
}

type GetOutputDirectoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOutputDirectoriesRequest) Reset() {
	*x = GetOutputDirectoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOutputDirectoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutputDirectoriesRequest) ProtoMessage() {}

func (x *GetOutputDirectoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutputDirectoriesRequest.ProtoReflect.Descriptor instead.
func (*GetOutputDirectoriesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{2}
}

type OutputDirectories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base output directory. Anything that is output to files is branched from this directory.
	Output string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	// Directory where logs will be stored.
	Log string `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	// Base directory where reads will be outputted.
	Reads string `protobuf:"bytes,3,opt,name=reads,proto3" json:"reads,omitempty"`
}

func (x *OutputDirectories) Reset() {
	*x = OutputDirectories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputDirectories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputDirectories) ProtoMessage() {}

func (x *OutputDirectories) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputDirectories.ProtoReflect.Descriptor instead.
func (*OutputDirectories) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{3}
}

func (x *OutputDirectories) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *OutputDirectories) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *OutputDirectories) GetReads() string {
	if x != nil {
		return x.Reads
	}
	return ""
}

type GetDefaultOutputDirectoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultOutputDirectoriesRequest) Reset() {
	*x = GetDefaultOutputDirectoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultOutputDirectoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultOutputDirectoriesRequest) ProtoMessage() {}

func (x *GetDefaultOutputDirectoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultOutputDirectoriesRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultOutputDirectoriesRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{4}
}

type SetOutputDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SetOutputDirectoryRequest) Reset() {
	*x = SetOutputDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOutputDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOutputDirectoryRequest) ProtoMessage() {}

func (x *SetOutputDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOutputDirectoryRequest.ProtoReflect.Descriptor instead.
func (*SetOutputDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{5}
}

func (x *SetOutputDirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SetOutputDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOutputDirectoryResponse) Reset() {
	*x = SetOutputDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOutputDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOutputDirectoryResponse) ProtoMessage() {}

func (x *SetOutputDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOutputDirectoryResponse.ProtoReflect.Descriptor instead.
func (*SetOutputDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{6}
}

type SetReadsDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SetReadsDirectoryRequest) Reset() {
	*x = SetReadsDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadsDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadsDirectoryRequest) ProtoMessage() {}

func (x *SetReadsDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadsDirectoryRequest.ProtoReflect.Descriptor instead.
func (*SetReadsDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{7}
}

func (x *SetReadsDirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SetReadsDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReadsDirectoryResponse) Reset() {
	*x = SetReadsDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadsDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadsDirectoryResponse) ProtoMessage() {}

func (x *SetReadsDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadsDirectoryResponse.ProtoReflect.Descriptor instead.
func (*SetReadsDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{8}
}

// disk-usage information for one file-system
type FilesystemDiskSpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the file-system
	FilesystemId string `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
	// How much space is left on the file-system
	BytesAvailable uint64 `protobuf:"varint,2,opt,name=bytes_available,json=bytesAvailable,proto3" json:"bytes_available,omitempty"`
	// The total capacity of the file-system when empty.
	BytesCapacity uint64 `protobuf:"varint,3,opt,name=bytes_capacity,json=bytesCapacity,proto3" json:"bytes_capacity,omitempty"`
	// A list of what MinKNOW stores on this file-system, eg: reads, logs,
	// intermediate-files
	What []string `protobuf:"bytes,4,rep,name=what,proto3" json:"what,omitempty"`
	// MinKNOW needs this much space to stop an experiment. If bytes_available
	// goes below this number, data could be lost!
	BytesToStopCleanly uint64 `protobuf:"varint,5,opt,name=bytes_to_stop_cleanly,json=bytesToStopCleanly,proto3" json:"bytes_to_stop_cleanly,omitempty"`
	// The amount of space left on the file-system when recommend_alert
	// was set true.
	BytesWhenAlertIssued uint64 `protobuf:"varint,6,opt,name=bytes_when_alert_issued,json=bytesWhenAlertIssued,proto3" json:"bytes_when_alert_issued,omitempty"`
	// MinKNOW recommends that you alert someone about the disk-usage
	RecommendAlert bool `protobuf:"varint,7,opt,name=recommend_alert,json=recommendAlert,proto3" json:"recommend_alert,omitempty"`
	// MinKNOW recommends that you stop the experiment due to disk-usage
	// concerns
	RecommendStop bool `protobuf:"varint,8,opt,name=recommend_stop,json=recommendStop,proto3" json:"recommend_stop,omitempty"`
	// Rate of change in bytes_available (per second) +'ve numbers indicate
	// that bytes_available is decreasing and space is being used
	// A value of 0 can indicate that this has not applicable or not available.
	BytesPerSecond int64 `protobuf:"varint,9,opt,name=bytes_per_second,json=bytesPerSecond,proto3" json:"bytes_per_second,omitempty"`
}

func (x *FilesystemDiskSpaceInfo) Reset() {
	*x = FilesystemDiskSpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDiskSpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDiskSpaceInfo) ProtoMessage() {}

func (x *FilesystemDiskSpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDiskSpaceInfo.ProtoReflect.Descriptor instead.
func (*FilesystemDiskSpaceInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{9}
}

func (x *FilesystemDiskSpaceInfo) GetFilesystemId() string {
	if x != nil {
		return x.FilesystemId
	}
	return ""
}

func (x *FilesystemDiskSpaceInfo) GetBytesAvailable() uint64 {
	if x != nil {
		return x.BytesAvailable
	}
	return 0
}

func (x *FilesystemDiskSpaceInfo) GetBytesCapacity() uint64 {
	if x != nil {
		return x.BytesCapacity
	}
	return 0
}

func (x *FilesystemDiskSpaceInfo) GetWhat() []string {
	if x != nil {
		return x.What
	}
	return nil
}

func (x *FilesystemDiskSpaceInfo) GetBytesToStopCleanly() uint64 {
	if x != nil {
		return x.BytesToStopCleanly
	}
	return 0
}

func (x *FilesystemDiskSpaceInfo) GetBytesWhenAlertIssued() uint64 {
	if x != nil {
		return x.BytesWhenAlertIssued
	}
	return 0
}

func (x *FilesystemDiskSpaceInfo) GetRecommendAlert() bool {
	if x != nil {
		return x.RecommendAlert
	}
	return false
}

func (x *FilesystemDiskSpaceInfo) GetRecommendStop() bool {
	if x != nil {
		return x.RecommendStop
	}
	return false
}

func (x *FilesystemDiskSpaceInfo) GetBytesPerSecond() int64 {
	if x != nil {
		return x.BytesPerSecond
	}
	return 0
}

type GetDiskSpaceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDiskSpaceInfoRequest) Reset() {
	*x = GetDiskSpaceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskSpaceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskSpaceInfoRequest) ProtoMessage() {}

func (x *GetDiskSpaceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskSpaceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDiskSpaceInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{10}
}

type StreamDiskSpaceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk space information will be streamed with this value determining the
	// period in seconds between updates.
	// A period of 0 is invalid
	Period uint32 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *StreamDiskSpaceInfoRequest) Reset() {
	*x = StreamDiskSpaceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDiskSpaceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDiskSpaceInfoRequest) ProtoMessage() {}

func (x *StreamDiskSpaceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDiskSpaceInfoRequest.ProtoReflect.Descriptor instead.
func (*StreamDiskSpaceInfoRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{11}
}

func (x *StreamDiskSpaceInfoRequest) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type GetDiskSpaceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemDiskSpaceInfo []*FilesystemDiskSpaceInfo `protobuf:"bytes,1,rep,name=filesystem_disk_space_info,json=filesystemDiskSpaceInfo,proto3" json:"filesystem_disk_space_info,omitempty"`
}

func (x *GetDiskSpaceInfoResponse) Reset() {
	*x = GetDiskSpaceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskSpaceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskSpaceInfoResponse) ProtoMessage() {}

func (x *GetDiskSpaceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskSpaceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDiskSpaceInfoResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{12}
}

func (x *GetDiskSpaceInfoResponse) GetFilesystemDiskSpaceInfo() []*FilesystemDiskSpaceInfo {
	if x != nil {
		return x.FilesystemDiskSpaceInfo
	}
	return nil
}

type GetMachineIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMachineIdRequest) Reset() {
	*x = GetMachineIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineIdRequest) ProtoMessage() {}

func (x *GetMachineIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineIdRequest.ProtoReflect.Descriptor instead.
func (*GetMachineIdRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{13}
}

type GetMachineIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machine_id MinKNOW uses for this host.
	MachineId string `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (x *GetMachineIdResponse) Reset() {
	*x = GetMachineIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineIdResponse) ProtoMessage() {}

func (x *GetMachineIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineIdResponse.ProtoReflect.Descriptor instead.
func (*GetMachineIdResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{14}
}

func (x *GetMachineIdResponse) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

type StreamInstanceActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamInstanceActivityRequest) Reset() {
	*x = StreamInstanceActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInstanceActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInstanceActivityRequest) ProtoMessage() {}

func (x *StreamInstanceActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInstanceActivityRequest.ProtoReflect.Descriptor instead.
func (*StreamInstanceActivityRequest) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{15}
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current state of the device
	DeviceState GetDeviceStateResponse_DeviceState `protobuf:"varint,1,opt,name=device_state,json=deviceState,proto3,enum=minknow_api.device.GetDeviceStateResponse_DeviceState" json:"device_state,omitempty"`
	// Information about the connected device (or no content if disconnected see: device_state)
	DeviceInfo *GetDeviceInfoResponse `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceInfo) GetDeviceState() GetDeviceStateResponse_DeviceState {
	if x != nil {
		return x.DeviceState
	}
	return GetDeviceStateResponse_DEVICE_DISCONNECTED
}

func (x *DeviceInfo) GetDeviceInfo() *GetDeviceInfoResponse {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

type BasecallSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mean basecall speed, in bases per second.
	//
	// This value is only streamed for acquisitions where basecalling is enabled.
	//
	// The value reported here is the value stored in last completed basecall boxplot bucket
	// Each boxplot bucket covers a duration of `boxplot_time_coverage_in_minutes`
	MeanBasecallSpeed float32 `protobuf:"fixed32,1,opt,name=mean_basecall_speed,json=meanBasecallSpeed,proto3" json:"mean_basecall_speed,omitempty"`
}

func (x *BasecallSpeed) Reset() {
	*x = BasecallSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasecallSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasecallSpeed) ProtoMessage() {}

func (x *BasecallSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasecallSpeed.ProtoReflect.Descriptor instead.
func (*BasecallSpeed) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{17}
}

func (x *BasecallSpeed) GetMeanBasecallSpeed() float32 {
	if x != nil {
		return x.MeanBasecallSpeed
	}
	return 0
}

type N50 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// N50 data, in basecalled bases
	//
	// This value is only streamed for acquisitions where basecalling is enabled.
	//
	// The latest value is sent once per minute
	N50 float32 `protobuf:"fixed32,1,opt,name=n50,proto3" json:"n50,omitempty"`
}

func (x *N50) Reset() {
	*x = N50{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *N50) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*N50) ProtoMessage() {}

func (x *N50) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use N50.ProtoReflect.Descriptor instead.
func (*N50) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{18}
}

func (x *N50) GetN50() float32 {
	if x != nil {
		return x.N50
	}
	return 0
}

type StreamInstanceActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StreamValue:
	//	*StreamInstanceActivityResponse_DeviceInfo
	//	*StreamInstanceActivityResponse_FlowCellInfo
	//	*StreamInstanceActivityResponse_ProtocolRunInfo
	//	*StreamInstanceActivityResponse_AcquisitionRunInfo
	//	*StreamInstanceActivityResponse_FlowCellHealth_
	//	*StreamInstanceActivityResponse_YieldSummary
	//	*StreamInstanceActivityResponse_BasecallSpeed
	//	*StreamInstanceActivityResponse_N50
	StreamValue isStreamInstanceActivityResponse_StreamValue `protobuf_oneof:"stream_value"`
}

func (x *StreamInstanceActivityResponse) Reset() {
	*x = StreamInstanceActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInstanceActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInstanceActivityResponse) ProtoMessage() {}

func (x *StreamInstanceActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInstanceActivityResponse.ProtoReflect.Descriptor instead.
func (*StreamInstanceActivityResponse) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{19}
}

func (m *StreamInstanceActivityResponse) GetStreamValue() isStreamInstanceActivityResponse_StreamValue {
	if m != nil {
		return m.StreamValue
	}
	return nil
}

func (x *StreamInstanceActivityResponse) GetDeviceInfo() *DeviceInfo {
	if x, ok := x.GetStreamValue().(*StreamInstanceActivityResponse_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

func (x *StreamInstanceActivityResponse) GetFlowCellInfo() *GetFlowCellInfoResponse {
	if x, ok := x.GetStreamValue().(*StreamInstanceActivityResponse_FlowCellInfo); ok {
		return x.FlowCellInfo
	}
	return nil
}

func (x *StreamInstanceActivityResponse) GetProtocolRunInfo() *ProtocolRunInfo {
	if x, ok := x.GetStreamValue().(*StreamInstanceActivityResponse_ProtocolRunInfo); ok {
		return x.ProtocolRunInfo
	}
	return nil
}

func (x *StreamInstanceActivityResponse) GetAcquisitionRunInfo() *AcquisitionRunInfo {
	if x, ok := x.GetStreamValue().(*StreamInstanceActivityResponse_AcquisitionRunInfo); ok {
		return x.AcquisitionRunInfo
	}
	return nil
}

func (x *StreamInstanceActivityResponse) GetFlowCellHealth() *StreamInstanceActivityResponse_FlowCellHealth {
	if x, ok := x.GetStreamValue().(*StreamInstanceActivityResponse_FlowCellHealth_); ok {
		return x.FlowCellHealth
	}
	return nil
}

func (x *StreamInstanceActivityResponse) GetYieldSummary() *AcquisitionYieldSummary {
	if x, ok := x.GetStreamValue().(*StreamInstanceActivityResponse_YieldSummary); ok {
		return x.YieldSummary
	}
	return nil
}

func (x *StreamInstanceActivityResponse) GetBasecallSpeed() *BasecallSpeed {
	if x, ok := x.GetStreamValue().(*StreamInstanceActivityResponse_BasecallSpeed); ok {
		return x.BasecallSpeed
	}
	return nil
}

func (x *StreamInstanceActivityResponse) GetN50() *N50 {
	if x, ok := x.GetStreamValue().(*StreamInstanceActivityResponse_N50); ok {
		return x.N50
	}
	return nil
}

type isStreamInstanceActivityResponse_StreamValue interface {
	isStreamInstanceActivityResponse_StreamValue()
}

type StreamInstanceActivityResponse_DeviceInfo struct {
	// Information about whether the device is connected or not, and if it is, gives
	// information about the connected device
	DeviceInfo *DeviceInfo `protobuf:"bytes,1,opt,name=device_info,json=deviceInfo,proto3,oneof"`
}

type StreamInstanceActivityResponse_FlowCellInfo struct {
	// Information about the currently conected flow cell
	//
	// Note: if no flow cell is connected this [flow_cell_info.has_flow_cell] will be false
	FlowCellInfo *GetFlowCellInfoResponse `protobuf:"bytes,2,opt,name=flow_cell_info,json=flowCellInfo,proto3,oneof"`
}

type StreamInstanceActivityResponse_ProtocolRunInfo struct {
	// Information about the in progress protocol.
	//
	// Note if no protocol is active this message will not be present.
	ProtocolRunInfo *ProtocolRunInfo `protobuf:"bytes,3,opt,name=protocol_run_info,json=protocolRunInfo,proto3,oneof"`
}

type StreamInstanceActivityResponse_AcquisitionRunInfo struct {
	// Information about the current acquisition run
	//
	// Note if no acquisition is active the message will not be present.
	AcquisitionRunInfo *AcquisitionRunInfo `protobuf:"bytes,4,opt,name=acquisition_run_info,json=acquisitionRunInfo,proto3,oneof"`
}

type StreamInstanceActivityResponse_FlowCellHealth_ struct {
	// Information about the health of the flow cell within the current run
	//
	// Note: only available if a run is in progress
	FlowCellHealth *StreamInstanceActivityResponse_FlowCellHealth `protobuf:"bytes,5,opt,name=flow_cell_health,json=flowCellHealth,proto3,oneof"`
}

type StreamInstanceActivityResponse_YieldSummary struct {
	// Acquisition yield information. Describes information such as number of reads,
	// what number of those reads have passed or failed basecalling etc. Rate
	// limited to 1 second per update
	YieldSummary *AcquisitionYieldSummary `protobuf:"bytes,6,opt,name=yield_summary,json=yieldSummary,proto3,oneof"`
}

type StreamInstanceActivityResponse_BasecallSpeed struct {
	// Basecall speed information
	// Note: only available if an acquisition with basecalling enabled is in progress
	BasecallSpeed *BasecallSpeed `protobuf:"bytes,7,opt,name=basecall_speed,json=basecallSpeed,proto3,oneof"`
}

type StreamInstanceActivityResponse_N50 struct {
	// n50 information
	//
	// Contains the n50 value, measured in basecalled bases
	//
	// Note: only available if an acquisition with basecalling enabled is in progress
	N50 *N50 `protobuf:"bytes,8,opt,name=n50,proto3,oneof"`
}

func (*StreamInstanceActivityResponse_DeviceInfo) isStreamInstanceActivityResponse_StreamValue() {}

func (*StreamInstanceActivityResponse_FlowCellInfo) isStreamInstanceActivityResponse_StreamValue() {}

func (*StreamInstanceActivityResponse_ProtocolRunInfo) isStreamInstanceActivityResponse_StreamValue() {
}

func (*StreamInstanceActivityResponse_AcquisitionRunInfo) isStreamInstanceActivityResponse_StreamValue() {
}

func (*StreamInstanceActivityResponse_FlowCellHealth_) isStreamInstanceActivityResponse_StreamValue() {
}

func (*StreamInstanceActivityResponse_YieldSummary) isStreamInstanceActivityResponse_StreamValue() {}

func (*StreamInstanceActivityResponse_BasecallSpeed) isStreamInstanceActivityResponse_StreamValue() {}

func (*StreamInstanceActivityResponse_N50) isStreamInstanceActivityResponse_StreamValue() {}

type GetVersionInfoResponse_MinknowVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major int32  `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor int32  `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch int32  `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	Full  string `protobuf:"bytes,4,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *GetVersionInfoResponse_MinknowVersion) Reset() {
	*x = GetVersionInfoResponse_MinknowVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionInfoResponse_MinknowVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionInfoResponse_MinknowVersion) ProtoMessage() {}

func (x *GetVersionInfoResponse_MinknowVersion) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionInfoResponse_MinknowVersion.ProtoReflect.Descriptor instead.
func (*GetVersionInfoResponse_MinknowVersion) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetVersionInfoResponse_MinknowVersion) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *GetVersionInfoResponse_MinknowVersion) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *GetVersionInfoResponse_MinknowVersion) GetPatch() int32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *GetVersionInfoResponse_MinknowVersion) GetFull() string {
	if x != nil {
		return x.Full
	}
	return ""
}

type StreamInstanceActivityResponse_FlowCellHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map between channel state name and a percentage of how much time that state has been active with respect to all other channel states
	//
	// This is over one minute of time this is calculated over
	ChannelStatePercentages map[string]float32 `protobuf:"bytes,1,rep,name=channel_state_percentages,json=channelStatePercentages,proto3" json:"channel_state_percentages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *StreamInstanceActivityResponse_FlowCellHealth) Reset() {
	*x = StreamInstanceActivityResponse_FlowCellHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minknow_api_instance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInstanceActivityResponse_FlowCellHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInstanceActivityResponse_FlowCellHealth) ProtoMessage() {}

func (x *StreamInstanceActivityResponse_FlowCellHealth) ProtoReflect() protoreflect.Message {
	mi := &file_minknow_api_instance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInstanceActivityResponse_FlowCellHealth.ProtoReflect.Descriptor instead.
func (*StreamInstanceActivityResponse_FlowCellHealth) Descriptor() ([]byte, []int) {
	return file_minknow_api_instance_proto_rawDescGZIP(), []int{19, 0}
}

func (x *StreamInstanceActivityResponse_FlowCellHealth) GetChannelStatePercentages() map[string]float32 {
	if x != nil {
		return x.ChannelStatePercentages
	}
	return nil
}

var File_minknow_api_instance_proto protoreflect.FileDescriptor

var file_minknow_api_instance_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x1a, 0x1d, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xc6, 0x05, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x66, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22,
	0x49, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x22, 0x4d, 0x0a, 0x10, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x43, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x52, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x5f, 0x52,
	0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x44, 0x5f,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x04, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x24, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x86, 0x03, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x77, 0x68, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57,
	0x68, 0x65, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x59, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x61, 0x6e,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x17, 0x0a, 0x03, 0x4e, 0x35, 0x30, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x35, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6e, 0x35,
	0x30, 0x22, 0xc5, 0x07, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x0e, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x14, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6f, 0x0a, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x0d, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4c,
	0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x03,
	0x6e, 0x35, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4e, 0x35, 0x30, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x35, 0x30, 0x1a, 0xfb, 0x01, 0x0a, 0x0e,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x9c,
	0x01, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x60, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c,
	0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x4a, 0x0a,
	0x1c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x84, 0x09, 0x0a, 0x0f, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a,
	0x10, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x79, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x88, 0x01, 0x0a,
	0x1e, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x69, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7e, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x7b, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x90, 0x02, 0x02, 0x12, 0x79, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x6d, 0x69,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12,
	0x81, 0x01, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x8c, 0x01, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33,
	0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01,
	0x42, 0x5c, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x65,
	0x74, 0x65, 0x63, 0x68, 0x2e, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69,
	0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c,
	0x79, 0x6f, 0x75, 0x72, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x69, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0xa2, 0x02, 0x05, 0x4d, 0x4b, 0x41, 0x50, 0x49, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minknow_api_instance_proto_rawDescOnce sync.Once
	file_minknow_api_instance_proto_rawDescData = file_minknow_api_instance_proto_rawDesc
)

func file_minknow_api_instance_proto_rawDescGZIP() []byte {
	file_minknow_api_instance_proto_rawDescOnce.Do(func() {
		file_minknow_api_instance_proto_rawDescData = protoimpl.X.CompressGZIP(file_minknow_api_instance_proto_rawDescData)
	})
	return file_minknow_api_instance_proto_rawDescData
}

var file_minknow_api_instance_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_minknow_api_instance_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_minknow_api_instance_proto_goTypes = []interface{}{
	(GetVersionInfoResponse_DistributionStatus)(0),        // 0: minknow_api.instance.GetVersionInfoResponse.DistributionStatus
	(GetVersionInfoResponse_InstallationType)(0),          // 1: minknow_api.instance.GetVersionInfoResponse.InstallationType
	(*GetVersionInfoRequest)(nil),                         // 2: minknow_api.instance.GetVersionInfoRequest
	(*GetVersionInfoResponse)(nil),                        // 3: minknow_api.instance.GetVersionInfoResponse
	(*GetOutputDirectoriesRequest)(nil),                   // 4: minknow_api.instance.GetOutputDirectoriesRequest
	(*OutputDirectories)(nil),                             // 5: minknow_api.instance.OutputDirectories
	(*GetDefaultOutputDirectoriesRequest)(nil),            // 6: minknow_api.instance.GetDefaultOutputDirectoriesRequest
	(*SetOutputDirectoryRequest)(nil),                     // 7: minknow_api.instance.SetOutputDirectoryRequest
	(*SetOutputDirectoryResponse)(nil),                    // 8: minknow_api.instance.SetOutputDirectoryResponse
	(*SetReadsDirectoryRequest)(nil),                      // 9: minknow_api.instance.SetReadsDirectoryRequest
	(*SetReadsDirectoryResponse)(nil),                     // 10: minknow_api.instance.SetReadsDirectoryResponse
	(*FilesystemDiskSpaceInfo)(nil),                       // 11: minknow_api.instance.FilesystemDiskSpaceInfo
	(*GetDiskSpaceInfoRequest)(nil),                       // 12: minknow_api.instance.GetDiskSpaceInfoRequest
	(*StreamDiskSpaceInfoRequest)(nil),                    // 13: minknow_api.instance.StreamDiskSpaceInfoRequest
	(*GetDiskSpaceInfoResponse)(nil),                      // 14: minknow_api.instance.GetDiskSpaceInfoResponse
	(*GetMachineIdRequest)(nil),                           // 15: minknow_api.instance.GetMachineIdRequest
	(*GetMachineIdResponse)(nil),                          // 16: minknow_api.instance.GetMachineIdResponse
	(*StreamInstanceActivityRequest)(nil),                 // 17: minknow_api.instance.StreamInstanceActivityRequest
	(*DeviceInfo)(nil),                                    // 18: minknow_api.instance.DeviceInfo
	(*BasecallSpeed)(nil),                                 // 19: minknow_api.instance.BasecallSpeed
	(*N50)(nil),                                           // 20: minknow_api.instance.N50
	(*StreamInstanceActivityResponse)(nil),                // 21: minknow_api.instance.StreamInstanceActivityResponse
	(*GetVersionInfoResponse_MinknowVersion)(nil),         // 22: minknow_api.instance.GetVersionInfoResponse.MinknowVersion
	(*StreamInstanceActivityResponse_FlowCellHealth)(nil), // 23: minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth
	nil,                                     // 24: minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth.ChannelStatePercentagesEntry
	(GetDeviceStateResponse_DeviceState)(0), // 25: minknow_api.device.GetDeviceStateResponse.DeviceState
	(*GetDeviceInfoResponse)(nil),           // 26: minknow_api.device.GetDeviceInfoResponse
	(*GetFlowCellInfoResponse)(nil),         // 27: minknow_api.device.GetFlowCellInfoResponse
	(*ProtocolRunInfo)(nil),                 // 28: minknow_api.protocol.ProtocolRunInfo
	(*AcquisitionRunInfo)(nil),              // 29: minknow_api.acquisition.AcquisitionRunInfo
	(*AcquisitionYieldSummary)(nil),         // 30: minknow_api.acquisition.AcquisitionYieldSummary
}
var file_minknow_api_instance_proto_depIdxs = []int32{
	22, // 0: minknow_api.instance.GetVersionInfoResponse.minknow:type_name -> minknow_api.instance.GetVersionInfoResponse.MinknowVersion
	0,  // 1: minknow_api.instance.GetVersionInfoResponse.distribution_status:type_name -> minknow_api.instance.GetVersionInfoResponse.DistributionStatus
	1,  // 2: minknow_api.instance.GetVersionInfoResponse.installation_type:type_name -> minknow_api.instance.GetVersionInfoResponse.InstallationType
	11, // 3: minknow_api.instance.GetDiskSpaceInfoResponse.filesystem_disk_space_info:type_name -> minknow_api.instance.FilesystemDiskSpaceInfo
	25, // 4: minknow_api.instance.DeviceInfo.device_state:type_name -> minknow_api.device.GetDeviceStateResponse.DeviceState
	26, // 5: minknow_api.instance.DeviceInfo.device_info:type_name -> minknow_api.device.GetDeviceInfoResponse
	18, // 6: minknow_api.instance.StreamInstanceActivityResponse.device_info:type_name -> minknow_api.instance.DeviceInfo
	27, // 7: minknow_api.instance.StreamInstanceActivityResponse.flow_cell_info:type_name -> minknow_api.device.GetFlowCellInfoResponse
	28, // 8: minknow_api.instance.StreamInstanceActivityResponse.protocol_run_info:type_name -> minknow_api.protocol.ProtocolRunInfo
	29, // 9: minknow_api.instance.StreamInstanceActivityResponse.acquisition_run_info:type_name -> minknow_api.acquisition.AcquisitionRunInfo
	23, // 10: minknow_api.instance.StreamInstanceActivityResponse.flow_cell_health:type_name -> minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth
	30, // 11: minknow_api.instance.StreamInstanceActivityResponse.yield_summary:type_name -> minknow_api.acquisition.AcquisitionYieldSummary
	19, // 12: minknow_api.instance.StreamInstanceActivityResponse.basecall_speed:type_name -> minknow_api.instance.BasecallSpeed
	20, // 13: minknow_api.instance.StreamInstanceActivityResponse.n50:type_name -> minknow_api.instance.N50
	24, // 14: minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth.channel_state_percentages:type_name -> minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth.ChannelStatePercentagesEntry
	2,  // 15: minknow_api.instance.InstanceService.get_version_info:input_type -> minknow_api.instance.GetVersionInfoRequest
	4,  // 16: minknow_api.instance.InstanceService.get_output_directories:input_type -> minknow_api.instance.GetOutputDirectoriesRequest
	6,  // 17: minknow_api.instance.InstanceService.get_default_output_directories:input_type -> minknow_api.instance.GetDefaultOutputDirectoriesRequest
	7,  // 18: minknow_api.instance.InstanceService.set_output_directory:input_type -> minknow_api.instance.SetOutputDirectoryRequest
	9,  // 19: minknow_api.instance.InstanceService.set_reads_directory:input_type -> minknow_api.instance.SetReadsDirectoryRequest
	12, // 20: minknow_api.instance.InstanceService.get_disk_space_info:input_type -> minknow_api.instance.GetDiskSpaceInfoRequest
	13, // 21: minknow_api.instance.InstanceService.stream_disk_space_info:input_type -> minknow_api.instance.StreamDiskSpaceInfoRequest
	15, // 22: minknow_api.instance.InstanceService.get_machine_id:input_type -> minknow_api.instance.GetMachineIdRequest
	17, // 23: minknow_api.instance.InstanceService.stream_instance_activity:input_type -> minknow_api.instance.StreamInstanceActivityRequest
	3,  // 24: minknow_api.instance.InstanceService.get_version_info:output_type -> minknow_api.instance.GetVersionInfoResponse
	5,  // 25: minknow_api.instance.InstanceService.get_output_directories:output_type -> minknow_api.instance.OutputDirectories
	5,  // 26: minknow_api.instance.InstanceService.get_default_output_directories:output_type -> minknow_api.instance.OutputDirectories
	8,  // 27: minknow_api.instance.InstanceService.set_output_directory:output_type -> minknow_api.instance.SetOutputDirectoryResponse
	10, // 28: minknow_api.instance.InstanceService.set_reads_directory:output_type -> minknow_api.instance.SetReadsDirectoryResponse
	14, // 29: minknow_api.instance.InstanceService.get_disk_space_info:output_type -> minknow_api.instance.GetDiskSpaceInfoResponse
	14, // 30: minknow_api.instance.InstanceService.stream_disk_space_info:output_type -> minknow_api.instance.GetDiskSpaceInfoResponse
	16, // 31: minknow_api.instance.InstanceService.get_machine_id:output_type -> minknow_api.instance.GetMachineIdResponse
	21, // 32: minknow_api.instance.InstanceService.stream_instance_activity:output_type -> minknow_api.instance.StreamInstanceActivityResponse
	24, // [24:33] is the sub-list for method output_type
	15, // [15:24] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_minknow_api_instance_proto_init() }
func file_minknow_api_instance_proto_init() {
	if File_minknow_api_instance_proto != nil {
		return
	}
	file_minknow_api_acquisition_proto_init()
	file_minknow_api_device_proto_init()
	file_minknow_api_protocol_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_minknow_api_instance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOutputDirectoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputDirectories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultOutputDirectoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOutputDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOutputDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReadsDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReadsDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDiskSpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiskSpaceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDiskSpaceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiskSpaceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInstanceActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasecallSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*N50); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInstanceActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionInfoResponse_MinknowVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minknow_api_instance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInstanceActivityResponse_FlowCellHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minknow_api_instance_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*StreamInstanceActivityResponse_DeviceInfo)(nil),
		(*StreamInstanceActivityResponse_FlowCellInfo)(nil),
		(*StreamInstanceActivityResponse_ProtocolRunInfo)(nil),
		(*StreamInstanceActivityResponse_AcquisitionRunInfo)(nil),
		(*StreamInstanceActivityResponse_FlowCellHealth_)(nil),
		(*StreamInstanceActivityResponse_YieldSummary)(nil),
		(*StreamInstanceActivityResponse_BasecallSpeed)(nil),
		(*StreamInstanceActivityResponse_N50)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minknow_api_instance_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_minknow_api_instance_proto_goTypes,
		DependencyIndexes: file_minknow_api_instance_proto_depIdxs,
		EnumInfos:         file_minknow_api_instance_proto_enumTypes,
		MessageInfos:      file_minknow_api_instance_proto_msgTypes,
	}.Build()
	File_minknow_api_instance_proto = out.File
	file_minknow_api_instance_proto_rawDesc = nil
	file_minknow_api_instance_proto_goTypes = nil
	file_minknow_api_instance_proto_depIdxs = nil
}
