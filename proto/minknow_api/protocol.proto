syntax="proto3";

package minknow_api.protocol;

option go_package = "github.com/allyourbasepair/proto/minknow_api/minknow";
option java_package = "com.nanoporetech.minknow_api";
option objc_class_prefix = "MKAPI";

import "minknow_api/acquisition.proto";
import "minknow_api/analysis_configuration.proto";
import "minknow_api/device.proto";
import "minknow_api/rpc_options.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service ProtocolService {
    // Initiates a python instance that runs the script specified by the `path` argument.
    // `list_protocols` will give back a list of protocol scripts that can be started by this call
    rpc start_protocol (StartProtocolRequest) returns (StartProtocolResponse) {}

    // Stops the currently running protocol script instance.
    rpc stop_protocol (StopProtocolRequest) returns (StopProtocolResponse) {}

    // Wait for a protocol run to finish.
    //
    // The call blocks until the run with the given run ID has finished (or returns immediately if
    // it had already finished) and returns information about the protocol run.
    //
    // If no run has been started with the provided run ID (or no run ID is given), an error is
    // returned.
    //
    // If NOTIFY_BEFORE_TERMINATION is specified for state, the protocol end time is an estimate, including
    // the allowed timeout.
    //
    // Since 1.10
    rpc wait_for_finished (WaitForFinishedRequest) returns (ProtocolRunInfo) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // Gets information about a protocol run.
    //
    // If no run ID is provided, information about the most recently started protocol run is
    // provided.
    //
    // Since 1.10
    rpc get_run_info (GetRunInfoRequest) returns (ProtocolRunInfo) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // List previously started protocol run ids (including any current protocol), in order of starting.
    //
    // The returned object can be used to find protocol information with get_run_info.
    //
    // Since 1.11
    rpc list_protocol_runs (ListProtocolRunsRequest) returns (ListProtocolRunsResponse) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // Returns the name and run id of the currently running protocol.
    //
    // Will fail with FAILED_PRECONDITION if there is no protocol running
    //
    // Since 1.11
    rpc get_current_protocol_run (GetCurrentProtocolRunRequest) returns (ProtocolRunInfo) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // Returns current protocol run info and streams any changes to the current protocol
    //
    // This call can be made even if there is no current protocol running. In this case, the next streamed
    // response will be the start of a new protocol instance and you will receive updates for that protocol
    // until it finishes
    //
    // If a protocol finishes this stream will still continue to run and you will be notified when a new protocol starts
    //
    // Since 1.12
    rpc watch_current_protocol_run (WatchCurrentProtocolRunRequest) returns (stream ProtocolRunInfo) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // Gives back a list that contains info about each possible protocol script minknow is aware of.
    // This will most likely be used to retrieve a suitable protocol script that can be passed on to `start_protocol`
    //
    // Since 1.10
    rpc list_protocols (ListProtocolsRequest) returns (ListProtocolsResponse) {
        option idempotency_level = IDEMPOTENT;
    }

    // Returns string-to-string map of the context tags
    //
    // Since 1.11
    rpc get_context_info (GetContextInfoRequest) returns (GetContextInfoResponse) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // Store context tags as arbitary string-to-string map
    //
    // Since 1.11
    rpc set_context_info (SetContextInfoRequest) returns (SetContextInfoResponse) {
        option idempotency_level = IDEMPOTENT;
    }

    // Value set by protocol scripts to define the purpose of the script. Gets this value
    //
    // Since 1.11
    rpc get_protocol_purpose (GetProtocolPurposeRequest) returns (GetProtocolPurposeResponse) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // Sets the protocol purpose. See also get_protocol_purpose
    //
    // Since 1.11
    rpc set_protocol_purpose (SetProtocolPurposeRequest) returns (SetProtocolPurposeResponse) {
        option idempotency_level = IDEMPOTENT;
    }

    // Links an epi2me workflow reference to a run id.
    //
    // Since 1.15
    rpc add_epi2me_workflow (AddEpi2meWorkflowRequest) returns (AddEpi2meWorkflowResponse) {}

    // List all used protocol group ids used in any previous protocol on the box.
    //
    // Since 3.2
    rpc list_protocol_group_ids(ListProtocolGroupIdsRequest) returns (ListProtocolGroupIdsResponse) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // Run a hardware check on the connected flow cell.
    //
    // Throws an error if there is no flow cell connected.
    //
    // Since 4.3
    rpc begin_hardware_check(BeginHardwareCheckRequest) returns (BeginHardwareCheckResponse) {
        option (experimental) = true;
    }

    // Run platform qc on the connected flow cell
    //
    // Throws an error if there is no flow cell connected.
    //
    // Since 4.3
    rpc begin_platform_qc(BeginPlatformQcRequest) returns (BeginPlatformQcResponse) {
        option (experimental) = true;
    }

    // Given a protocol and some information about the flow-cell and kits will provide a list
    // of settings required by the protocol, their defaults and dependencies.
    //
    // Since 4.3
    rpc list_settings_for_protocol(ListSettingsForProtocolRequest) returns (ListSettingsForProtocolResponse) {
        option (experimental) = true;
        option idempotency_level = NO_SIDE_EFFECTS;
    }
}

message BarcodeUserData {
    enum SampleType {
        // The barcode sample is a real sample being tested.
        test_sample = 0;

        // The barcode sample is a control which is expected to result in positive identification.
        positive_control = 1;

        // The barcode sample is a control which is expected to result in negative identification.
        negative_control = 2;

        // Indended to show that a result has not occured due to contamination.
        no_template_control = 3;
        
        // Separate positive controls for when kits expect 2.
        positive_control_1 = 4;

        // Separate positive controls for when kits expect 2.
        positive_control_2 = 5;
    }

    // Barcode name the user data applies to, eg: "barcode02"
    string barcode_name = 1;

    // Lamp barcode id the user data applies to, eg: "FIP04"
    string lamp_barcode_id = 2;

    // User defined string alias for the barcode.
    string alias = 3;

    // Sample type grouping for the barcode.
    SampleType type = 4;
}

message ProtocolRunUserInfo {
    // The group which the experiment should be held in.
    //
    // note: This value could be unset if a user did not specify a group_id when starting the protocol.
    google.protobuf.StringValue protocol_group_id = 1;

    // sample_id created by the user
    google.protobuf.StringValue sample_id = 2;

    // User supplied info for barcodes
    repeated BarcodeUserData barcode_user_info = 3;
}

message StartProtocolRequest {
    // The identifier of the protocol, as provided by list_protocols().
    string identifier = 1 [(rpc_required) = true];

    // The arguments to pass to the protocol.
    repeated string args = 2;

    // User input describing the protocol.
    ProtocolRunUserInfo user_info = 3;
}

message StartProtocolResponse {
    // UUID generated when the protocol is started, to uniquely represent this protocol instance
    string run_id = 1;
}

message StopProtocolRequest {
    // Specify how any running acquisition should
    // be handled when stopping the protocol.
    //
    // Protocol state will enter PROTOCOL_WAITING_FOR_ACQUISITION whilst any running
    // acquisition is finished.
    //
    // If a script ends on its own any analysis that was started is stopped, and it
    // is allowed to catchup. If the caller wants to end catchup they can call stop_protocol
    // to end catchup.
    //
    // Since 1.15
    acquisition.StopRequest.DataAction data_action_on_stop = 1;
}

message StopProtocolResponse {
}

message ListProtocolsRequest {
    // If this is false, then will try to use the cached value of the protocol list where possible
    // (still subject to changes in flow cell).
    // If this is true, then will force a reload of the protocol list
    //
    // Defaults to false
    bool force_reload = 1;
}

message ProtocolInfo {
    message TagValue {
        oneof tag_value {
            string string_value = 1;
            bool bool_value = 2;
            int64 int_value = 3;
            double double_value = 4;
            string array_value = 5;
            string object_value = 6;
        }
    }
    message TagExtractionResult {
        bool success = 1;
        string error_report = 2;
    }

    string identifier = 1;
    map<string,TagValue> tags = 2;
    string name = 3;
    TagExtractionResult tag_extraction_result = 4;
}

message ListProtocolsResponse {
    repeated ProtocolInfo protocols = 1;
}

message WaitForFinishedRequest {
    enum NotificationState {
        // Request return just after the protocol has temrinated, including any acquisition periods completing.
        NOTIFY_ON_TERMINATION = 0;

        // Request return prior to the script being termiated.
        // note: will try to return 5s before killing the protocol script.
        NOTIFY_BEFORE_TERMINATION = 1;

        // Notify as the protocol script finishes, not waiting for any in progress acquisition to complete.
        NOTIFY_ON_SCRIPT_TERMINATION = 2;
    };

    // Only consider a specific protocol run.
    string run_id = 1 [(rpc_required) = true];

    // Control what to wait for.
    //
    // Specifying NOTIFY_BEFORE_TERMINATION allows a caller to be notified the script will be ended _soon_,
    // and do final work to end cleanly.
    //
    // Since 1.11
    NotificationState state = 2;

    // Timeout to wait for finished, if the timeout expires before the protocol is complete (in the state requested)
    // then the response returns.
    //
    // By default the timeout will wait forever.
    //
    // Since 1.15
    float timeout = 3;
}

message GetRunInfoRequest {
    // The protocol run to get information about.
    string run_id = 1;
}

enum ProtocolState {
    // The protocol is still running.
    PROTOCOL_RUNNING = 0;

    // The protocol is waiting for the device to reach temperature
    //
    // Since 1.15
    PROTOCOL_WAITING_FOR_TEMPERATURE = 4;

    // Occurs when data protocol has stopped (either from a explicit rpc request or the script naturally ended)
    // and data is still being processed (albacore is still in catchup and processing reads).
    PROTOCOL_WAITING_FOR_ACQUISITION = 5;

    // The protocol finished on its own and did not report an error.
    //
    // This is determined by the protocol process exiting with a zero exit code.
    PROTOCOL_COMPLETED = 1;

    // The protocol was terminated by the user.
    PROTOCOL_STOPPED_BY_USER = 2;

    // The protocol finished on its own and reported an error.
    //
    // This is determined by the protocol process exiting with a non-zero exit code or because of a
    // signal. Often, this will be because an exception was raised in the Python code and not
    // caught, but could also indicate that the Python process crashed or was killed by some
    // mechanism other than by MinKNOW.
    PROTOCOL_FINISHED_WITH_ERROR = 3;

    // The protocol was terminated because the sequencing device encountered an error.
    PROTOCOL_FINISHED_WITH_DEVICE_ERROR = 6;

    // The protocol was terminated because MinKNOW could not send telemetry to start acquisition.
    PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY = 7;
}

message Epi2meWorkflowReference {
    // The unique identifier for a workflow ( unique to a specific instance of epi2me )
    int64 id = 1;

    // URL that links to the workflow report. Syntax for a local workflow: file:// otherwise: http(s)://
    string url = 2;
}

message ProtocolRunInfo {
    // The unique identifier assigned to this run.
    //
    // This is guaranteed to be made of ASCII characters, and at most 40 characters. It is globally
    // unique across all protocols runs on all MinKNOW instances.
    string run_id = 1;

    // The identifier of the protocol, as passed to start_protocol().
    string protocol_id = 2;

    // The arguments passed to start_protocol().
    repeated string args = 3;

    // Output location for protocol data (eg. reads).
    //
    // Since 1.16.
    string output_path = 11;

    // Indicates the current state of the protocol run.
    ProtocolState state = 4;

    // When the protocol was started (UTC).
    google.protobuf.Timestamp start_time = 5;

    // When the protocol script terminated (UTC).
    //
    // Unset if the protocol script is still running.
    //
    // Note that the protocol may still run until final acquisiton completes.
    google.protobuf.Timestamp script_end_time = 9;

    // When the protocol terminated (UTC), indicating both the
    // protocol script and the final acquisition were completed.
    //
    // Unset if the protocol is still running.
    google.protobuf.Timestamp end_time = 6;

    // A list of acquisition periods started whilst this protocol was running.
    //
    repeated string acquisition_run_ids = 7;

    // User specified information associated with the protocol at start time.
    //
    // Since 1.11.
    ProtocolRunUserInfo user_info = 8;

    // List of workflows from epi2me associated with this protocol
    //
    // Since 1.15.
    repeated Epi2meWorkflowReference epi2me_workflows = 10;

    // Information about the device a protocol was started with
    //
    // Since 3.4
    device.GetDeviceInfoResponse device = 12;

    // Information about the flow cell a protocol was started with
    //
    // Since 3.4
    device.GetFlowCellInfoResponse flow_cell = 13;

    // Meta-info about the protocol
    //
    // Since 3.8
    ProtocolInfo meta_info = 14;
}

message ListProtocolRunsRequest {
}

message ListProtocolRunsResponse {
    repeated string run_ids = 1;
}
message GetCurrentProtocolRunRequest {

}

message GetCurrentProtocolRunResponse {
    ProtocolRunInfo run_info = 3;
}

message WatchCurrentProtocolRunRequest {

}

message GetContextInfoRequest {

}

message GetContextInfoResponse {
    map<string, string> context_info = 1;
}

message SetContextInfoRequest {
    map<string, string> context_info = 1;
}

message SetContextInfoResponse {

}

message GetProtocolPurposeRequest {

}

message GetProtocolPurposeResponse {
    string purpose = 1;
}

message SetProtocolPurposeRequest {
    string purpose = 1;
}

message SetProtocolPurposeResponse {

}

message AddEpi2meWorkflowRequest {
    string run_id = 1 [(rpc_required) = true];

    Epi2meWorkflowReference epi2me_workflow = 2 [(rpc_required) = true];
}

message AddEpi2meWorkflowResponse {
}

message ListProtocolGroupIdsRequest {
}

message ListProtocolGroupIdsResponse {
    // A list of protocol group ids used in any
    // protocol started on this instance of minknow.
    //
    repeated string protocol_group_ids = 1;
}

message BeginHardwareCheckRequest {}

message BeginHardwareCheckResponse {
    // UUID generated when the protocol is started, to uniquely represent this protocol instance
    string run_id = 1;
}

message BeginPlatformQcRequest {

}

message BeginPlatformQcResponse {
    // UUID generated when the protocol is started, to uniquely represent this protocol instance
    string run_id = 1;
}

message ProtocolIdentifierComponents {
    enum Location {
        ANY = 0;
        SYSTEM_SCRIPTS = 1;
        USER_SCRIPTS = 2;
    };
    // If not specified, will default to "ANY"
    Location location = 1;
    // one of "custom", "sequencing", "control", "ctc", "platform qc" or "flowcell_plugin"
    string experiment_type = 2;
    // Name (or path) of the protocol, without the .toml extension eg: "sequencing/sequencing_MIN106_DNA" this is relative to the
    // system or user protocol directory
    string name = 3;
    // eg: "FLO-MIN106"
    string flow_cell_product_code = 4;
    // eg: "SQK-RPB004"
    string kit = 5;
}


message ListSettingsForProtocolRequest {
    oneof protocol_identifier {
        // specify the protocol with a string containing all the protocol's identifying components, eg:
        // "sequencing/sequencing_MIN106_DNA:FLO-MIN106:SQK-RPB004"
        string identifier = 1;

        // specify the protocol providing the identifying components individually. All components are optional, if more
        // than one protocol matches given strings, information about the first will be returned.
        ProtocolIdentifierComponents components = 2;
    }
}

message ProtocolSetting {
    enum Category {
        OTHER = 0;
        RUN_OPTIONS = 1;
        BASECALLING = 2;
        OUTPUT = 3;
    };

    enum Unit {
        UNITLESS = 0;

        // strings
        UTF8_STRING = 1;
        ASCII_STRING = 2;
        PATH = 3;
        URL = 4;
        PRIVATE_STRING = 5; // eg: password, or identifying data, something that should be obscured on the screen
        CHOICE = 6; // choose one of the strings described in choices
        MULTI_CHOICE = 7; // choose any number of the strings described in choices.

        // numbers
        SECOND = 8;
        HOUR = 9;
        BASE = 10;
        KBASE = 11;
        MBASE = 12;
        GBASE = 13;
        MILLIVOLT = 14;
    };

    message ProtocolSettingValue {
        oneof protocol_setting_value {
            string string_value = 1;
            double float_value = 2;
            int64 integer_value = 3;
            bool bool_value = 4;
            analysis_configuration.WriterConfiguration.ChannelConfiguration channels_value = 5;
        }
    }

    message Constraint {
        enum Condition {
            EQUAL = 0;
            NOT_EQUAL = 1;
            GT_EQ = 2;
            GT = 3;
            LT_EQ = 4;
            LT = 5;
            IN = 6;     // When setting a path, it should be in or under the constraining path
            NOT_IN  = 7;// Forbidden directory for a path
            ENDS_WITH = 8;
            STARTS_WITH = 9;
        };
        Condition condition = 1;
        ProtocolSettingValue value = 2;
    }

    message Dependency {
        string identifier = 1;
        repeated Constraint constraints = 2;
    }

    enum Visibility {
        // User can change this, a default may be provided
        EDITABLE = 0;
        // Don't show this to the user, it's not relevant to this protocol
        HIDDEN = 1;
        // User shouldn't change this from the default
        FIXED = 2;
        // User must set this, no sensible default can be provided
        REQUIRED = 3;
    };
    Category category = 1;

    // Identifier is the unique primary-key for referring to protocol-settings,
    // dependencies refer to other settings via their identifier.
    string identifier = 2 [(rpc_required) = true];
    string display_name = 3 [(rpc_required) = true];

    // Optional additional help text for a setting that may be shown to the user if required.
    string help = 16;

    Unit unit = 5;
    ProtocolSettingValue default_value = 6;

    // All constraints must be met if this setting is to be considered valid
    repeated Constraint constraints = 7;

    // If any of the dependencies matches it's constraints, this setting should
    // adopt the level of visibility specified in "visibility". If none of the
    // dependencies match their constraints, then "visibility" should be ignored
    // and the option should be hidden from the user.
    //
    // Some dependencies may be specified multiple times, but with mutually
    // exclusive constraints, for example if the setting controls data compression
    // level, where there is a compression_algorithm setting specified by a string
    // that can have the values "X", "Y" or "None". The setting may be dependent
    // on compression_algorithm equals "X" or compression_algorithm equals "Y".
    // If the compression_algorithm is "None" then none of the dependency constraints
    // will be met and the setting should be hidden. A typical arrangement of fields
    // in this case would be:
    // Dependency {
    //   identifier: "compression_algorithm",
    //   Constraint {
    //     condition : EQUAL,
    //     value: "X"
    //   }
    // }
    // Dependency {
    //   identifier: "compression_algorithm",
    //   Constraint {
    //     condition : EQUAL,
    //     value: "Y"
    //   }
    // }
    // When a dependency is specified with multiple constraints they must all be
    // met before the dependency is considered satisfied, for example some other
    // setting may be dependent on compression_level being in a range (0,10] :
    //  Dependency {
    //   identifier: "compression_level",
    //   Constraint {
    //     condition : GT,
    //     value: 0
    //   },
    //   Constraint {
    //     condition : LT_EQ,
    //     value: 10
    //   }
    // }
    repeated Dependency dependencies = 8;

    // If any of the dependencies match their constraints, this level of visibility
    // should be adopted. It should also be adopted if no dependencies are specified.
    Visibility visibility = 9;

    // when unit is CHOICE, this defines the acceptable choices.
    repeated string choices = 17;
}

message ListSettingsForProtocolResponse {
    // Run options
    message RunOptions {
        ProtocolSetting run_length = 1;
        ProtocolSetting bias_voltage = 2;
        ProtocolSetting read_until_enabled = 3;
        ProtocolSetting read_until_ref_file = 4;
        ProtocolSetting read_until_channels = 5;
        ProtocolSetting read_until_bed_file_enabled = 6;
        ProtocolSetting read_until_bed_file = 7;
        ProtocolSetting read_until_enrichment = 8;
        ProtocolSetting active_channel_selection = 9; // bool
        ProtocolSetting mux_scan_period = 10; // in hours
        ProtocolSetting group_change_period = 11;
    }

    message Basecalling {
        ProtocolSetting basecalling_enabled = 1;
        ProtocolSetting barcoding_enabled = 2;
        ProtocolSetting basecall_model = 3;
        ProtocolSetting trim_barcodes_enabled = 4;
        ProtocolSetting require_barcodes_both_ends = 5;
        ProtocolSetting detect_mid_strand_barcodes = 6;
        ProtocolSetting override_mid_barcoding_score = 7;
        ProtocolSetting override_rear_barcoding_score = 8;
        ProtocolSetting min_barcoding_score = 9;
        ProtocolSetting min_barcoding_score_rear = 10;
        ProtocolSetting min_barcoding_score_mid = 11;
        ProtocolSetting alignment_enabled = 12;
        ProtocolSetting alignment_ref_file = 13;
        ProtocolSetting alignment_bed_file_enabled = 14;
        ProtocolSetting alignment_bed_file = 15;
    }

    // Output
    message Output {
        ProtocolSetting output_location = 1;
        ProtocolSetting fast_q_enabled = 2;
        ProtocolSetting fast_q_reads_per_file = 3;
        ProtocolSetting fast_q_data_compression = 4;
        ProtocolSetting fast_5_enabled = 5;
        ProtocolSetting fast_5_reads_per_file = 6;
        ProtocolSetting fast_5_data_trace_table = 7;
        ProtocolSetting fast_5_data_move_table = 8;
        ProtocolSetting fast_5_data_fast_q = 9;
        ProtocolSetting fast_5_data_raw = 10;
        ProtocolSetting fast_5_data_compression = 11;
        ProtocolSetting bam_enabled = 12;
        ProtocolSetting read_filtering_enabled = 13;
        ProtocolSetting read_filtering_min_qscore = 14;
        ProtocolSetting read_filtering_min_read_length = 15;
        ProtocolSetting read_filtering_max_read_length = 16;
        ProtocolSetting bulk_file_enabled = 17;
        ProtocolSetting bulk_file_raw = 18;
        ProtocolSetting bulk_file_events = 19;
        ProtocolSetting bulk_file_read_table = 20;
        ProtocolSetting bulk_file_raw_enabled = 21;
        ProtocolSetting bulk_file_events_enabled = 22;
        ProtocolSetting bulk_file_read_table_enabled = 23;
    }

    ProtocolIdentifierComponents protocol = 1;

    RunOptions run_options = 2;
    Basecalling basecalling = 3;
    Output output = 4;

    // Any protocol settings not covered by the above structures, for example
    // those required for custom-scripts.
    repeated ProtocolSetting protocol_settings = 5;
}
