// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minknow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatisticsServiceClient is the client API for StatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsServiceClient interface {
	// Tracks how much time has been spent in each channel state, aggregated across all the channels
	//
	// Since 4.0
	StreamDutyTime(ctx context.Context, in *StreamDutyTimeRequest, opts ...grpc.CallOption) (StatisticsService_StreamDutyTimeClient, error)
	// Tracks experiment output across various filters over time.
	//
	// The first response will give you all the data it can, and continue to provide updates
	// if the acquisition period remains live.
	//
	// The stream will end once the current acquisition period ends, and a caller will need to
	// reinvoke the rpc in order to get new data.
	//
	// Since 1.14
	StreamAcquisitionOutput(ctx context.Context, in *StreamAcquisitionOutputRequest, opts ...grpc.CallOption) (StatisticsService_StreamAcquisitionOutputClient, error)
	// Tracks experiment writes across all channels over time
	//
	// The first response will give you all the data it can.
	//
	// The stream will end once the current acquisition period ends, and a caller will need to
	// reinvoke the rpc in order to get new data.
	//
	// Since 4.0
	StreamWriterOutput(ctx context.Context, in *StreamWriterOutputRequest, opts ...grpc.CallOption) (StatisticsService_StreamWriterOutputClient, error)
	// Tracks which barcode names have been encountered
	//
	// When a new barcode name is encountered, a list of all encountered barcode names is returned
	//
	// Since 4.0
	StreamEncounteredAcquisitionOutputKeys(ctx context.Context, in *StreamEncounteredAcquisitionOutputKeysRequest, opts ...grpc.CallOption) (StatisticsService_StreamEncounteredAcquisitionOutputKeysClient, error)
	// Streams device temperature for a device. The first message will contain all of the temperatures up
	// until the current live point, and then messages after that point will just be updates.
	//
	// Temperatures are averaged over a 1 minute period, and the value of each bucket is given in minute intervals
	//
	// Since 3.0
	StreamTemperature(ctx context.Context, in *StreamTemperatureRequest, opts ...grpc.CallOption) (StatisticsService_StreamTemperatureClient, error)
	// Streams when bias voltage changes occur, where the response given will be the acquisition
	// index that the voltage changed at, and the voltage itself. The first message will contain
	// all of the bias voltage changes up until the current live point, and then messages after
	// that period will just be updates
	//
	// Will fail with INVALID_ARGUMENT if an unknown acquisition id is given
	//
	// Since 3.2
	StreamBiasVoltages(ctx context.Context, in *StreamBiasVoltagesRequest, opts ...grpc.CallOption) (StatisticsService_StreamBiasVoltagesClient, error)
	// A histogram of read lengths
	//
	// If the experiment is in-progress, then the latest histogram is streamed on a regular basis
	// If the experiment is complete, then the final histogram is returned
	//
	// Since 4.0
	StreamReadLengthHistogram(ctx context.Context, in *StreamReadLengthHistogramRequest, opts ...grpc.CallOption) (StatisticsService_StreamReadLengthHistogramClient, error)
	// Gets a list of the types of read-length values for which a histogram is available
	//
	// Since 3.2
	GetReadLengthTypes(ctx context.Context, in *GetReadLengthTypesRequest, opts ...grpc.CallOption) (*GetReadLengthTypesResponse, error)
	// Returns the qscore over time metric represented as datasets (i.e. boxplots).
	//
	// These metrics apply to all the successfully called reads.
	//
	// A dataset is a collection of quantiles (min, max, q50 etc - please see BoxplotDataset) recorded for
	// a fixed period of time, say dt. dt is specified in the configs, and it defaults to 10 min.
	//
	// When acquisition starts, MinKNOW accumulates these stats for each dt interval. Each dt generates
	// a dataset streamed by this rpc. The stream can request aggregated stats by averaging the stats from
	// consecutive dt periods.
	//
	// Notes:
	//
	// Each streamed message will return ALL the datasets (i.e. boxplots) from the start of the experiment.
	//
	// When using this rpc, basecalling needs to be enabled.
	//
	// Since 4.0
	StreamBasecallBoxplots(ctx context.Context, in *StreamBoxplotRequest, opts ...grpc.CallOption) (StatisticsService_StreamBasecallBoxplotsClient, error)
}

type statisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsServiceClient(cc grpc.ClientConnInterface) StatisticsServiceClient {
	return &statisticsServiceClient{cc}
}

func (c *statisticsServiceClient) StreamDutyTime(ctx context.Context, in *StreamDutyTimeRequest, opts ...grpc.CallOption) (StatisticsService_StreamDutyTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[0], "/minknow_api.statistics.StatisticsService/stream_duty_time", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsServiceStreamDutyTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatisticsService_StreamDutyTimeClient interface {
	Recv() (*StreamDutyTimeResponse, error)
	grpc.ClientStream
}

type statisticsServiceStreamDutyTimeClient struct {
	grpc.ClientStream
}

func (x *statisticsServiceStreamDutyTimeClient) Recv() (*StreamDutyTimeResponse, error) {
	m := new(StreamDutyTimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statisticsServiceClient) StreamAcquisitionOutput(ctx context.Context, in *StreamAcquisitionOutputRequest, opts ...grpc.CallOption) (StatisticsService_StreamAcquisitionOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[1], "/minknow_api.statistics.StatisticsService/stream_acquisition_output", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsServiceStreamAcquisitionOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatisticsService_StreamAcquisitionOutputClient interface {
	Recv() (*StreamAcquisitionOutputResponse, error)
	grpc.ClientStream
}

type statisticsServiceStreamAcquisitionOutputClient struct {
	grpc.ClientStream
}

func (x *statisticsServiceStreamAcquisitionOutputClient) Recv() (*StreamAcquisitionOutputResponse, error) {
	m := new(StreamAcquisitionOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statisticsServiceClient) StreamWriterOutput(ctx context.Context, in *StreamWriterOutputRequest, opts ...grpc.CallOption) (StatisticsService_StreamWriterOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[2], "/minknow_api.statistics.StatisticsService/stream_writer_output", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsServiceStreamWriterOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatisticsService_StreamWriterOutputClient interface {
	Recv() (*StreamWriterOutputResponse, error)
	grpc.ClientStream
}

type statisticsServiceStreamWriterOutputClient struct {
	grpc.ClientStream
}

func (x *statisticsServiceStreamWriterOutputClient) Recv() (*StreamWriterOutputResponse, error) {
	m := new(StreamWriterOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statisticsServiceClient) StreamEncounteredAcquisitionOutputKeys(ctx context.Context, in *StreamEncounteredAcquisitionOutputKeysRequest, opts ...grpc.CallOption) (StatisticsService_StreamEncounteredAcquisitionOutputKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[3], "/minknow_api.statistics.StatisticsService/stream_encountered_acquisition_output_keys", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsServiceStreamEncounteredAcquisitionOutputKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatisticsService_StreamEncounteredAcquisitionOutputKeysClient interface {
	Recv() (*StreamEncounteredAcquisitionOutputKeysResponse, error)
	grpc.ClientStream
}

type statisticsServiceStreamEncounteredAcquisitionOutputKeysClient struct {
	grpc.ClientStream
}

func (x *statisticsServiceStreamEncounteredAcquisitionOutputKeysClient) Recv() (*StreamEncounteredAcquisitionOutputKeysResponse, error) {
	m := new(StreamEncounteredAcquisitionOutputKeysResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statisticsServiceClient) StreamTemperature(ctx context.Context, in *StreamTemperatureRequest, opts ...grpc.CallOption) (StatisticsService_StreamTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[4], "/minknow_api.statistics.StatisticsService/stream_temperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsServiceStreamTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatisticsService_StreamTemperatureClient interface {
	Recv() (*StreamTemperatureResponse, error)
	grpc.ClientStream
}

type statisticsServiceStreamTemperatureClient struct {
	grpc.ClientStream
}

func (x *statisticsServiceStreamTemperatureClient) Recv() (*StreamTemperatureResponse, error) {
	m := new(StreamTemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statisticsServiceClient) StreamBiasVoltages(ctx context.Context, in *StreamBiasVoltagesRequest, opts ...grpc.CallOption) (StatisticsService_StreamBiasVoltagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[5], "/minknow_api.statistics.StatisticsService/stream_bias_voltages", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsServiceStreamBiasVoltagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatisticsService_StreamBiasVoltagesClient interface {
	Recv() (*StreamBiasVoltagesResponse, error)
	grpc.ClientStream
}

type statisticsServiceStreamBiasVoltagesClient struct {
	grpc.ClientStream
}

func (x *statisticsServiceStreamBiasVoltagesClient) Recv() (*StreamBiasVoltagesResponse, error) {
	m := new(StreamBiasVoltagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statisticsServiceClient) StreamReadLengthHistogram(ctx context.Context, in *StreamReadLengthHistogramRequest, opts ...grpc.CallOption) (StatisticsService_StreamReadLengthHistogramClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[6], "/minknow_api.statistics.StatisticsService/stream_read_length_histogram", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsServiceStreamReadLengthHistogramClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatisticsService_StreamReadLengthHistogramClient interface {
	Recv() (*StreamReadLengthHistogramResponse, error)
	grpc.ClientStream
}

type statisticsServiceStreamReadLengthHistogramClient struct {
	grpc.ClientStream
}

func (x *statisticsServiceStreamReadLengthHistogramClient) Recv() (*StreamReadLengthHistogramResponse, error) {
	m := new(StreamReadLengthHistogramResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statisticsServiceClient) GetReadLengthTypes(ctx context.Context, in *GetReadLengthTypesRequest, opts ...grpc.CallOption) (*GetReadLengthTypesResponse, error) {
	out := new(GetReadLengthTypesResponse)
	err := c.cc.Invoke(ctx, "/minknow_api.statistics.StatisticsService/get_read_length_types", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) StreamBasecallBoxplots(ctx context.Context, in *StreamBoxplotRequest, opts ...grpc.CallOption) (StatisticsService_StreamBasecallBoxplotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[7], "/minknow_api.statistics.StatisticsService/stream_basecall_boxplots", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticsServiceStreamBasecallBoxplotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatisticsService_StreamBasecallBoxplotsClient interface {
	Recv() (*BoxplotResponse, error)
	grpc.ClientStream
}

type statisticsServiceStreamBasecallBoxplotsClient struct {
	grpc.ClientStream
}

func (x *statisticsServiceStreamBasecallBoxplotsClient) Recv() (*BoxplotResponse, error) {
	m := new(BoxplotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatisticsServiceServer is the server API for StatisticsService service.
// All implementations must embed UnimplementedStatisticsServiceServer
// for forward compatibility
type StatisticsServiceServer interface {
	// Tracks how much time has been spent in each channel state, aggregated across all the channels
	//
	// Since 4.0
	StreamDutyTime(*StreamDutyTimeRequest, StatisticsService_StreamDutyTimeServer) error
	// Tracks experiment output across various filters over time.
	//
	// The first response will give you all the data it can, and continue to provide updates
	// if the acquisition period remains live.
	//
	// The stream will end once the current acquisition period ends, and a caller will need to
	// reinvoke the rpc in order to get new data.
	//
	// Since 1.14
	StreamAcquisitionOutput(*StreamAcquisitionOutputRequest, StatisticsService_StreamAcquisitionOutputServer) error
	// Tracks experiment writes across all channels over time
	//
	// The first response will give you all the data it can.
	//
	// The stream will end once the current acquisition period ends, and a caller will need to
	// reinvoke the rpc in order to get new data.
	//
	// Since 4.0
	StreamWriterOutput(*StreamWriterOutputRequest, StatisticsService_StreamWriterOutputServer) error
	// Tracks which barcode names have been encountered
	//
	// When a new barcode name is encountered, a list of all encountered barcode names is returned
	//
	// Since 4.0
	StreamEncounteredAcquisitionOutputKeys(*StreamEncounteredAcquisitionOutputKeysRequest, StatisticsService_StreamEncounteredAcquisitionOutputKeysServer) error
	// Streams device temperature for a device. The first message will contain all of the temperatures up
	// until the current live point, and then messages after that point will just be updates.
	//
	// Temperatures are averaged over a 1 minute period, and the value of each bucket is given in minute intervals
	//
	// Since 3.0
	StreamTemperature(*StreamTemperatureRequest, StatisticsService_StreamTemperatureServer) error
	// Streams when bias voltage changes occur, where the response given will be the acquisition
	// index that the voltage changed at, and the voltage itself. The first message will contain
	// all of the bias voltage changes up until the current live point, and then messages after
	// that period will just be updates
	//
	// Will fail with INVALID_ARGUMENT if an unknown acquisition id is given
	//
	// Since 3.2
	StreamBiasVoltages(*StreamBiasVoltagesRequest, StatisticsService_StreamBiasVoltagesServer) error
	// A histogram of read lengths
	//
	// If the experiment is in-progress, then the latest histogram is streamed on a regular basis
	// If the experiment is complete, then the final histogram is returned
	//
	// Since 4.0
	StreamReadLengthHistogram(*StreamReadLengthHistogramRequest, StatisticsService_StreamReadLengthHistogramServer) error
	// Gets a list of the types of read-length values for which a histogram is available
	//
	// Since 3.2
	GetReadLengthTypes(context.Context, *GetReadLengthTypesRequest) (*GetReadLengthTypesResponse, error)
	// Returns the qscore over time metric represented as datasets (i.e. boxplots).
	//
	// These metrics apply to all the successfully called reads.
	//
	// A dataset is a collection of quantiles (min, max, q50 etc - please see BoxplotDataset) recorded for
	// a fixed period of time, say dt. dt is specified in the configs, and it defaults to 10 min.
	//
	// When acquisition starts, MinKNOW accumulates these stats for each dt interval. Each dt generates
	// a dataset streamed by this rpc. The stream can request aggregated stats by averaging the stats from
	// consecutive dt periods.
	//
	// Notes:
	//
	// Each streamed message will return ALL the datasets (i.e. boxplots) from the start of the experiment.
	//
	// When using this rpc, basecalling needs to be enabled.
	//
	// Since 4.0
	StreamBasecallBoxplots(*StreamBoxplotRequest, StatisticsService_StreamBasecallBoxplotsServer) error
	mustEmbedUnimplementedStatisticsServiceServer()
}

// UnimplementedStatisticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsServiceServer struct {
}

func (UnimplementedStatisticsServiceServer) StreamDutyTime(*StreamDutyTimeRequest, StatisticsService_StreamDutyTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDutyTime not implemented")
}
func (UnimplementedStatisticsServiceServer) StreamAcquisitionOutput(*StreamAcquisitionOutputRequest, StatisticsService_StreamAcquisitionOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAcquisitionOutput not implemented")
}
func (UnimplementedStatisticsServiceServer) StreamWriterOutput(*StreamWriterOutputRequest, StatisticsService_StreamWriterOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWriterOutput not implemented")
}
func (UnimplementedStatisticsServiceServer) StreamEncounteredAcquisitionOutputKeys(*StreamEncounteredAcquisitionOutputKeysRequest, StatisticsService_StreamEncounteredAcquisitionOutputKeysServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEncounteredAcquisitionOutputKeys not implemented")
}
func (UnimplementedStatisticsServiceServer) StreamTemperature(*StreamTemperatureRequest, StatisticsService_StreamTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTemperature not implemented")
}
func (UnimplementedStatisticsServiceServer) StreamBiasVoltages(*StreamBiasVoltagesRequest, StatisticsService_StreamBiasVoltagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBiasVoltages not implemented")
}
func (UnimplementedStatisticsServiceServer) StreamReadLengthHistogram(*StreamReadLengthHistogramRequest, StatisticsService_StreamReadLengthHistogramServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadLengthHistogram not implemented")
}
func (UnimplementedStatisticsServiceServer) GetReadLengthTypes(context.Context, *GetReadLengthTypesRequest) (*GetReadLengthTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadLengthTypes not implemented")
}
func (UnimplementedStatisticsServiceServer) StreamBasecallBoxplots(*StreamBoxplotRequest, StatisticsService_StreamBasecallBoxplotsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBasecallBoxplots not implemented")
}
func (UnimplementedStatisticsServiceServer) mustEmbedUnimplementedStatisticsServiceServer() {}

// UnsafeStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServiceServer will
// result in compilation errors.
type UnsafeStatisticsServiceServer interface {
	mustEmbedUnimplementedStatisticsServiceServer()
}

func RegisterStatisticsServiceServer(s grpc.ServiceRegistrar, srv StatisticsServiceServer) {
	s.RegisterService(&StatisticsService_ServiceDesc, srv)
}

func _StatisticsService_StreamDutyTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDutyTimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamDutyTime(m, &statisticsServiceStreamDutyTimeServer{stream})
}

type StatisticsService_StreamDutyTimeServer interface {
	Send(*StreamDutyTimeResponse) error
	grpc.ServerStream
}

type statisticsServiceStreamDutyTimeServer struct {
	grpc.ServerStream
}

func (x *statisticsServiceStreamDutyTimeServer) Send(m *StreamDutyTimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatisticsService_StreamAcquisitionOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAcquisitionOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamAcquisitionOutput(m, &statisticsServiceStreamAcquisitionOutputServer{stream})
}

type StatisticsService_StreamAcquisitionOutputServer interface {
	Send(*StreamAcquisitionOutputResponse) error
	grpc.ServerStream
}

type statisticsServiceStreamAcquisitionOutputServer struct {
	grpc.ServerStream
}

func (x *statisticsServiceStreamAcquisitionOutputServer) Send(m *StreamAcquisitionOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatisticsService_StreamWriterOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamWriterOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamWriterOutput(m, &statisticsServiceStreamWriterOutputServer{stream})
}

type StatisticsService_StreamWriterOutputServer interface {
	Send(*StreamWriterOutputResponse) error
	grpc.ServerStream
}

type statisticsServiceStreamWriterOutputServer struct {
	grpc.ServerStream
}

func (x *statisticsServiceStreamWriterOutputServer) Send(m *StreamWriterOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatisticsService_StreamEncounteredAcquisitionOutputKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEncounteredAcquisitionOutputKeysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamEncounteredAcquisitionOutputKeys(m, &statisticsServiceStreamEncounteredAcquisitionOutputKeysServer{stream})
}

type StatisticsService_StreamEncounteredAcquisitionOutputKeysServer interface {
	Send(*StreamEncounteredAcquisitionOutputKeysResponse) error
	grpc.ServerStream
}

type statisticsServiceStreamEncounteredAcquisitionOutputKeysServer struct {
	grpc.ServerStream
}

func (x *statisticsServiceStreamEncounteredAcquisitionOutputKeysServer) Send(m *StreamEncounteredAcquisitionOutputKeysResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatisticsService_StreamTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTemperatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamTemperature(m, &statisticsServiceStreamTemperatureServer{stream})
}

type StatisticsService_StreamTemperatureServer interface {
	Send(*StreamTemperatureResponse) error
	grpc.ServerStream
}

type statisticsServiceStreamTemperatureServer struct {
	grpc.ServerStream
}

func (x *statisticsServiceStreamTemperatureServer) Send(m *StreamTemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatisticsService_StreamBiasVoltages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBiasVoltagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamBiasVoltages(m, &statisticsServiceStreamBiasVoltagesServer{stream})
}

type StatisticsService_StreamBiasVoltagesServer interface {
	Send(*StreamBiasVoltagesResponse) error
	grpc.ServerStream
}

type statisticsServiceStreamBiasVoltagesServer struct {
	grpc.ServerStream
}

func (x *statisticsServiceStreamBiasVoltagesServer) Send(m *StreamBiasVoltagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatisticsService_StreamReadLengthHistogram_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReadLengthHistogramRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamReadLengthHistogram(m, &statisticsServiceStreamReadLengthHistogramServer{stream})
}

type StatisticsService_StreamReadLengthHistogramServer interface {
	Send(*StreamReadLengthHistogramResponse) error
	grpc.ServerStream
}

type statisticsServiceStreamReadLengthHistogramServer struct {
	grpc.ServerStream
}

func (x *statisticsServiceStreamReadLengthHistogramServer) Send(m *StreamReadLengthHistogramResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatisticsService_GetReadLengthTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadLengthTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetReadLengthTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minknow_api.statistics.StatisticsService/get_read_length_types",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetReadLengthTypes(ctx, req.(*GetReadLengthTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_StreamBasecallBoxplots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBoxplotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamBasecallBoxplots(m, &statisticsServiceStreamBasecallBoxplotsServer{stream})
}

type StatisticsService_StreamBasecallBoxplotsServer interface {
	Send(*BoxplotResponse) error
	grpc.ServerStream
}

type statisticsServiceStreamBasecallBoxplotsServer struct {
	grpc.ServerStream
}

func (x *statisticsServiceStreamBasecallBoxplotsServer) Send(m *BoxplotResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StatisticsService_ServiceDesc is the grpc.ServiceDesc for StatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minknow_api.statistics.StatisticsService",
	HandlerType: (*StatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_read_length_types",
			Handler:    _StatisticsService_GetReadLengthTypes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream_duty_time",
			Handler:       _StatisticsService_StreamDutyTime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_acquisition_output",
			Handler:       _StatisticsService_StreamAcquisitionOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_writer_output",
			Handler:       _StatisticsService_StreamWriterOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_encountered_acquisition_output_keys",
			Handler:       _StatisticsService_StreamEncounteredAcquisitionOutputKeys_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_temperature",
			Handler:       _StatisticsService_StreamTemperature_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_bias_voltages",
			Handler:       _StatisticsService_StreamBiasVoltages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_read_length_histogram",
			Handler:       _StatisticsService_StreamReadLengthHistogram_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "stream_basecall_boxplots",
			Handler:       _StatisticsService_StreamBasecallBoxplots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minknow_api/statistics.proto",
}
